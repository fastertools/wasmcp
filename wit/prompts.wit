/// Prompt types and capabilities for MCP

/// Type definitions for prompts
interface prompt-types {
    use types.{message-role, content-block, base-metadata, meta-fields, cursor, progress-token};

    /// Argument definition for a prompt template
    record prompt-argument {
        /// Base metadata (name and optional title)
        base: base-metadata,
        /// Human-readable description
        description: option<string>,
        /// Whether this argument is required
        required: option<bool>,
    }

    /// Prompt template definition
    record prompt {
        /// Base metadata (name and optional title)
        base: base-metadata,
        /// Description of what this prompt does
        description: option<string>,
        /// Arguments that can be passed to the prompt
        arguments: option<list<prompt-argument>>,
        /// Extension metadata
        meta: option<meta-fields>,
    }

    /// Message in a prompt conversation
    record prompt-message {
        /// Who is speaking (user, assistant, or system)
        role: message-role,
        /// Message content
        content: content-block,
    }

    /// Request to list available prompts
    record list-prompts-request {
        /// Pagination cursor
        cursor: option<cursor>,
        /// Progress tracking token
        progress-token: option<progress-token>,
        /// Extension metadata
        meta: option<meta-fields>,
    }

    /// Response with list of prompts
    record list-prompts-response {
        /// Available prompts
        prompts: list<prompt>,
        /// Cursor for next page
        next-cursor: option<cursor>,
        /// Extension metadata
        meta: option<meta-fields>,
    }

    /// Request to get a specific prompt
    record get-prompt-request {
        /// Name of the prompt to retrieve
        name: string,
        /// Arguments for template substitution
        arguments: option<list<tuple<string, string>>>,
        /// Progress tracking token
        progress-token: option<progress-token>,
        /// Extension metadata
        meta: option<meta-fields>,
    }

    /// Response with rendered prompt messages
    record get-prompt-response {
        /// Optional description of the rendered prompt
        description: option<string>,
        /// Messages that make up the prompt
        messages: list<prompt-message>,
        /// Extension metadata
        meta: option<meta-fields>,
    }

}

/// Prompt capabilities - implement this to provide prompts
interface prompts-capabilities {
    use types.{mcp-error};
    use prompt-types.{list-prompts-request, list-prompts-response, get-prompt-request, get-prompt-response};
    
    /// List available prompts
    handle-list-prompts: func(request: list-prompts-request) -> result<list-prompts-response, mcp-error>;
    
    /// Get a specific prompt
    handle-get-prompt: func(request: get-prompt-request) -> result<get-prompt-response, mcp-error>;
}
