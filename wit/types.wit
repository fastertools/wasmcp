package fastertools:mcp@0.1.1;

/// Core type definitions for the Model Context Protocol
/// These types are used across all MCP interfaces

interface types {
    /// Role in a conversation
    enum role {
        user,
        assistant,
    }

    /// Extensible metadata fields for forward compatibility
    type meta-fields = list<tuple<string, string>>;
    
    /// Annotations provide hints to clients about how to handle data
    record annotations {
        /// Who this data is intended for
        audience: option<list<role>>,
        /// Priority from 0.0 (least) to 1.0 (most important)
        priority: option<f64>,
        /// ISO 8601 timestamp of last modification
        last-modified: option<string>,
    }

    /// Base metadata pattern used throughout the protocol
    record base-metadata {
        /// Programmatic identifier
        name: string,
        /// Human-readable display name
        title: option<string>,
    }

    /// Content block types that can be included in messages
    variant content-block {
        text(text-content),
        image(image-content),
        audio(audio-content),
        resource-link(resource-link),
        embedded-resource(embedded-resource),
    }

    /// Text content with optional annotations
    record text-content {
        text: string,
        annotations: option<annotations>,
        meta: option<meta-fields>,
    }

    /// Image content as binary data
    record image-content {
        /// Base64-encoded image data
        data: list<u8>,
        /// MIME type (e.g., "image/png", "image/jpeg")
        mime-type: string,
        annotations: option<annotations>,
        meta: option<meta-fields>,
    }

    /// Audio content as binary data
    record audio-content {
        /// Base64-encoded audio data
        data: list<u8>,
        /// MIME type (e.g., "audio/wav", "audio/mp3")
        mime-type: string,
        annotations: option<annotations>,
        meta: option<meta-fields>,
    }

    /// Reference to a resource
    record resource-link {
        uri: string,
        name: string,
        description: option<string>,
        mime-type: option<string>,
        size: option<u64>,
        annotations: option<annotations>,
        meta: option<meta-fields>,
    }

    /// Embedded resource content
    record embedded-resource {
        contents: resource-contents,
        annotations: option<annotations>,
        meta: option<meta-fields>,
    }

    /// Resource contents can be either text or binary
    variant resource-contents {
        text(text-resource-contents),
        blob(blob-resource-contents),
    }

    record text-resource-contents {
        uri: string,
        mime-type: option<string>,
        text: string,
        meta: option<meta-fields>,
    }

    record blob-resource-contents {
        uri: string,
        mime-type: option<string>,
        /// Binary data
        blob: list<u8>,
        meta: option<meta-fields>,
    }

    /// JSON value representation
    /// Note: WIT doesn't support recursive types, so arrays/objects contain JSON strings
    variant json-value {
        null,
        boolean(bool),
        integer(s64),
        number(f64),
        str(string),
        /// Array and object values are JSON-encoded strings due to WIT limitations
        array(string),
        object(string),
    }
    
    /// JSON Schema for validation and type information
    record json-schema {
        schema-type: option<string>,
        properties: option<string>, // JSON-encoded object
        required: option<list<string>>,
        description: option<string>,
        // Additional schema fields as JSON string
        additional: option<string>,
    }

    /// Standard JSON-RPC and MCP error codes
    variant error-code {
        /// JSON-RPC standard errors
        parse-error,           // -32700
        invalid-request,       // -32600
        method-not-found,      // -32601
        invalid-params,        // -32602
        internal-error,        // -32603
        /// MCP-specific errors
        resource-not-found,
        tool-not-found,
        prompt-not-found,
        unauthorized,
        rate-limited,
        timeout,
        cancelled,
        /// Custom error with specific code
        custom-code(s32),
    }

    /// Standard error structure
    record mcp-error {
        code: error-code,
        message: string,
        /// Additional error context
        data: option<json-value>,
    }

    /// Pagination cursor for list operations
    type cursor = string;

    /// Progress token for tracking long-running operations
    type progress-token = string;
    
    /// Message role for LLM interactions
    enum message-role {
        user,
        assistant,
        system,
    }
    
    /// Model selection preferences for LLM sampling
    record model-preferences {
        /// Hints for model selection
        hints: option<list<model-hint>>,
        /// Priority for cost optimization (0.0-1.0)
        cost-priority: option<f64>,
        /// Priority for speed (0.0-1.0)
        speed-priority: option<f64>,
        /// Priority for intelligence/capability (0.0-1.0)
        intelligence-priority: option<f64>,
    }
    
    /// Hint for model selection
    record model-hint {
        /// Name pattern to match (e.g., "claude", "gpt-4")
        name: option<string>,
    }
    
    /// Resource template with URI template support (RFC 6570)
    record resource-template {
        /// URI template that can be expanded with variables
        uri-template: string,
        /// Identifier for the template
        name: string,
        /// Human-readable description
        description: option<string>,
        /// Expected MIME type of resources
        mime-type: option<string>,
    }
}
