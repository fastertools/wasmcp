package wasmcp:mcp@0.1.0;

interface types {
    /// Tool descriptor
    record tool {
        name: string,
        description: string,
        input-schema: string,
    }

    /// Tool execution result
    variant tool-result {
        text(string),
        error(error),
    }

    /// Error type
    record error {
        code: s32,
        message: string,
        data: option<string>,
    }

    /// Resource descriptor
    record resource-info {
        uri: string,
        name: string,
        description: option<string>,
        mime-type: option<string>,
    }

    /// Resource contents
    record resource-contents {
        uri: string,
        mime-type: option<string>,
        text: option<string>,
        blob: option<list<u8>>,
    }

    /// Resource read result
    variant resource-result {
        contents(resource-contents),
        error(error),
    }

    /// Prompt descriptor
    record prompt-descriptor {
        name: string,
        description: option<string>,
        arguments: list<prompt-argument>,
    }

    /// Prompt argument
    record prompt-argument {
        name: string,
        description: option<string>,
        required: bool,
    }

    /// Prompt message
    record prompt-message {
        role: string,
        content: string,
    }

    /// Prompt execution result
    variant prompt-result {
        messages(list<prompt-message>),
        error(error),
    }

    /// Response outparam for async tool calls
    /// Following the same pattern as wasi:http/types response-outparam
    resource tool-response-outparam {
        /// Set the tool result - consumes the outparam (can only be called once)
        set: static func(param: tool-response-outparam, result: tool-result);
    }

    /// Response outparam for async resource reads
    resource resource-response-outparam {
        set: static func(param: resource-response-outparam, result: resource-result);
    }

    /// Response outparam for async prompt execution
    resource prompt-response-outparam {
        set: static func(param: prompt-response-outparam, result: prompt-result);
    }
}

interface handler {
    use types.{
        tool, tool-response-outparam, tool-result,
        resource-info, resource-response-outparam, resource-result,
        prompt-descriptor, prompt-response-outparam, prompt-result
    };

    /// List available tools - synchronous as it's just metadata
    list-tools: func() -> list<tool>;

    /// Call a tool - async using outparam pattern
    /// The implementation MUST call tool-response-outparam.set before returning
    /// or the gateway will respond with an error
    call-tool: func(name: string, arguments: string, response-out: tool-response-outparam);

    /// List available resources - synchronous
    list-resources: func() -> list<resource-info>;

    /// Read a resource - async using outparam pattern
    read-resource: func(uri: string, response-out: resource-response-outparam);

    /// List available prompts - synchronous
    list-prompts: func() -> list<prompt-descriptor>;

    /// Get a prompt - async using outparam pattern
    get-prompt: func(name: string, arguments: string, response-out: prompt-response-outparam);
}

world mcp-handler {
    // Core WASI imports for async I/O
    import wasi:io/poll@0.2.0;
    import wasi:io/error@0.2.0;
    import wasi:io/streams@0.2.0;
    
    // HTTP client for outbound requests  
    import wasi:http/types@0.2.0;
    import wasi:http/outgoing-handler@0.2.0;
    
    // Basic CLI imports
    import wasi:cli/environment@0.2.0;
    import wasi:cli/exit@0.2.0;
    import wasi:cli/stdin@0.2.0;
    import wasi:cli/stdout@0.2.0;
    import wasi:cli/stderr@0.2.0;
    
    // Clocks for timestamps
    import wasi:clocks/wall-clock@0.2.0;
    import wasi:clocks/monotonic-clock@0.2.0;
    
    // Random for unique IDs
    import wasi:random/random@0.2.0;
    
    // Optional: Key-value storage
    import wasi:keyvalue/store@0.2.0-draft2;
    
    export handler;
}