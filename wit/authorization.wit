/// Authorization types for MCP servers
/// These types define the authorization configuration that providers can declare
/// and that transports use to enforce authorization

/// Type definitions for authentication and authorization
interface authorization-types {
    use types.{meta-fields};
    
    /// Provider declares its authorization requirements
    /// This is returned by core-capabilities::get-auth-config()
    /// and used by the transport to enforce authorization
    record provider-auth-config {
        /// Expected JWT issuer (REQUIRED for auth)
        expected-issuer: string,
        /// Expected JWT audiences (REQUIRED for auth - must have at least one)
        expected-audiences: list<string>,
        /// JWKS URI for key discovery (REQUIRED for auth)
        jwks-uri: string,
        /// Optional Rego policy for authorization
        policy: option<string>,
        /// Optional data for policy evaluation
        policy-data: option<string>,
    }
    
    /// Authorization context passed between components after successful authorization
    record auth-context {
        /// OAuth client ID that made the request
        client-id: option<string>,
        /// Subject (user ID) from the token
        user-id: option<string>,
        /// OAuth scopes granted to this token
        scopes: list<string>,
        /// Token issuer URL
        issuer: option<string>,
        /// Audience claim from token
        audience: option<string>,
        /// Additional claims from token as key-value pairs
        claims: meta-fields,
        /// Expiration timestamp (Unix seconds)
        exp: option<u64>,
        /// Issued at timestamp (Unix seconds)  
        iat: option<u64>,
    }
    
    /// Authorization request containing all context needed for authorization decisions
    record auth-request {
        /// Bearer token extracted from Authorization header
        token: string,
        /// HTTP method (GET, POST, etc.)
        method: string,
        /// Request path
        path: string,
        /// Request headers as key-value pairs
        headers: list<tuple<string, string>>,
        /// Request body for policy evaluation (e.g., MCP JSON-RPC payload)
        body: option<list<u8>>,
        /// Expected issuer for validation
        expected-issuer: string,
        /// Expected audiences for validation (token must match at least one)
        expected-audiences: list<string>,
        /// JWKS URI for key discovery
        jwks-uri: string,
        /// Optional Rego policy to evaluate (if not provided, allows all authenticated requests)
        policy: option<string>,
        /// Optional data for policy evaluation (JSON string)
        policy-data: option<string>,
    }
    
    /// Authorization response
    variant auth-response {
        /// Request is authorized with context
        authorized(auth-context),
        /// Request is unauthorized with error details
        unauthorized(auth-error),
    }
    
    /// Authorization error details
    record auth-error {
        /// HTTP status code (401, 403, etc.)
        status: u16,
        /// OAuth error code (invalid_token, insufficient_scope, etc.)
        error-code: string,
        /// Human-readable error description
        description: string,
        /// WWW-Authenticate header value for 401 responses
        www-authenticate: option<string>,
    }
}