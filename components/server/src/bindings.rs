// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
//   * additional derives ["serde::Serialize", "serde::Deserialize", "Clone"]
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod fastertools {
    pub mod mcp {
        /// Core type definitions for the Model Context Protocol
        /// These types are used across all MCP interfaces
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Role in a conversation
            #[repr(u8)]
            #[derive(
                Clone,
                Copy,
                Eq,
                Ord,
                PartialEq,
                PartialOrd,
                serde::Deserialize,
                serde::Serialize
            )]
            pub enum Role {
                User,
                Assistant,
            }
            impl ::core::fmt::Debug for Role {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Role::User => f.debug_tuple("Role::User").finish(),
                        Role::Assistant => f.debug_tuple("Role::Assistant").finish(),
                    }
                }
            }
            impl Role {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> Role {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => Role::User,
                        1 => Role::Assistant,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Extensible metadata fields for forward compatibility
            pub type MetaFields = _rt::Vec<(_rt::String, _rt::String)>;
            /// Annotations provide hints to clients about how to handle data
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct Annotations {
                /// Who this data is intended for
                pub audience: Option<_rt::Vec<Role>>,
                /// Priority from 0.0 (least) to 1.0 (most important)
                pub priority: Option<f64>,
                /// ISO 8601 timestamp of last modification
                pub last_modified: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Annotations {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Annotations")
                        .field("audience", &self.audience)
                        .field("priority", &self.priority)
                        .field("last-modified", &self.last_modified)
                        .finish()
                }
            }
            /// Base metadata pattern used throughout the protocol
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct BaseMetadata {
                /// Programmatic identifier
                pub name: _rt::String,
                /// Human-readable display name
                pub title: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for BaseMetadata {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BaseMetadata")
                        .field("name", &self.name)
                        .field("title", &self.title)
                        .finish()
                }
            }
            /// Text content with optional annotations
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct TextContent {
                pub text: _rt::String,
                pub annotations: Option<Annotations>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for TextContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextContent")
                        .field("text", &self.text)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Image content as binary data
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ImageContent {
                /// Base64-encoded image data
                pub data: _rt::Vec<u8>,
                /// MIME type (e.g., "image/png", "image/jpeg")
                pub mime_type: _rt::String,
                pub annotations: Option<Annotations>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ImageContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ImageContent")
                        .field("data", &self.data)
                        .field("mime-type", &self.mime_type)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Audio content as binary data
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct AudioContent {
                /// Base64-encoded audio data
                pub data: _rt::Vec<u8>,
                /// MIME type (e.g., "audio/wav", "audio/mp3")
                pub mime_type: _rt::String,
                pub annotations: Option<Annotations>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for AudioContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AudioContent")
                        .field("data", &self.data)
                        .field("mime-type", &self.mime_type)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Reference to a resource
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ResourceLink {
                pub uri: _rt::String,
                pub name: _rt::String,
                pub description: Option<_rt::String>,
                pub mime_type: Option<_rt::String>,
                pub size: Option<u64>,
                pub annotations: Option<Annotations>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ResourceLink {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourceLink")
                        .field("uri", &self.uri)
                        .field("name", &self.name)
                        .field("description", &self.description)
                        .field("mime-type", &self.mime_type)
                        .field("size", &self.size)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct TextResourceContents {
                pub uri: _rt::String,
                pub mime_type: Option<_rt::String>,
                pub text: _rt::String,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for TextResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextResourceContents")
                        .field("uri", &self.uri)
                        .field("mime-type", &self.mime_type)
                        .field("text", &self.text)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct BlobResourceContents {
                pub uri: _rt::String,
                pub mime_type: Option<_rt::String>,
                /// Binary data
                pub blob: _rt::Vec<u8>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for BlobResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BlobResourceContents")
                        .field("uri", &self.uri)
                        .field("mime-type", &self.mime_type)
                        .field("blob", &self.blob)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Resource contents can be either text or binary
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub enum ResourceContents {
                Text(TextResourceContents),
                Blob(BlobResourceContents),
            }
            impl ::core::fmt::Debug for ResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ResourceContents::Text(e) => {
                            f.debug_tuple("ResourceContents::Text").field(e).finish()
                        }
                        ResourceContents::Blob(e) => {
                            f.debug_tuple("ResourceContents::Blob").field(e).finish()
                        }
                    }
                }
            }
            /// Embedded resource content
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct EmbeddedResource {
                pub contents: ResourceContents,
                pub annotations: Option<Annotations>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for EmbeddedResource {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EmbeddedResource")
                        .field("contents", &self.contents)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Content block types that can be included in messages
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub enum ContentBlock {
                Text(TextContent),
                Image(ImageContent),
                Audio(AudioContent),
                ResourceLink(ResourceLink),
                EmbeddedResource(EmbeddedResource),
            }
            impl ::core::fmt::Debug for ContentBlock {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ContentBlock::Text(e) => {
                            f.debug_tuple("ContentBlock::Text").field(e).finish()
                        }
                        ContentBlock::Image(e) => {
                            f.debug_tuple("ContentBlock::Image").field(e).finish()
                        }
                        ContentBlock::Audio(e) => {
                            f.debug_tuple("ContentBlock::Audio").field(e).finish()
                        }
                        ContentBlock::ResourceLink(e) => {
                            f.debug_tuple("ContentBlock::ResourceLink").field(e).finish()
                        }
                        ContentBlock::EmbeddedResource(e) => {
                            f.debug_tuple("ContentBlock::EmbeddedResource")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            /// JSON value as a string
            /// This is a JSON-encoded value that should be parsed/validated by implementations
            /// using their language's native JSON handling
            pub type JsonValue = _rt::String;
            /// JSON Schema as a string
            /// This is a complete JSON Schema document that should be used for validation
            /// using standard JSON Schema libraries
            pub type JsonSchema = _rt::String;
            /// Standard JSON-RPC and MCP error codes
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub enum ErrorCode {
                /// JSON-RPC standard errors
                ParseError,
                /// -32700
                InvalidRequest,
                /// -32600
                MethodNotFound,
                /// -32601
                InvalidParams,
                /// -32602
                InternalError,
                /// -32603
                /// MCP-specific errors
                ResourceNotFound,
                ToolNotFound,
                PromptNotFound,
                Unauthorized,
                RateLimited,
                Timeout,
                Cancelled,
                /// Custom error with specific code
                CustomCode(i32),
            }
            impl ::core::fmt::Debug for ErrorCode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ErrorCode::ParseError => {
                            f.debug_tuple("ErrorCode::ParseError").finish()
                        }
                        ErrorCode::InvalidRequest => {
                            f.debug_tuple("ErrorCode::InvalidRequest").finish()
                        }
                        ErrorCode::MethodNotFound => {
                            f.debug_tuple("ErrorCode::MethodNotFound").finish()
                        }
                        ErrorCode::InvalidParams => {
                            f.debug_tuple("ErrorCode::InvalidParams").finish()
                        }
                        ErrorCode::InternalError => {
                            f.debug_tuple("ErrorCode::InternalError").finish()
                        }
                        ErrorCode::ResourceNotFound => {
                            f.debug_tuple("ErrorCode::ResourceNotFound").finish()
                        }
                        ErrorCode::ToolNotFound => {
                            f.debug_tuple("ErrorCode::ToolNotFound").finish()
                        }
                        ErrorCode::PromptNotFound => {
                            f.debug_tuple("ErrorCode::PromptNotFound").finish()
                        }
                        ErrorCode::Unauthorized => {
                            f.debug_tuple("ErrorCode::Unauthorized").finish()
                        }
                        ErrorCode::RateLimited => {
                            f.debug_tuple("ErrorCode::RateLimited").finish()
                        }
                        ErrorCode::Timeout => {
                            f.debug_tuple("ErrorCode::Timeout").finish()
                        }
                        ErrorCode::Cancelled => {
                            f.debug_tuple("ErrorCode::Cancelled").finish()
                        }
                        ErrorCode::CustomCode(e) => {
                            f.debug_tuple("ErrorCode::CustomCode").field(e).finish()
                        }
                    }
                }
            }
            /// Standard error structure
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct McpError {
                pub code: ErrorCode,
                pub message: _rt::String,
                /// Additional error context (JSON-encoded)
                pub data: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for McpError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("McpError")
                        .field("code", &self.code)
                        .field("message", &self.message)
                        .field("data", &self.data)
                        .finish()
                }
            }
            impl ::core::fmt::Display for McpError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for McpError {}
            /// Pagination cursor for list operations
            pub type Cursor = _rt::String;
            /// Progress token for tracking long-running operations
            pub type ProgressToken = _rt::String;
            /// Message role for LLM interactions
            #[repr(u8)]
            #[derive(
                Clone,
                Copy,
                Eq,
                Ord,
                PartialEq,
                PartialOrd,
                serde::Deserialize,
                serde::Serialize
            )]
            pub enum MessageRole {
                User,
                Assistant,
                System,
            }
            impl ::core::fmt::Debug for MessageRole {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        MessageRole::User => f.debug_tuple("MessageRole::User").finish(),
                        MessageRole::Assistant => {
                            f.debug_tuple("MessageRole::Assistant").finish()
                        }
                        MessageRole::System => {
                            f.debug_tuple("MessageRole::System").finish()
                        }
                    }
                }
            }
            impl MessageRole {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> MessageRole {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => MessageRole::User,
                        1 => MessageRole::Assistant,
                        2 => MessageRole::System,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Hint for model selection
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ModelHint {
                /// Name pattern to match (e.g., "claude", "gpt-4")
                pub name: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ModelHint {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ModelHint").field("name", &self.name).finish()
                }
            }
            /// Model selection preferences for LLM sampling
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ModelPreferences {
                /// Hints for model selection
                pub hints: Option<_rt::Vec<ModelHint>>,
                /// Priority for cost optimization (0.0-1.0)
                pub cost_priority: Option<f64>,
                /// Priority for speed (0.0-1.0)
                pub speed_priority: Option<f64>,
                /// Priority for intelligence/capability (0.0-1.0)
                pub intelligence_priority: Option<f64>,
            }
            impl ::core::fmt::Debug for ModelPreferences {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ModelPreferences")
                        .field("hints", &self.hints)
                        .field("cost-priority", &self.cost_priority)
                        .field("speed-priority", &self.speed_priority)
                        .field("intelligence-priority", &self.intelligence_priority)
                        .finish()
                }
            }
            /// Resource template with URI template support (RFC 6570)
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ResourceTemplate {
                /// URI template that can be expanded with variables
                pub uri_template: _rt::String,
                /// Identifier for the template
                pub name: _rt::String,
                /// Human-readable description
                pub description: Option<_rt::String>,
                /// Expected MIME type of resources
                pub mime_type: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ResourceTemplate {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourceTemplate")
                        .field("uri-template", &self.uri_template)
                        .field("name", &self.name)
                        .field("description", &self.description)
                        .field("mime-type", &self.mime_type)
                        .finish()
                }
            }
        }
        /// Session management and capability negotiation for MCP
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod session {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type McpError = super::super::super::fastertools::mcp::types::McpError;
            pub type MetaFields = super::super::super::fastertools::mcp::types::MetaFields;
            /// Protocol version constants
            /// Current draft version: "DRAFT-2025-v3"
            pub type ProtocolVersion = _rt::String;
            /// Information about an MCP implementation
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ImplementationInfo {
                /// Implementation name (e.g., "weather-server")
                pub name: _rt::String,
                /// Implementation version (e.g., "1.0.0")
                pub version: _rt::String,
                /// Optional human-readable title
                pub title: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ImplementationInfo {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ImplementationInfo")
                        .field("name", &self.name)
                        .field("version", &self.version)
                        .field("title", &self.title)
                        .finish()
                }
            }
            /// Root listing capability details
            #[repr(C)]
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub struct RootsCapability {
                /// Server will notify when roots list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for RootsCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RootsCapability")
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Capabilities that a client supports
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ClientCapabilities {
                /// Experimental/custom capabilities
                pub experimental: Option<MetaFields>,
                /// Support for roots (directory access)
                pub roots: Option<RootsCapability>,
                /// Support for LLM sampling
                pub sampling: Option<bool>,
                /// Support for user elicitation
                pub elicitation: Option<bool>,
            }
            impl ::core::fmt::Debug for ClientCapabilities {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ClientCapabilities")
                        .field("experimental", &self.experimental)
                        .field("roots", &self.roots)
                        .field("sampling", &self.sampling)
                        .field("elicitation", &self.elicitation)
                        .finish()
                }
            }
            /// Prompts capability details
            #[repr(C)]
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub struct PromptsCapability {
                /// Server will notify when prompts list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for PromptsCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PromptsCapability")
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Resources capability details
            #[repr(C)]
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub struct ResourcesCapability {
                /// Server supports resource subscriptions
                pub subscribe: Option<bool>,
                /// Server will notify when resource list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for ResourcesCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourcesCapability")
                        .field("subscribe", &self.subscribe)
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Tools capability details
            #[repr(C)]
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub struct ToolsCapability {
                /// Server will notify when tools list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for ToolsCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolsCapability")
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Capabilities that a server provides
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ServerCapabilities {
                /// Experimental/custom capabilities
                pub experimental: Option<MetaFields>,
                /// Server can send log messages
                pub logging: Option<bool>,
                /// Server supports argument autocompletion
                pub completions: Option<bool>,
                /// Server offers prompts
                pub prompts: Option<PromptsCapability>,
                /// Server offers resources
                pub resources: Option<ResourcesCapability>,
                /// Server offers tools
                pub tools: Option<ToolsCapability>,
            }
            impl ::core::fmt::Debug for ServerCapabilities {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ServerCapabilities")
                        .field("experimental", &self.experimental)
                        .field("logging", &self.logging)
                        .field("completions", &self.completions)
                        .field("prompts", &self.prompts)
                        .field("resources", &self.resources)
                        .field("tools", &self.tools)
                        .finish()
                }
            }
            /// Initialize request sent by client on connection
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct InitializeRequest {
                /// Protocol version the client supports
                pub protocol_version: ProtocolVersion,
                /// Client's capabilities
                pub capabilities: ClientCapabilities,
                /// Client implementation details
                pub client_info: ImplementationInfo,
                /// Optional metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for InitializeRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("InitializeRequest")
                        .field("protocol-version", &self.protocol_version)
                        .field("capabilities", &self.capabilities)
                        .field("client-info", &self.client_info)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Initialize response from server
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct InitializeResponse {
                /// Protocol version the server will use
                pub protocol_version: ProtocolVersion,
                /// Server's capabilities
                pub capabilities: ServerCapabilities,
                /// Server implementation details
                pub server_info: ImplementationInfo,
                /// Optional instructions for using the server
                pub instructions: Option<_rt::String>,
                /// Optional metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for InitializeResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("InitializeResponse")
                        .field("protocol-version", &self.protocol_version)
                        .field("capabilities", &self.capabilities)
                        .field("server-info", &self.server_info)
                        .field("instructions", &self.instructions)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Session lifecycle operations
            /// Initialize the MCP session
            pub fn initialize(
                request: &InitializeRequest,
            ) -> Result<InitializeResponse, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 16 + 19 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 16
                            + 19 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    let InitializeRequest {
                        protocol_version: protocol_version1,
                        capabilities: capabilities1,
                        client_info: client_info1,
                        meta: meta1,
                    } = request;
                    let vec2 = protocol_version1;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
                    *ptr0.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    let ClientCapabilities {
                        experimental: experimental3,
                        roots: roots3,
                        sampling: sampling3,
                        elicitation: elicitation3,
                    } = capabilities1;
                    match experimental3 {
                        Some(e) => {
                            *ptr0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec7 = e;
                            let len7 = vec7.len();
                            let layout7 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec7.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result7 = if layout7.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout7);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec7.into_iter().enumerate() {
                                let base = result7
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t4_0, t4_1) = e;
                                    let vec5 = t4_0;
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *base.add(0).cast::<*mut u8>() = ptr5.cast_mut();
                                    let vec6 = t4_1;
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                            }
                            *ptr0
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len7;
                            *ptr0
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result7;
                            cleanup_list.extend_from_slice(&[(result7, layout7)]);
                        }
                        None => {
                            *ptr0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match roots3 {
                        Some(e) => {
                            *ptr0
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let RootsCapability { list_changed: list_changed8 } = e;
                            match list_changed8 {
                                Some(e) => {
                                    *ptr0
                                        .add(1 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(2 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                None => {
                                    *ptr0
                                        .add(1 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        None => {
                            *ptr0
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match sampling3 {
                        Some(e) => {
                            *ptr0
                                .add(3 + 5 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            *ptr0
                                .add(4 + 5 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (match e {
                                true => 1,
                                false => 0,
                            }) as u8;
                        }
                        None => {
                            *ptr0
                                .add(3 + 5 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match elicitation3 {
                        Some(e) => {
                            *ptr0
                                .add(5 + 5 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            *ptr0
                                .add(6 + 5 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (match e {
                                true => 1,
                                false => 0,
                            }) as u8;
                        }
                        None => {
                            *ptr0
                                .add(5 + 5 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let ImplementationInfo {
                        name: name9,
                        version: version9,
                        title: title9,
                    } = client_info1;
                    let vec10 = name9;
                    let ptr10 = vec10.as_ptr().cast::<u8>();
                    let len10 = vec10.len();
                    *ptr0
                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len10;
                    *ptr0
                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr10.cast_mut();
                    let vec11 = version9;
                    let ptr11 = vec11.as_ptr().cast::<u8>();
                    let len11 = vec11.len();
                    *ptr0
                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len11;
                    *ptr0
                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr11.cast_mut();
                    match title9 {
                        Some(e) => {
                            *ptr0
                                .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec12 = e;
                            let ptr12 = vec12.as_ptr().cast::<u8>();
                            let len12 = vec12.len();
                            *ptr0
                                .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len12;
                            *ptr0
                                .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr12.cast_mut();
                        }
                        None => {
                            *ptr0
                                .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match meta1 {
                        Some(e) => {
                            *ptr0
                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec16 = e;
                            let len16 = vec16.len();
                            let layout16 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec16.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result16 = if layout16.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout16).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout16);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec16.into_iter().enumerate() {
                                let base = result16
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t13_0, t13_1) = e;
                                    let vec14 = t13_0;
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *base.add(0).cast::<*mut u8>() = ptr14.cast_mut();
                                    let vec15 = t13_1;
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len15;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr15.cast_mut();
                                }
                            }
                            *ptr0
                                .add(8 + 14 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len16;
                            *ptr0
                                .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result16;
                            cleanup_list.extend_from_slice(&[(result16, layout16)]);
                        }
                        None => {
                            *ptr0
                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let ptr17 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fastertools:mcp/session@0.1.4")]
                    unsafe extern "C" {
                        #[link_name = "initialize"]
                        fn wit_import18(_: *mut u8, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import18(_: *mut u8, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import18(ptr0, ptr17) };
                    let l19 = i32::from(*ptr17.add(0).cast::<u8>());
                    let result82 = match l19 {
                        0 => {
                            let e = {
                                let l20 = *ptr17
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l21 = *ptr17
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len22 = l21;
                                let bytes22 = _rt::Vec::from_raw_parts(
                                    l20.cast(),
                                    len22,
                                    len22,
                                );
                                let l23 = i32::from(
                                    *ptr17
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l33 = i32::from(
                                    *ptr17
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l35 = i32::from(
                                    *ptr17
                                        .add(2 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l37 = i32::from(
                                    *ptr17
                                        .add(4 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l40 = i32::from(
                                    *ptr17
                                        .add(7 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l45 = i32::from(
                                    *ptr17
                                        .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l48 = *ptr17
                                    .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l49 = *ptr17
                                    .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len50 = l49;
                                let bytes50 = _rt::Vec::from_raw_parts(
                                    l48.cast(),
                                    len50,
                                    len50,
                                );
                                let l51 = *ptr17
                                    .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l52 = *ptr17
                                    .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len53 = l52;
                                let bytes53 = _rt::Vec::from_raw_parts(
                                    l51.cast(),
                                    len53,
                                    len53,
                                );
                                let l54 = i32::from(
                                    *ptr17
                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l58 = i32::from(
                                    *ptr17
                                        .add(16 + 13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l62 = i32::from(
                                    *ptr17
                                        .add(16 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                InitializeResponse {
                                    protocol_version: _rt::string_lift(bytes22),
                                    capabilities: ServerCapabilities {
                                        experimental: match l23 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l24 = *ptr17
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l25 = *ptr17
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base32 = l24;
                                                    let len32 = l25;
                                                    let mut result32 = _rt::Vec::with_capacity(len32);
                                                    for i in 0..len32 {
                                                        let base = base32
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        let e32 = {
                                                            let l26 = *base.add(0).cast::<*mut u8>();
                                                            let l27 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len28 = l27;
                                                            let bytes28 = _rt::Vec::from_raw_parts(
                                                                l26.cast(),
                                                                len28,
                                                                len28,
                                                            );
                                                            let l29 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l30 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len31 = l30;
                                                            let bytes31 = _rt::Vec::from_raw_parts(
                                                                l29.cast(),
                                                                len31,
                                                                len31,
                                                            );
                                                            (_rt::string_lift(bytes28), _rt::string_lift(bytes31))
                                                        };
                                                        result32.push(e32);
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base32,
                                                        len32 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    result32
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        logging: match l33 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l34 = i32::from(
                                                        *ptr17
                                                            .add(1 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    _rt::bool_lift(l34 as u8)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        completions: match l35 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l36 = i32::from(
                                                        *ptr17
                                                            .add(3 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    _rt::bool_lift(l36 as u8)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        prompts: match l37 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l38 = i32::from(
                                                        *ptr17
                                                            .add(5 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    PromptsCapability {
                                                        list_changed: match l38 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l39 = i32::from(
                                                                        *ptr17
                                                                            .add(6 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    _rt::bool_lift(l39 as u8)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        resources: match l40 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l41 = i32::from(
                                                        *ptr17
                                                            .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l43 = i32::from(
                                                        *ptr17
                                                            .add(10 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    ResourcesCapability {
                                                        subscribe: match l41 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l42 = i32::from(
                                                                        *ptr17
                                                                            .add(9 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    _rt::bool_lift(l42 as u8)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        list_changed: match l43 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l44 = i32::from(
                                                                        *ptr17
                                                                            .add(11 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    _rt::bool_lift(l44 as u8)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        tools: match l45 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l46 = i32::from(
                                                        *ptr17
                                                            .add(13 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    ToolsCapability {
                                                        list_changed: match l46 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l47 = i32::from(
                                                                        *ptr17
                                                                            .add(14 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    _rt::bool_lift(l47 as u8)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    },
                                    server_info: ImplementationInfo {
                                        name: _rt::string_lift(bytes50),
                                        version: _rt::string_lift(bytes53),
                                        title: match l54 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l55 = *ptr17
                                                        .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l56 = *ptr17
                                                        .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len57 = l56;
                                                    let bytes57 = _rt::Vec::from_raw_parts(
                                                        l55.cast(),
                                                        len57,
                                                        len57,
                                                    );
                                                    _rt::string_lift(bytes57)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    },
                                    instructions: match l58 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l59 = *ptr17
                                                    .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l60 = *ptr17
                                                    .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len61 = l60;
                                                let bytes61 = _rt::Vec::from_raw_parts(
                                                    l59.cast(),
                                                    len61,
                                                    len61,
                                                );
                                                _rt::string_lift(bytes61)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    meta: match l62 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l63 = *ptr17
                                                    .add(16 + 17 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l64 = *ptr17
                                                    .add(16 + 18 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base71 = l63;
                                                let len71 = l64;
                                                let mut result71 = _rt::Vec::with_capacity(len71);
                                                for i in 0..len71 {
                                                    let base = base71
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e71 = {
                                                        let l65 = *base.add(0).cast::<*mut u8>();
                                                        let l66 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len67 = l66;
                                                        let bytes67 = _rt::Vec::from_raw_parts(
                                                            l65.cast(),
                                                            len67,
                                                            len67,
                                                        );
                                                        let l68 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l69 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len70 = l69;
                                                        let bytes70 = _rt::Vec::from_raw_parts(
                                                            l68.cast(),
                                                            len70,
                                                            len70,
                                                        );
                                                        (_rt::string_lift(bytes67), _rt::string_lift(bytes70))
                                                    };
                                                    result71.push(e71);
                                                }
                                                _rt::cabi_dealloc(
                                                    base71,
                                                    len71 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result71
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l72 = i32::from(
                                    *ptr17.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V74;
                                let v74 = match l72 {
                                    0 => V74::ParseError,
                                    1 => V74::InvalidRequest,
                                    2 => V74::MethodNotFound,
                                    3 => V74::InvalidParams,
                                    4 => V74::InternalError,
                                    5 => V74::ResourceNotFound,
                                    6 => V74::ToolNotFound,
                                    7 => V74::PromptNotFound,
                                    8 => V74::Unauthorized,
                                    9 => V74::RateLimited,
                                    10 => V74::Timeout,
                                    11 => V74::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e74 = {
                                            let l73 = *ptr17
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l73
                                        };
                                        V74::CustomCode(e74)
                                    }
                                };
                                let l75 = *ptr17
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l76 = *ptr17
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len77 = l76;
                                let bytes77 = _rt::Vec::from_raw_parts(
                                    l75.cast(),
                                    len77,
                                    len77,
                                );
                                let l78 = i32::from(
                                    *ptr17
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v74,
                                    message: _rt::string_lift(bytes77),
                                    data: match l78 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l79 = *ptr17
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l80 = *ptr17
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len81 = l80;
                                                let bytes81 = _rt::Vec::from_raw_parts(
                                                    l79.cast(),
                                                    len81,
                                                    len81,
                                                );
                                                _rt::string_lift(bytes81)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result82
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Notify server that initialization is complete
            pub fn initialized() -> Result<(), McpError> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fastertools:mcp/session@0.1.4")]
                    unsafe extern "C" {
                        #[link_name = "initialized"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result13 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = i32::from(
                                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V5;
                                let v5 = match l3 {
                                    0 => V5::ParseError,
                                    1 => V5::InvalidRequest,
                                    2 => V5::MethodNotFound,
                                    3 => V5::InvalidParams,
                                    4 => V5::InternalError,
                                    5 => V5::ResourceNotFound,
                                    6 => V5::ToolNotFound,
                                    7 => V5::PromptNotFound,
                                    8 => V5::Unauthorized,
                                    9 => V5::RateLimited,
                                    10 => V5::Timeout,
                                    11 => V5::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e5 = {
                                            let l4 = *ptr0
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l4
                                        };
                                        V5::CustomCode(e5)
                                    }
                                };
                                let l6 = *ptr0
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr0
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                let l9 = i32::from(
                                    *ptr0
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v5,
                                    message: _rt::string_lift(bytes8),
                                    data: match l9 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l10 = *ptr0
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l11 = *ptr0
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result13
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Ping to check if connection is alive
            pub fn ping() -> Result<(), McpError> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fastertools:mcp/session@0.1.4")]
                    unsafe extern "C" {
                        #[link_name = "ping"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result13 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = i32::from(
                                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V5;
                                let v5 = match l3 {
                                    0 => V5::ParseError,
                                    1 => V5::InvalidRequest,
                                    2 => V5::MethodNotFound,
                                    3 => V5::InvalidParams,
                                    4 => V5::InternalError,
                                    5 => V5::ResourceNotFound,
                                    6 => V5::ToolNotFound,
                                    7 => V5::PromptNotFound,
                                    8 => V5::Unauthorized,
                                    9 => V5::RateLimited,
                                    10 => V5::Timeout,
                                    11 => V5::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e5 = {
                                            let l4 = *ptr0
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l4
                                        };
                                        V5::CustomCode(e5)
                                    }
                                };
                                let l6 = *ptr0
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr0
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                let l9 = i32::from(
                                    *ptr0
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v5,
                                    message: _rt::string_lift(bytes8),
                                    data: match l9 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l10 = *ptr0
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l11 = *ptr0
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result13
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Shutdown the session gracefully
            pub fn shutdown() -> Result<(), McpError> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fastertools:mcp/session@0.1.4")]
                    unsafe extern "C" {
                        #[link_name = "shutdown"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result13 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = i32::from(
                                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V5;
                                let v5 = match l3 {
                                    0 => V5::ParseError,
                                    1 => V5::InvalidRequest,
                                    2 => V5::MethodNotFound,
                                    3 => V5::InvalidParams,
                                    4 => V5::InternalError,
                                    5 => V5::ResourceNotFound,
                                    6 => V5::ToolNotFound,
                                    7 => V5::PromptNotFound,
                                    8 => V5::Unauthorized,
                                    9 => V5::RateLimited,
                                    10 => V5::Timeout,
                                    11 => V5::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e5 = {
                                            let l4 = *ptr0
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l4
                                        };
                                        V5::CustomCode(e5)
                                    }
                                };
                                let l6 = *ptr0
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr0
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                let l9 = i32::from(
                                    *ptr0
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v5,
                                    message: _rt::string_lift(bytes8),
                                    data: match l9 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l10 = *ptr0
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l11 = *ptr0
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result13
                }
            }
        }
        /// Notification system for MCP events and updates
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod notifications {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type McpError = super::super::super::fastertools::mcp::types::McpError;
            pub type MetaFields = super::super::super::fastertools::mcp::types::MetaFields;
            pub type ProgressToken = super::super::super::fastertools::mcp::types::ProgressToken;
            /// Notification types that can be sent
            /// Notification that a long-running operation has progress
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ProgressNotification {
                /// Token identifying the operation
                pub progress_token: ProgressToken,
                /// Current progress value (can be fractional)
                pub progress: f64,
                /// Total expected progress (if known, can be fractional)
                pub total: Option<f64>,
                /// Optional progress message
                pub message: Option<_rt::String>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ProgressNotification {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ProgressNotification")
                        .field("progress-token", &self.progress_token)
                        .field("progress", &self.progress)
                        .field("total", &self.total)
                        .field("message", &self.message)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Notification that an operation was cancelled
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct CancelledNotification {
                /// ID of the cancelled request
                pub request_id: _rt::String,
                /// Optional cancellation reason
                pub reason: Option<_rt::String>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for CancelledNotification {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CancelledNotification")
                        .field("request-id", &self.request_id)
                        .field("reason", &self.reason)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Notification that the tools list has changed
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ToolsListChanged {
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ToolsListChanged {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolsListChanged").field("meta", &self.meta).finish()
                }
            }
            /// Notification that the resources list has changed
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ResourcesListChanged {
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ResourcesListChanged {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourcesListChanged")
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Notification that the prompts list has changed
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct PromptsListChanged {
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for PromptsListChanged {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PromptsListChanged")
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Notification that a subscribed resource has been updated
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ResourceUpdated {
                /// URI of the updated resource
                pub uri: _rt::String,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ResourceUpdated {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourceUpdated")
                        .field("uri", &self.uri)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Notification that the roots list has changed
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct RootsListChanged {
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for RootsListChanged {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RootsListChanged").field("meta", &self.meta).finish()
                }
            }
            /// Log levels for logging notifications
            #[repr(u8)]
            #[derive(
                Clone,
                Copy,
                Eq,
                Ord,
                PartialEq,
                PartialOrd,
                serde::Deserialize,
                serde::Serialize
            )]
            pub enum LogLevel {
                Debug,
                Info,
                Notice,
                Warning,
                Error,
                Critical,
                Alert,
                Emergency,
            }
            impl ::core::fmt::Debug for LogLevel {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        LogLevel::Debug => f.debug_tuple("LogLevel::Debug").finish(),
                        LogLevel::Info => f.debug_tuple("LogLevel::Info").finish(),
                        LogLevel::Notice => f.debug_tuple("LogLevel::Notice").finish(),
                        LogLevel::Warning => f.debug_tuple("LogLevel::Warning").finish(),
                        LogLevel::Error => f.debug_tuple("LogLevel::Error").finish(),
                        LogLevel::Critical => {
                            f.debug_tuple("LogLevel::Critical").finish()
                        }
                        LogLevel::Alert => f.debug_tuple("LogLevel::Alert").finish(),
                        LogLevel::Emergency => {
                            f.debug_tuple("LogLevel::Emergency").finish()
                        }
                    }
                }
            }
            impl LogLevel {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> LogLevel {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => LogLevel::Debug,
                        1 => LogLevel::Info,
                        2 => LogLevel::Notice,
                        3 => LogLevel::Warning,
                        4 => LogLevel::Error,
                        5 => LogLevel::Critical,
                        6 => LogLevel::Alert,
                        7 => LogLevel::Emergency,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Log message notification
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct LogMessage {
                /// Severity level
                pub level: LogLevel,
                /// Optional logger name
                pub logger: Option<_rt::String>,
                /// Log message or data
                pub message: _rt::String,
                /// Additional structured data
                pub data: Option<_rt::Vec<(_rt::String, _rt::String)>>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for LogMessage {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("LogMessage")
                        .field("level", &self.level)
                        .field("logger", &self.logger)
                        .field("message", &self.message)
                        .field("data", &self.data)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// All possible notification types
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub enum Notification {
                /// Progress update for long-running operation
                Progress(ProgressNotification),
                /// Operation was cancelled
                Cancelled(CancelledNotification),
                /// Tools list changed
                ToolsListChanged(ToolsListChanged),
                /// Resources list changed
                ResourcesListChanged(ResourcesListChanged),
                /// Prompts list changed
                PromptsListChanged(PromptsListChanged),
                /// Subscribed resource was updated
                ResourceUpdated(ResourceUpdated),
                /// Roots list changed
                RootsListChanged(RootsListChanged),
                /// Log message from server
                LogMessage(LogMessage),
            }
            impl ::core::fmt::Debug for Notification {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Notification::Progress(e) => {
                            f.debug_tuple("Notification::Progress").field(e).finish()
                        }
                        Notification::Cancelled(e) => {
                            f.debug_tuple("Notification::Cancelled").field(e).finish()
                        }
                        Notification::ToolsListChanged(e) => {
                            f.debug_tuple("Notification::ToolsListChanged")
                                .field(e)
                                .finish()
                        }
                        Notification::ResourcesListChanged(e) => {
                            f.debug_tuple("Notification::ResourcesListChanged")
                                .field(e)
                                .finish()
                        }
                        Notification::PromptsListChanged(e) => {
                            f.debug_tuple("Notification::PromptsListChanged")
                                .field(e)
                                .finish()
                        }
                        Notification::ResourceUpdated(e) => {
                            f.debug_tuple("Notification::ResourceUpdated")
                                .field(e)
                                .finish()
                        }
                        Notification::RootsListChanged(e) => {
                            f.debug_tuple("Notification::RootsListChanged")
                                .field(e)
                                .finish()
                        }
                        Notification::LogMessage(e) => {
                            f.debug_tuple("Notification::LogMessage").field(e).finish()
                        }
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Notification operations
            /// Send a notification to the client
            pub fn send_notification(
                notification: &Notification,
            ) -> Result<(), McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let (
                        result64_0,
                        result64_1,
                        result64_2,
                        result64_3,
                        result64_4,
                        result64_5,
                        result64_6,
                        result64_7,
                        result64_8,
                        result64_9,
                        result64_10,
                        result64_11,
                        result64_12,
                    ) = match notification {
                        Notification::Progress(e) => {
                            let ProgressNotification {
                                progress_token: progress_token0,
                                progress: progress0,
                                total: total0,
                                message: message0,
                                meta: meta0,
                            } = e;
                            let vec1 = progress_token0;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            let (result2_0, result2_1) = match total0 {
                                Some(e) => (1i32, _rt::as_f64(e)),
                                None => (0i32, 0.0f64),
                            };
                            let (result4_0, result4_1, result4_2) = match message0 {
                                Some(e) => {
                                    let vec3 = e;
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    (1i32, ptr3.cast_mut(), len3)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            let (result9_0, result9_1, result9_2) = match meta0 {
                                Some(e) => {
                                    let vec8 = e;
                                    let len8 = vec8.len();
                                    let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec8.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result8 = if layout8.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout8);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec8.into_iter().enumerate() {
                                        let base = result8
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t5_0, t5_1) = e;
                                            let vec6 = t5_0;
                                            let ptr6 = vec6.as_ptr().cast::<u8>();
                                            let len6 = vec6.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len6;
                                            *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                                            let vec7 = t5_1;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len7;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr7.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result8, layout8)]);
                                    (1i32, result8, len8)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                0i32,
                                ptr1.cast_mut(),
                                len1 as *mut u8,
                                ::core::mem::MaybeUninit::new(
                                    (_rt::as_f64(progress0)).to_bits() as i64 as u64,
                                ),
                                result2_0 as *mut u8,
                                ::core::mem::MaybeUninit::new(
                                    (result2_1).to_bits() as i64 as u64,
                                ),
                                result4_0 as usize,
                                result4_1,
                                result4_2 as *mut u8,
                                result9_0 as usize,
                                result9_1,
                                result9_2 as *mut u8,
                                0usize,
                            )
                        }
                        Notification::Cancelled(e) => {
                            let CancelledNotification {
                                request_id: request_id10,
                                reason: reason10,
                                meta: meta10,
                            } = e;
                            let vec11 = request_id10;
                            let ptr11 = vec11.as_ptr().cast::<u8>();
                            let len11 = vec11.len();
                            let (result13_0, result13_1, result13_2) = match reason10 {
                                Some(e) => {
                                    let vec12 = e;
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    (1i32, ptr12.cast_mut(), len12)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            let (result18_0, result18_1, result18_2) = match meta10 {
                                Some(e) => {
                                    let vec17 = e;
                                    let len17 = vec17.len();
                                    let layout17 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec17.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result17 = if layout17.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout17).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout17);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec17.into_iter().enumerate() {
                                        let base = result17
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t14_0, t14_1) = e;
                                            let vec15 = t14_0;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len15;
                                            *base.add(0).cast::<*mut u8>() = ptr15.cast_mut();
                                            let vec16 = t14_1;
                                            let ptr16 = vec16.as_ptr().cast::<u8>();
                                            let len16 = vec16.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len16;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr16.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result17, layout17)]);
                                    (1i32, result17, len17)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                1i32,
                                ptr11.cast_mut(),
                                len11 as *mut u8,
                                ::core::mem::MaybeUninit::new(i64::from(result13_0) as u64),
                                result13_1,
                                ::core::mem::MaybeUninit::new(result13_2 as i64 as u64),
                                result18_0 as usize,
                                result18_1,
                                result18_2 as *mut u8,
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                        Notification::ToolsListChanged(e) => {
                            let ToolsListChanged { meta: meta19 } = e;
                            let (result24_0, result24_1, result24_2) = match meta19 {
                                Some(e) => {
                                    let vec23 = e;
                                    let len23 = vec23.len();
                                    let layout23 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec23.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result23 = if layout23.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout23).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout23);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec23.into_iter().enumerate() {
                                        let base = result23
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t20_0, t20_1) = e;
                                            let vec21 = t20_0;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len21;
                                            *base.add(0).cast::<*mut u8>() = ptr21.cast_mut();
                                            let vec22 = t20_1;
                                            let ptr22 = vec22.as_ptr().cast::<u8>();
                                            let len22 = vec22.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len22;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr22.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result23, layout23)]);
                                    (1i32, result23, len23)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                2i32,
                                result24_0 as *mut u8,
                                result24_1,
                                ::core::mem::MaybeUninit::new(result24_2 as i64 as u64),
                                ::core::ptr::null_mut(),
                                ::core::mem::MaybeUninit::<u64>::zeroed(),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                        Notification::ResourcesListChanged(e) => {
                            let ResourcesListChanged { meta: meta25 } = e;
                            let (result30_0, result30_1, result30_2) = match meta25 {
                                Some(e) => {
                                    let vec29 = e;
                                    let len29 = vec29.len();
                                    let layout29 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec29.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result29 = if layout29.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout29).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout29);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec29.into_iter().enumerate() {
                                        let base = result29
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t26_0, t26_1) = e;
                                            let vec27 = t26_0;
                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                            let len27 = vec27.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len27;
                                            *base.add(0).cast::<*mut u8>() = ptr27.cast_mut();
                                            let vec28 = t26_1;
                                            let ptr28 = vec28.as_ptr().cast::<u8>();
                                            let len28 = vec28.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len28;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr28.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result29, layout29)]);
                                    (1i32, result29, len29)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                3i32,
                                result30_0 as *mut u8,
                                result30_1,
                                ::core::mem::MaybeUninit::new(result30_2 as i64 as u64),
                                ::core::ptr::null_mut(),
                                ::core::mem::MaybeUninit::<u64>::zeroed(),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                        Notification::PromptsListChanged(e) => {
                            let PromptsListChanged { meta: meta31 } = e;
                            let (result36_0, result36_1, result36_2) = match meta31 {
                                Some(e) => {
                                    let vec35 = e;
                                    let len35 = vec35.len();
                                    let layout35 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec35.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result35 = if layout35.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout35).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout35);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec35.into_iter().enumerate() {
                                        let base = result35
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t32_0, t32_1) = e;
                                            let vec33 = t32_0;
                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                            let len33 = vec33.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len33;
                                            *base.add(0).cast::<*mut u8>() = ptr33.cast_mut();
                                            let vec34 = t32_1;
                                            let ptr34 = vec34.as_ptr().cast::<u8>();
                                            let len34 = vec34.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len34;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr34.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result35, layout35)]);
                                    (1i32, result35, len35)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                4i32,
                                result36_0 as *mut u8,
                                result36_1,
                                ::core::mem::MaybeUninit::new(result36_2 as i64 as u64),
                                ::core::ptr::null_mut(),
                                ::core::mem::MaybeUninit::<u64>::zeroed(),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                        Notification::ResourceUpdated(e) => {
                            let ResourceUpdated { uri: uri37, meta: meta37 } = e;
                            let vec38 = uri37;
                            let ptr38 = vec38.as_ptr().cast::<u8>();
                            let len38 = vec38.len();
                            let (result43_0, result43_1, result43_2) = match meta37 {
                                Some(e) => {
                                    let vec42 = e;
                                    let len42 = vec42.len();
                                    let layout42 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec42.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result42 = if layout42.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout42).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout42);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec42.into_iter().enumerate() {
                                        let base = result42
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t39_0, t39_1) = e;
                                            let vec40 = t39_0;
                                            let ptr40 = vec40.as_ptr().cast::<u8>();
                                            let len40 = vec40.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len40;
                                            *base.add(0).cast::<*mut u8>() = ptr40.cast_mut();
                                            let vec41 = t39_1;
                                            let ptr41 = vec41.as_ptr().cast::<u8>();
                                            let len41 = vec41.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len41;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr41.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result42, layout42)]);
                                    (1i32, result42, len42)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                5i32,
                                ptr38.cast_mut(),
                                len38 as *mut u8,
                                ::core::mem::MaybeUninit::new(i64::from(result43_0) as u64),
                                result43_1,
                                ::core::mem::MaybeUninit::new(result43_2 as i64 as u64),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                        Notification::RootsListChanged(e) => {
                            let RootsListChanged { meta: meta44 } = e;
                            let (result49_0, result49_1, result49_2) = match meta44 {
                                Some(e) => {
                                    let vec48 = e;
                                    let len48 = vec48.len();
                                    let layout48 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec48.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result48 = if layout48.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout48).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout48);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec48.into_iter().enumerate() {
                                        let base = result48
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t45_0, t45_1) = e;
                                            let vec46 = t45_0;
                                            let ptr46 = vec46.as_ptr().cast::<u8>();
                                            let len46 = vec46.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len46;
                                            *base.add(0).cast::<*mut u8>() = ptr46.cast_mut();
                                            let vec47 = t45_1;
                                            let ptr47 = vec47.as_ptr().cast::<u8>();
                                            let len47 = vec47.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len47;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr47.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result48, layout48)]);
                                    (1i32, result48, len48)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                6i32,
                                result49_0 as *mut u8,
                                result49_1,
                                ::core::mem::MaybeUninit::new(result49_2 as i64 as u64),
                                ::core::ptr::null_mut(),
                                ::core::mem::MaybeUninit::<u64>::zeroed(),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                        Notification::LogMessage(e) => {
                            let LogMessage {
                                level: level50,
                                logger: logger50,
                                message: message50,
                                data: data50,
                                meta: meta50,
                            } = e;
                            let (result52_0, result52_1, result52_2) = match logger50 {
                                Some(e) => {
                                    let vec51 = e;
                                    let ptr51 = vec51.as_ptr().cast::<u8>();
                                    let len51 = vec51.len();
                                    (1i32, ptr51.cast_mut(), len51)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            let vec53 = message50;
                            let ptr53 = vec53.as_ptr().cast::<u8>();
                            let len53 = vec53.len();
                            let (result58_0, result58_1, result58_2) = match data50 {
                                Some(e) => {
                                    let vec57 = e;
                                    let len57 = vec57.len();
                                    let layout57 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec57.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result57 = if layout57.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout57).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout57);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec57.into_iter().enumerate() {
                                        let base = result57
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t54_0, t54_1) = e;
                                            let vec55 = t54_0;
                                            let ptr55 = vec55.as_ptr().cast::<u8>();
                                            let len55 = vec55.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len55;
                                            *base.add(0).cast::<*mut u8>() = ptr55.cast_mut();
                                            let vec56 = t54_1;
                                            let ptr56 = vec56.as_ptr().cast::<u8>();
                                            let len56 = vec56.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len56;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr56.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result57, layout57)]);
                                    (1i32, result57, len57)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            let (result63_0, result63_1, result63_2) = match meta50 {
                                Some(e) => {
                                    let vec62 = e;
                                    let len62 = vec62.len();
                                    let layout62 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec62.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result62 = if layout62.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout62).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout62);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec62.into_iter().enumerate() {
                                        let base = result62
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t59_0, t59_1) = e;
                                            let vec60 = t59_0;
                                            let ptr60 = vec60.as_ptr().cast::<u8>();
                                            let len60 = vec60.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len60;
                                            *base.add(0).cast::<*mut u8>() = ptr60.cast_mut();
                                            let vec61 = t59_1;
                                            let ptr61 = vec61.as_ptr().cast::<u8>();
                                            let len61 = vec61.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len61;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr61.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result62, layout62)]);
                                    (1i32, result62, len62)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                7i32,
                                level50.clone() as i32 as *mut u8,
                                result52_0 as *mut u8,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(result52_1);
                                    t
                                },
                                result52_2 as *mut u8,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(ptr53.cast_mut());
                                    t
                                },
                                len53,
                                result58_0 as *mut u8,
                                result58_1,
                                result58_2,
                                result63_0 as *mut u8,
                                result63_1,
                                result63_2,
                            )
                        }
                    };
                    let ptr65 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fastertools:mcp/notifications@0.1.4")]
                    unsafe extern "C" {
                        #[link_name = "send-notification"]
                        fn wit_import66(
                            _: i32,
                            _: *mut u8,
                            _: *mut u8,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: *mut u8,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: *mut u8,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import66(
                        _: i32,
                        _: *mut u8,
                        _: *mut u8,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: *mut u8,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: usize,
                        _: *mut u8,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import66(
                            result64_0,
                            result64_1,
                            result64_2,
                            result64_3,
                            result64_4,
                            result64_5,
                            result64_6,
                            result64_7,
                            result64_8,
                            result64_9,
                            result64_10,
                            result64_11,
                            result64_12,
                            ptr65,
                        )
                    };
                    let l67 = i32::from(*ptr65.add(0).cast::<u8>());
                    let result78 = match l67 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l68 = i32::from(
                                    *ptr65.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V70;
                                let v70 = match l68 {
                                    0 => V70::ParseError,
                                    1 => V70::InvalidRequest,
                                    2 => V70::MethodNotFound,
                                    3 => V70::InvalidParams,
                                    4 => V70::InternalError,
                                    5 => V70::ResourceNotFound,
                                    6 => V70::ToolNotFound,
                                    7 => V70::PromptNotFound,
                                    8 => V70::Unauthorized,
                                    9 => V70::RateLimited,
                                    10 => V70::Timeout,
                                    11 => V70::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e70 = {
                                            let l69 = *ptr65
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l69
                                        };
                                        V70::CustomCode(e70)
                                    }
                                };
                                let l71 = *ptr65
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l72 = *ptr65
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len73 = l72;
                                let bytes73 = _rt::Vec::from_raw_parts(
                                    l71.cast(),
                                    len73,
                                    len73,
                                );
                                let l74 = i32::from(
                                    *ptr65
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v70,
                                    message: _rt::string_lift(bytes73),
                                    data: match l74 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l75 = *ptr65
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l76 = *ptr65
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len77 = l76;
                                                let bytes77 = _rt::Vec::from_raw_parts(
                                                    l75.cast(),
                                                    len77,
                                                    len77,
                                                );
                                                _rt::string_lift(bytes77)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result78
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Set the minimum log level for log notifications
            pub fn set_log_level(level: LogLevel) -> Result<(), McpError> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fastertools:mcp/notifications@0.1.4")]
                    unsafe extern "C" {
                        #[link_name = "set-log-level"]
                        fn wit_import1(_: i32, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(level.clone() as i32, ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result13 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = i32::from(
                                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V5;
                                let v5 = match l3 {
                                    0 => V5::ParseError,
                                    1 => V5::InvalidRequest,
                                    2 => V5::MethodNotFound,
                                    3 => V5::InvalidParams,
                                    4 => V5::InternalError,
                                    5 => V5::ResourceNotFound,
                                    6 => V5::ToolNotFound,
                                    7 => V5::PromptNotFound,
                                    8 => V5::Unauthorized,
                                    9 => V5::RateLimited,
                                    10 => V5::Timeout,
                                    11 => V5::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e5 = {
                                            let l4 = *ptr0
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l4
                                        };
                                        V5::CustomCode(e5)
                                    }
                                };
                                let l6 = *ptr0
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr0
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                let l9 = i32::from(
                                    *ptr0
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v5,
                                    message: _rt::string_lift(bytes8),
                                    data: match l9 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l10 = *ptr0
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l11 = *ptr0
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result13
                }
            }
        }
        /// Tool discovery and execution for MCP
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod tools {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type ContentBlock = super::super::super::fastertools::mcp::types::ContentBlock;
            pub type JsonValue = super::super::super::fastertools::mcp::types::JsonValue;
            pub type JsonSchema = super::super::super::fastertools::mcp::types::JsonSchema;
            pub type McpError = super::super::super::fastertools::mcp::types::McpError;
            pub type BaseMetadata = super::super::super::fastertools::mcp::types::BaseMetadata;
            pub type MetaFields = super::super::super::fastertools::mcp::types::MetaFields;
            pub type Cursor = super::super::super::fastertools::mcp::types::Cursor;
            pub type ProgressToken = super::super::super::fastertools::mcp::types::ProgressToken;
            /// Behavioral hints about tool operations
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ToolAnnotations {
                /// Human-readable title for display
                pub title: Option<_rt::String>,
                /// Tool does not modify environment
                pub read_only_hint: Option<bool>,
                /// Tool may perform destructive updates (meaningful when not read-only)
                pub destructive_hint: Option<bool>,
                /// Repeated calls with same args have no additional effect
                pub idempotent_hint: Option<bool>,
                /// Tool interacts with external entities
                pub open_world_hint: Option<bool>,
            }
            impl ::core::fmt::Debug for ToolAnnotations {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolAnnotations")
                        .field("title", &self.title)
                        .field("read-only-hint", &self.read_only_hint)
                        .field("destructive-hint", &self.destructive_hint)
                        .field("idempotent-hint", &self.idempotent_hint)
                        .field("open-world-hint", &self.open_world_hint)
                        .finish()
                }
            }
            /// Tool definition with metadata and schema
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct Tool {
                /// Base metadata (name and optional title)
                pub base: BaseMetadata,
                /// Human-readable description of what the tool does
                pub description: Option<_rt::String>,
                /// JSON Schema for input parameters
                pub input_schema: JsonSchema,
                /// Optional schema for structured output
                pub output_schema: Option<JsonSchema>,
                /// Behavioral hints for clients
                pub annotations: Option<ToolAnnotations>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for Tool {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Tool")
                        .field("base", &self.base)
                        .field("description", &self.description)
                        .field("input-schema", &self.input_schema)
                        .field("output-schema", &self.output_schema)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Result from executing a tool
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ToolResult {
                /// Unstructured content blocks (text, images, etc.)
                pub content: _rt::Vec<ContentBlock>,
                /// Optional structured JSON output
                pub structured_content: Option<JsonValue>,
                /// Whether the tool execution resulted in an error
                /// If true, content should contain error details
                pub is_error: Option<bool>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ToolResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolResult")
                        .field("content", &self.content)
                        .field("structured-content", &self.structured_content)
                        .field("is-error", &self.is_error)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Request to list available tools
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ListToolsRequest {
                /// Pagination cursor from previous response
                pub cursor: Option<Cursor>,
                /// Optional progress tracking token
                pub progress_token: Option<ProgressToken>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ListToolsRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListToolsRequest")
                        .field("cursor", &self.cursor)
                        .field("progress-token", &self.progress_token)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Response with list of available tools
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ListToolsResponse {
                /// Available tools
                pub tools: _rt::Vec<Tool>,
                /// Cursor for next page if more tools exist
                pub next_cursor: Option<Cursor>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ListToolsResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListToolsResponse")
                        .field("tools", &self.tools)
                        .field("next-cursor", &self.next_cursor)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Request to execute a tool
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct CallToolRequest {
                /// Name of the tool to execute
                pub name: _rt::String,
                /// Arguments as JSON object
                pub arguments: Option<JsonValue>,
                /// Optional progress tracking token
                pub progress_token: Option<ProgressToken>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for CallToolRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CallToolRequest")
                        .field("name", &self.name)
                        .field("arguments", &self.arguments)
                        .field("progress-token", &self.progress_token)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Tool operations
            /// List available tools with optional pagination
            pub fn list_tools(
                request: &ListToolsRequest,
            ) -> Result<ListToolsResponse, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 9 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 9
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ListToolsRequest {
                        cursor: cursor0,
                        progress_token: progress_token0,
                        meta: meta0,
                    } = request;
                    let (result2_0, result2_1, result2_2) = match cursor0 {
                        Some(e) => {
                            let vec1 = e;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            (1i32, ptr1.cast_mut(), len1)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result4_0, result4_1, result4_2) = match progress_token0 {
                        Some(e) => {
                            let vec3 = e;
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            (1i32, ptr3.cast_mut(), len3)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result9_0, result9_1, result9_2) = match meta0 {
                        Some(e) => {
                            let vec8 = e;
                            let len8 = vec8.len();
                            let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec8.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result8 = if layout8.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout8);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec8.into_iter().enumerate() {
                                let base = result8
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t5_0, t5_1) = e;
                                    let vec6 = t5_0;
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                                    let vec7 = t5_1;
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr7.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result8, layout8)]);
                            (1i32, result8, len8)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr10 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fastertools:mcp/tools@0.1.4")]
                    unsafe extern "C" {
                        #[link_name = "list-tools"]
                        fn wit_import11(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import11(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import11(
                            result2_0,
                            result2_1,
                            result2_2,
                            result4_0,
                            result4_1,
                            result4_2,
                            result9_0,
                            result9_1,
                            result9_2,
                            ptr10,
                        )
                    };
                    let l12 = i32::from(*ptr10.add(0).cast::<u8>());
                    let result81 = match l12 {
                        0 => {
                            let e = {
                                let l13 = *ptr10
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l14 = *ptr10
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base56 = l13;
                                let len56 = l14;
                                let mut result56 = _rt::Vec::with_capacity(len56);
                                for i in 0..len56 {
                                    let base = base56
                                        .add(i * (8 + 20 * ::core::mem::size_of::<*const u8>()));
                                    let e56 = {
                                        let l15 = *base.add(0).cast::<*mut u8>();
                                        let l16 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len17 = l16;
                                        let bytes17 = _rt::Vec::from_raw_parts(
                                            l15.cast(),
                                            len17,
                                            len17,
                                        );
                                        let l18 = i32::from(
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l22 = i32::from(
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l26 = *base
                                            .add(8 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l27 = *base
                                            .add(9 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len28 = l27;
                                        let bytes28 = _rt::Vec::from_raw_parts(
                                            l26.cast(),
                                            len28,
                                            len28,
                                        );
                                        let l29 = i32::from(
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l33 = i32::from(
                                            *base
                                                .add(13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l46 = i32::from(
                                            *base
                                                .add(8 + 17 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        Tool {
                                            base: super::super::super::fastertools::mcp::types::BaseMetadata {
                                                name: _rt::string_lift(bytes17),
                                                title: match l18 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l19 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l20 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len21 = l20;
                                                            let bytes21 = _rt::Vec::from_raw_parts(
                                                                l19.cast(),
                                                                len21,
                                                                len21,
                                                            );
                                                            _rt::string_lift(bytes21)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            },
                                            description: match l22 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l23 = *base
                                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l24 = *base
                                                            .add(7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len25 = l24;
                                                        let bytes25 = _rt::Vec::from_raw_parts(
                                                            l23.cast(),
                                                            len25,
                                                            len25,
                                                        );
                                                        _rt::string_lift(bytes25)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            input_schema: _rt::string_lift(bytes28),
                                            output_schema: match l29 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l30 = *base
                                                            .add(11 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l31 = *base
                                                            .add(12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len32 = l31;
                                                        let bytes32 = _rt::Vec::from_raw_parts(
                                                            l30.cast(),
                                                            len32,
                                                            len32,
                                                        );
                                                        _rt::string_lift(bytes32)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            annotations: match l33 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l34 = i32::from(
                                                            *base
                                                                .add(14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l38 = i32::from(
                                                            *base
                                                                .add(17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l40 = i32::from(
                                                            *base
                                                                .add(2 + 17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l42 = i32::from(
                                                            *base
                                                                .add(4 + 17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l44 = i32::from(
                                                            *base
                                                                .add(6 + 17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        ToolAnnotations {
                                                            title: match l34 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l35 = *base
                                                                            .add(15 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l36 = *base
                                                                            .add(16 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len37 = l36;
                                                                        let bytes37 = _rt::Vec::from_raw_parts(
                                                                            l35.cast(),
                                                                            len37,
                                                                            len37,
                                                                        );
                                                                        _rt::string_lift(bytes37)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            read_only_hint: match l38 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l39 = i32::from(
                                                                            *base
                                                                                .add(1 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l39 as u8)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            destructive_hint: match l40 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l41 = i32::from(
                                                                            *base
                                                                                .add(3 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l41 as u8)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            idempotent_hint: match l42 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l43 = i32::from(
                                                                            *base
                                                                                .add(5 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l43 as u8)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            open_world_hint: match l44 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l45 = i32::from(
                                                                            *base
                                                                                .add(7 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l45 as u8)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            meta: match l46 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l47 = *base
                                                            .add(8 + 18 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l48 = *base
                                                            .add(8 + 19 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base55 = l47;
                                                        let len55 = l48;
                                                        let mut result55 = _rt::Vec::with_capacity(len55);
                                                        for i in 0..len55 {
                                                            let base = base55
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e55 = {
                                                                let l49 = *base.add(0).cast::<*mut u8>();
                                                                let l50 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len51 = l50;
                                                                let bytes51 = _rt::Vec::from_raw_parts(
                                                                    l49.cast(),
                                                                    len51,
                                                                    len51,
                                                                );
                                                                let l52 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l53 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len54 = l53;
                                                                let bytes54 = _rt::Vec::from_raw_parts(
                                                                    l52.cast(),
                                                                    len54,
                                                                    len54,
                                                                );
                                                                (_rt::string_lift(bytes51), _rt::string_lift(bytes54))
                                                            };
                                                            result55.push(e55);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base55,
                                                            len55 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        result55
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    result56.push(e56);
                                }
                                _rt::cabi_dealloc(
                                    base56,
                                    len56 * (8 + 20 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l57 = i32::from(
                                    *ptr10
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l61 = i32::from(
                                    *ptr10
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                ListToolsResponse {
                                    tools: result56,
                                    next_cursor: match l57 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l58 = *ptr10
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l59 = *ptr10
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len60 = l59;
                                                let bytes60 = _rt::Vec::from_raw_parts(
                                                    l58.cast(),
                                                    len60,
                                                    len60,
                                                );
                                                _rt::string_lift(bytes60)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    meta: match l61 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l62 = *ptr10
                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l63 = *ptr10
                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base70 = l62;
                                                let len70 = l63;
                                                let mut result70 = _rt::Vec::with_capacity(len70);
                                                for i in 0..len70 {
                                                    let base = base70
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e70 = {
                                                        let l64 = *base.add(0).cast::<*mut u8>();
                                                        let l65 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len66 = l65;
                                                        let bytes66 = _rt::Vec::from_raw_parts(
                                                            l64.cast(),
                                                            len66,
                                                            len66,
                                                        );
                                                        let l67 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l68 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len69 = l68;
                                                        let bytes69 = _rt::Vec::from_raw_parts(
                                                            l67.cast(),
                                                            len69,
                                                            len69,
                                                        );
                                                        (_rt::string_lift(bytes66), _rt::string_lift(bytes69))
                                                    };
                                                    result70.push(e70);
                                                }
                                                _rt::cabi_dealloc(
                                                    base70,
                                                    len70 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result70
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l71 = i32::from(
                                    *ptr10.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V73;
                                let v73 = match l71 {
                                    0 => V73::ParseError,
                                    1 => V73::InvalidRequest,
                                    2 => V73::MethodNotFound,
                                    3 => V73::InvalidParams,
                                    4 => V73::InternalError,
                                    5 => V73::ResourceNotFound,
                                    6 => V73::ToolNotFound,
                                    7 => V73::PromptNotFound,
                                    8 => V73::Unauthorized,
                                    9 => V73::RateLimited,
                                    10 => V73::Timeout,
                                    11 => V73::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e73 = {
                                            let l72 = *ptr10
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l72
                                        };
                                        V73::CustomCode(e73)
                                    }
                                };
                                let l74 = *ptr10
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l75 = *ptr10
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len76 = l75;
                                let bytes76 = _rt::Vec::from_raw_parts(
                                    l74.cast(),
                                    len76,
                                    len76,
                                );
                                let l77 = i32::from(
                                    *ptr10
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v73,
                                    message: _rt::string_lift(bytes76),
                                    data: match l77 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l78 = *ptr10
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l79 = *ptr10
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len80 = l79;
                                                let bytes80 = _rt::Vec::from_raw_parts(
                                                    l78.cast(),
                                                    len80,
                                                    len80,
                                                );
                                                _rt::string_lift(bytes80)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result81
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Execute a tool with the provided arguments
            pub fn call_tool(request: &CallToolRequest) -> Result<ToolResult, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 10 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 10
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let CallToolRequest {
                        name: name0,
                        arguments: arguments0,
                        progress_token: progress_token0,
                        meta: meta0,
                    } = request;
                    let vec1 = name0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let (result3_0, result3_1, result3_2) = match arguments0 {
                        Some(e) => {
                            let vec2 = e;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            (1i32, ptr2.cast_mut(), len2)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result5_0, result5_1, result5_2) = match progress_token0 {
                        Some(e) => {
                            let vec4 = e;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            (1i32, ptr4.cast_mut(), len4)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result10_0, result10_1, result10_2) = match meta0 {
                        Some(e) => {
                            let vec9 = e;
                            let len9 = vec9.len();
                            let layout9 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec9.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result9 = if layout9.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout9).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout9);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec9.into_iter().enumerate() {
                                let base = result9
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t6_0, t6_1) = e;
                                    let vec7 = t6_0;
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *base.add(0).cast::<*mut u8>() = ptr7.cast_mut();
                                    let vec8 = t6_1;
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr8.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result9, layout9)]);
                            (1i32, result9, len9)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr11 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fastertools:mcp/tools@0.1.4")]
                    unsafe extern "C" {
                        #[link_name = "call-tool"]
                        fn wit_import12(
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import12(
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import12(
                            ptr1.cast_mut(),
                            len1,
                            result3_0,
                            result3_1,
                            result3_2,
                            result5_0,
                            result5_1,
                            result5_2,
                            result10_0,
                            result10_1,
                            result10_2,
                            ptr11,
                        )
                    };
                    let l13 = i32::from(*ptr11.add(0).cast::<u8>());
                    let result228 = match l13 {
                        0 => {
                            let e = {
                                let l14 = *ptr11
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l15 = *ptr11
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base201 = l14;
                                let len201 = l15;
                                let mut result201 = _rt::Vec::with_capacity(len201);
                                for i in 0..len201 {
                                    let base = base201
                                        .add(i * (72 + 16 * ::core::mem::size_of::<*const u8>()));
                                    let e201 = {
                                        let l16 = i32::from(*base.add(0).cast::<u8>());
                                        use super::super::super::fastertools::mcp::types::ContentBlock as V200;
                                        let v200 = match l16 {
                                            0 => {
                                                let e200 = {
                                                    let l17 = *base.add(8).cast::<*mut u8>();
                                                    let l18 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len19 = l18;
                                                    let bytes19 = _rt::Vec::from_raw_parts(
                                                        l17.cast(),
                                                        len19,
                                                        len19,
                                                    );
                                                    let l20 = i32::from(
                                                        *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l32 = i32::from(
                                                        *base
                                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::fastertools::mcp::types::TextContent {
                                                        text: _rt::string_lift(bytes19),
                                                        annotations: match l20 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l21 = i32::from(
                                                                        *base
                                                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l26 = i32::from(
                                                                        *base
                                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l28 = i32::from(
                                                                        *base
                                                                            .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::fastertools::mcp::types::Annotations {
                                                                        audience: match l21 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l22 = *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l23 = *base
                                                                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base25 = l22;
                                                                                    let len25 = l23;
                                                                                    let mut result25 = _rt::Vec::with_capacity(len25);
                                                                                    for i in 0..len25 {
                                                                                        let base = base25.add(i * 1);
                                                                                        let e25 = {
                                                                                            let l24 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                                l24 as u8,
                                                                                            )
                                                                                        };
                                                                                        result25.push(e25);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base25, len25 * 1, 1);
                                                                                    result25
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l26 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l27 = *base
                                                                                        .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l27
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l28 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l29 = *base
                                                                                        .add(40 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l30 = *base
                                                                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len31 = l30;
                                                                                    let bytes31 = _rt::Vec::from_raw_parts(
                                                                                        l29.cast(),
                                                                                        len31,
                                                                                        len31,
                                                                                    );
                                                                                    _rt::string_lift(bytes31)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l32 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l33 = *base
                                                                        .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l34 = *base
                                                                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base41 = l33;
                                                                    let len41 = l34;
                                                                    let mut result41 = _rt::Vec::with_capacity(len41);
                                                                    for i in 0..len41 {
                                                                        let base = base41
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e41 = {
                                                                            let l35 = *base.add(0).cast::<*mut u8>();
                                                                            let l36 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len37 = l36;
                                                                            let bytes37 = _rt::Vec::from_raw_parts(
                                                                                l35.cast(),
                                                                                len37,
                                                                                len37,
                                                                            );
                                                                            let l38 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l39 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len40 = l39;
                                                                            let bytes40 = _rt::Vec::from_raw_parts(
                                                                                l38.cast(),
                                                                                len40,
                                                                                len40,
                                                                            );
                                                                            (_rt::string_lift(bytes37), _rt::string_lift(bytes40))
                                                                        };
                                                                        result41.push(e41);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base41,
                                                                        len41 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result41
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V200::Text(e200)
                                            }
                                            1 => {
                                                let e200 = {
                                                    let l42 = *base.add(8).cast::<*mut u8>();
                                                    let l43 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len44 = l43;
                                                    let l45 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l46 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len47 = l46;
                                                    let bytes47 = _rt::Vec::from_raw_parts(
                                                        l45.cast(),
                                                        len47,
                                                        len47,
                                                    );
                                                    let l48 = i32::from(
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l60 = i32::from(
                                                        *base
                                                            .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::fastertools::mcp::types::ImageContent {
                                                        data: _rt::Vec::from_raw_parts(l42.cast(), len44, len44),
                                                        mime_type: _rt::string_lift(bytes47),
                                                        annotations: match l48 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l49 = i32::from(
                                                                        *base
                                                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l54 = i32::from(
                                                                        *base
                                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l56 = i32::from(
                                                                        *base
                                                                            .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::fastertools::mcp::types::Annotations {
                                                                        audience: match l49 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l50 = *base
                                                                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l51 = *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base53 = l50;
                                                                                    let len53 = l51;
                                                                                    let mut result53 = _rt::Vec::with_capacity(len53);
                                                                                    for i in 0..len53 {
                                                                                        let base = base53.add(i * 1);
                                                                                        let e53 = {
                                                                                            let l52 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                                l52 as u8,
                                                                                            )
                                                                                        };
                                                                                        result53.push(e53);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base53, len53 * 1, 1);
                                                                                    result53
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l54 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l55 = *base
                                                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l55
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l56 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l57 = *base
                                                                                        .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l58 = *base
                                                                                        .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len59 = l58;
                                                                                    let bytes59 = _rt::Vec::from_raw_parts(
                                                                                        l57.cast(),
                                                                                        len59,
                                                                                        len59,
                                                                                    );
                                                                                    _rt::string_lift(bytes59)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l60 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l61 = *base
                                                                        .add(48 + 9 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l62 = *base
                                                                        .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base69 = l61;
                                                                    let len69 = l62;
                                                                    let mut result69 = _rt::Vec::with_capacity(len69);
                                                                    for i in 0..len69 {
                                                                        let base = base69
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e69 = {
                                                                            let l63 = *base.add(0).cast::<*mut u8>();
                                                                            let l64 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len65 = l64;
                                                                            let bytes65 = _rt::Vec::from_raw_parts(
                                                                                l63.cast(),
                                                                                len65,
                                                                                len65,
                                                                            );
                                                                            let l66 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l67 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len68 = l67;
                                                                            let bytes68 = _rt::Vec::from_raw_parts(
                                                                                l66.cast(),
                                                                                len68,
                                                                                len68,
                                                                            );
                                                                            (_rt::string_lift(bytes65), _rt::string_lift(bytes68))
                                                                        };
                                                                        result69.push(e69);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base69,
                                                                        len69 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result69
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V200::Image(e200)
                                            }
                                            2 => {
                                                let e200 = {
                                                    let l70 = *base.add(8).cast::<*mut u8>();
                                                    let l71 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len72 = l71;
                                                    let l73 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l74 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len75 = l74;
                                                    let bytes75 = _rt::Vec::from_raw_parts(
                                                        l73.cast(),
                                                        len75,
                                                        len75,
                                                    );
                                                    let l76 = i32::from(
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l88 = i32::from(
                                                        *base
                                                            .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::fastertools::mcp::types::AudioContent {
                                                        data: _rt::Vec::from_raw_parts(l70.cast(), len72, len72),
                                                        mime_type: _rt::string_lift(bytes75),
                                                        annotations: match l76 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l77 = i32::from(
                                                                        *base
                                                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l82 = i32::from(
                                                                        *base
                                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l84 = i32::from(
                                                                        *base
                                                                            .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::fastertools::mcp::types::Annotations {
                                                                        audience: match l77 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l78 = *base
                                                                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l79 = *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base81 = l78;
                                                                                    let len81 = l79;
                                                                                    let mut result81 = _rt::Vec::with_capacity(len81);
                                                                                    for i in 0..len81 {
                                                                                        let base = base81.add(i * 1);
                                                                                        let e81 = {
                                                                                            let l80 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                                l80 as u8,
                                                                                            )
                                                                                        };
                                                                                        result81.push(e81);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base81, len81 * 1, 1);
                                                                                    result81
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l82 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l83 = *base
                                                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l83
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l84 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l85 = *base
                                                                                        .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l86 = *base
                                                                                        .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len87 = l86;
                                                                                    let bytes87 = _rt::Vec::from_raw_parts(
                                                                                        l85.cast(),
                                                                                        len87,
                                                                                        len87,
                                                                                    );
                                                                                    _rt::string_lift(bytes87)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l88 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l89 = *base
                                                                        .add(48 + 9 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l90 = *base
                                                                        .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base97 = l89;
                                                                    let len97 = l90;
                                                                    let mut result97 = _rt::Vec::with_capacity(len97);
                                                                    for i in 0..len97 {
                                                                        let base = base97
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e97 = {
                                                                            let l91 = *base.add(0).cast::<*mut u8>();
                                                                            let l92 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len93 = l92;
                                                                            let bytes93 = _rt::Vec::from_raw_parts(
                                                                                l91.cast(),
                                                                                len93,
                                                                                len93,
                                                                            );
                                                                            let l94 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l95 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len96 = l95;
                                                                            let bytes96 = _rt::Vec::from_raw_parts(
                                                                                l94.cast(),
                                                                                len96,
                                                                                len96,
                                                                            );
                                                                            (_rt::string_lift(bytes93), _rt::string_lift(bytes96))
                                                                        };
                                                                        result97.push(e97);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base97,
                                                                        len97 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result97
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V200::Audio(e200)
                                            }
                                            3 => {
                                                let e200 = {
                                                    let l98 = *base.add(8).cast::<*mut u8>();
                                                    let l99 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len100 = l99;
                                                    let bytes100 = _rt::Vec::from_raw_parts(
                                                        l98.cast(),
                                                        len100,
                                                        len100,
                                                    );
                                                    let l101 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l102 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len103 = l102;
                                                    let bytes103 = _rt::Vec::from_raw_parts(
                                                        l101.cast(),
                                                        len103,
                                                        len103,
                                                    );
                                                    let l104 = i32::from(
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l108 = i32::from(
                                                        *base
                                                            .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l112 = i32::from(
                                                        *base
                                                            .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l114 = i32::from(
                                                        *base
                                                            .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l126 = i32::from(
                                                        *base
                                                            .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::fastertools::mcp::types::ResourceLink {
                                                        uri: _rt::string_lift(bytes100),
                                                        name: _rt::string_lift(bytes103),
                                                        description: match l104 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l105 = *base
                                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l106 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len107 = l106;
                                                                    let bytes107 = _rt::Vec::from_raw_parts(
                                                                        l105.cast(),
                                                                        len107,
                                                                        len107,
                                                                    );
                                                                    _rt::string_lift(bytes107)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        mime_type: match l108 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l109 = *base
                                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l110 = *base
                                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len111 = l110;
                                                                    let bytes111 = _rt::Vec::from_raw_parts(
                                                                        l109.cast(),
                                                                        len111,
                                                                        len111,
                                                                    );
                                                                    _rt::string_lift(bytes111)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        size: match l112 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l113 = *base
                                                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>();
                                                                    l113 as u64
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        annotations: match l114 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l115 = i32::from(
                                                                        *base
                                                                            .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l120 = i32::from(
                                                                        *base
                                                                            .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l122 = i32::from(
                                                                        *base
                                                                            .add(56 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::fastertools::mcp::types::Annotations {
                                                                        audience: match l115 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l116 = *base
                                                                                        .add(32 + 11 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l117 = *base
                                                                                        .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base119 = l116;
                                                                                    let len119 = l117;
                                                                                    let mut result119 = _rt::Vec::with_capacity(len119);
                                                                                    for i in 0..len119 {
                                                                                        let base = base119.add(i * 1);
                                                                                        let e119 = {
                                                                                            let l118 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                                l118 as u8,
                                                                                            )
                                                                                        };
                                                                                        result119.push(e119);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base119, len119 * 1, 1);
                                                                                    result119
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l120 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l121 = *base
                                                                                        .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l121
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l122 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l123 = *base
                                                                                        .add(56 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l124 = *base
                                                                                        .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len125 = l124;
                                                                                    let bytes125 = _rt::Vec::from_raw_parts(
                                                                                        l123.cast(),
                                                                                        len125,
                                                                                        len125,
                                                                                    );
                                                                                    _rt::string_lift(bytes125)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l126 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l127 = *base
                                                                        .add(64 + 15 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l128 = *base
                                                                        .add(64 + 16 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base135 = l127;
                                                                    let len135 = l128;
                                                                    let mut result135 = _rt::Vec::with_capacity(len135);
                                                                    for i in 0..len135 {
                                                                        let base = base135
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e135 = {
                                                                            let l129 = *base.add(0).cast::<*mut u8>();
                                                                            let l130 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len131 = l130;
                                                                            let bytes131 = _rt::Vec::from_raw_parts(
                                                                                l129.cast(),
                                                                                len131,
                                                                                len131,
                                                                            );
                                                                            let l132 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l133 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len134 = l133;
                                                                            let bytes134 = _rt::Vec::from_raw_parts(
                                                                                l132.cast(),
                                                                                len134,
                                                                                len134,
                                                                            );
                                                                            (_rt::string_lift(bytes131), _rt::string_lift(bytes134))
                                                                        };
                                                                        result135.push(e135);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base135,
                                                                        len135 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result135
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V200::ResourceLink(e200)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 4, "invalid enum discriminant");
                                                let e200 = {
                                                    let l136 = i32::from(*base.add(8).cast::<u8>());
                                                    use super::super::super::fastertools::mcp::types::ResourceContents as V177;
                                                    let v177 = match l136 {
                                                        0 => {
                                                            let e177 = {
                                                                let l137 = *base
                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l138 = *base
                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len139 = l138;
                                                                let bytes139 = _rt::Vec::from_raw_parts(
                                                                    l137.cast(),
                                                                    len139,
                                                                    len139,
                                                                );
                                                                let l140 = i32::from(
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l144 = *base
                                                                    .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l145 = *base
                                                                    .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len146 = l145;
                                                                let bytes146 = _rt::Vec::from_raw_parts(
                                                                    l144.cast(),
                                                                    len146,
                                                                    len146,
                                                                );
                                                                let l147 = i32::from(
                                                                    *base
                                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::fastertools::mcp::types::TextResourceContents {
                                                                    uri: _rt::string_lift(bytes139),
                                                                    mime_type: match l140 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l141 = *base
                                                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l142 = *base
                                                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len143 = l142;
                                                                                let bytes143 = _rt::Vec::from_raw_parts(
                                                                                    l141.cast(),
                                                                                    len143,
                                                                                    len143,
                                                                                );
                                                                                _rt::string_lift(bytes143)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    text: _rt::string_lift(bytes146),
                                                                    meta: match l147 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l148 = *base
                                                                                    .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l149 = *base
                                                                                    .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let base156 = l148;
                                                                                let len156 = l149;
                                                                                let mut result156 = _rt::Vec::with_capacity(len156);
                                                                                for i in 0..len156 {
                                                                                    let base = base156
                                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                                    let e156 = {
                                                                                        let l150 = *base.add(0).cast::<*mut u8>();
                                                                                        let l151 = *base
                                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len152 = l151;
                                                                                        let bytes152 = _rt::Vec::from_raw_parts(
                                                                                            l150.cast(),
                                                                                            len152,
                                                                                            len152,
                                                                                        );
                                                                                        let l153 = *base
                                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<*mut u8>();
                                                                                        let l154 = *base
                                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len155 = l154;
                                                                                        let bytes155 = _rt::Vec::from_raw_parts(
                                                                                            l153.cast(),
                                                                                            len155,
                                                                                            len155,
                                                                                        );
                                                                                        (_rt::string_lift(bytes152), _rt::string_lift(bytes155))
                                                                                    };
                                                                                    result156.push(e156);
                                                                                }
                                                                                _rt::cabi_dealloc(
                                                                                    base156,
                                                                                    len156 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                                    ::core::mem::size_of::<*const u8>(),
                                                                                );
                                                                                result156
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V177::Text(e177)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e177 = {
                                                                let l157 = *base
                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l158 = *base
                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len159 = l158;
                                                                let bytes159 = _rt::Vec::from_raw_parts(
                                                                    l157.cast(),
                                                                    len159,
                                                                    len159,
                                                                );
                                                                let l160 = i32::from(
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l164 = *base
                                                                    .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l165 = *base
                                                                    .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len166 = l165;
                                                                let l167 = i32::from(
                                                                    *base
                                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::fastertools::mcp::types::BlobResourceContents {
                                                                    uri: _rt::string_lift(bytes159),
                                                                    mime_type: match l160 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l161 = *base
                                                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l162 = *base
                                                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len163 = l162;
                                                                                let bytes163 = _rt::Vec::from_raw_parts(
                                                                                    l161.cast(),
                                                                                    len163,
                                                                                    len163,
                                                                                );
                                                                                _rt::string_lift(bytes163)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    blob: _rt::Vec::from_raw_parts(l164.cast(), len166, len166),
                                                                    meta: match l167 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l168 = *base
                                                                                    .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l169 = *base
                                                                                    .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let base176 = l168;
                                                                                let len176 = l169;
                                                                                let mut result176 = _rt::Vec::with_capacity(len176);
                                                                                for i in 0..len176 {
                                                                                    let base = base176
                                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                                    let e176 = {
                                                                                        let l170 = *base.add(0).cast::<*mut u8>();
                                                                                        let l171 = *base
                                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len172 = l171;
                                                                                        let bytes172 = _rt::Vec::from_raw_parts(
                                                                                            l170.cast(),
                                                                                            len172,
                                                                                            len172,
                                                                                        );
                                                                                        let l173 = *base
                                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<*mut u8>();
                                                                                        let l174 = *base
                                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len175 = l174;
                                                                                        let bytes175 = _rt::Vec::from_raw_parts(
                                                                                            l173.cast(),
                                                                                            len175,
                                                                                            len175,
                                                                                        );
                                                                                        (_rt::string_lift(bytes172), _rt::string_lift(bytes175))
                                                                                    };
                                                                                    result176.push(e176);
                                                                                }
                                                                                _rt::cabi_dealloc(
                                                                                    base176,
                                                                                    len176 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                                    ::core::mem::size_of::<*const u8>(),
                                                                                );
                                                                                result176
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V177::Blob(e177)
                                                        }
                                                    };
                                                    let l178 = i32::from(
                                                        *base
                                                            .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l190 = i32::from(
                                                        *base
                                                            .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::fastertools::mcp::types::EmbeddedResource {
                                                        contents: v177,
                                                        annotations: match l178 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l179 = i32::from(
                                                                        *base
                                                                            .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l184 = i32::from(
                                                                        *base
                                                                            .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l186 = i32::from(
                                                                        *base
                                                                            .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::fastertools::mcp::types::Annotations {
                                                                        audience: match l179 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l180 = *base
                                                                                        .add(24 + 11 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l181 = *base
                                                                                        .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base183 = l180;
                                                                                    let len183 = l181;
                                                                                    let mut result183 = _rt::Vec::with_capacity(len183);
                                                                                    for i in 0..len183 {
                                                                                        let base = base183.add(i * 1);
                                                                                        let e183 = {
                                                                                            let l182 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                                l182 as u8,
                                                                                            )
                                                                                        };
                                                                                        result183.push(e183);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base183, len183 * 1, 1);
                                                                                    result183
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l184 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l185 = *base
                                                                                        .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l185
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l186 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l187 = *base
                                                                                        .add(48 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l188 = *base
                                                                                        .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len189 = l188;
                                                                                    let bytes189 = _rt::Vec::from_raw_parts(
                                                                                        l187.cast(),
                                                                                        len189,
                                                                                        len189,
                                                                                    );
                                                                                    _rt::string_lift(bytes189)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l190 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l191 = *base
                                                                        .add(56 + 15 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l192 = *base
                                                                        .add(56 + 16 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base199 = l191;
                                                                    let len199 = l192;
                                                                    let mut result199 = _rt::Vec::with_capacity(len199);
                                                                    for i in 0..len199 {
                                                                        let base = base199
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e199 = {
                                                                            let l193 = *base.add(0).cast::<*mut u8>();
                                                                            let l194 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len195 = l194;
                                                                            let bytes195 = _rt::Vec::from_raw_parts(
                                                                                l193.cast(),
                                                                                len195,
                                                                                len195,
                                                                            );
                                                                            let l196 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l197 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len198 = l197;
                                                                            let bytes198 = _rt::Vec::from_raw_parts(
                                                                                l196.cast(),
                                                                                len198,
                                                                                len198,
                                                                            );
                                                                            (_rt::string_lift(bytes195), _rt::string_lift(bytes198))
                                                                        };
                                                                        result199.push(e199);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base199,
                                                                        len199 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result199
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V200::EmbeddedResource(e200)
                                            }
                                        };
                                        v200
                                    };
                                    result201.push(e201);
                                }
                                _rt::cabi_dealloc(
                                    base201,
                                    len201 * (72 + 16 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let l202 = i32::from(
                                    *ptr11
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l206 = i32::from(
                                    *ptr11
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l208 = i32::from(
                                    *ptr11
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                ToolResult {
                                    content: result201,
                                    structured_content: match l202 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l203 = *ptr11
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l204 = *ptr11
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len205 = l204;
                                                let bytes205 = _rt::Vec::from_raw_parts(
                                                    l203.cast(),
                                                    len205,
                                                    len205,
                                                );
                                                _rt::string_lift(bytes205)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    is_error: match l206 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l207 = i32::from(
                                                    *ptr11
                                                        .add(1 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                _rt::bool_lift(l207 as u8)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    meta: match l208 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l209 = *ptr11
                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l210 = *ptr11
                                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base217 = l209;
                                                let len217 = l210;
                                                let mut result217 = _rt::Vec::with_capacity(len217);
                                                for i in 0..len217 {
                                                    let base = base217
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e217 = {
                                                        let l211 = *base.add(0).cast::<*mut u8>();
                                                        let l212 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len213 = l212;
                                                        let bytes213 = _rt::Vec::from_raw_parts(
                                                            l211.cast(),
                                                            len213,
                                                            len213,
                                                        );
                                                        let l214 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l215 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len216 = l215;
                                                        let bytes216 = _rt::Vec::from_raw_parts(
                                                            l214.cast(),
                                                            len216,
                                                            len216,
                                                        );
                                                        (_rt::string_lift(bytes213), _rt::string_lift(bytes216))
                                                    };
                                                    result217.push(e217);
                                                }
                                                _rt::cabi_dealloc(
                                                    base217,
                                                    len217 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result217
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l218 = i32::from(
                                    *ptr11.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V220;
                                let v220 = match l218 {
                                    0 => V220::ParseError,
                                    1 => V220::InvalidRequest,
                                    2 => V220::MethodNotFound,
                                    3 => V220::InvalidParams,
                                    4 => V220::InternalError,
                                    5 => V220::ResourceNotFound,
                                    6 => V220::ToolNotFound,
                                    7 => V220::PromptNotFound,
                                    8 => V220::Unauthorized,
                                    9 => V220::RateLimited,
                                    10 => V220::Timeout,
                                    11 => V220::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e220 = {
                                            let l219 = *ptr11
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l219
                                        };
                                        V220::CustomCode(e220)
                                    }
                                };
                                let l221 = *ptr11
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l222 = *ptr11
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len223 = l222;
                                let bytes223 = _rt::Vec::from_raw_parts(
                                    l221.cast(),
                                    len223,
                                    len223,
                                );
                                let l224 = i32::from(
                                    *ptr11
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v220,
                                    message: _rt::string_lift(bytes223),
                                    data: match l224 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l225 = *ptr11
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l226 = *ptr11
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len227 = l226;
                                                let bytes227 = _rt::Vec::from_raw_parts(
                                                    l225.cast(),
                                                    len227,
                                                    len227,
                                                );
                                                _rt::string_lift(bytes227)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result228
                }
            }
        }
        /// Tool handler capability - implement this to provide tools
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod tool_handler {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type McpError = super::super::super::fastertools::mcp::types::McpError;
            pub type ListToolsRequest = super::super::super::fastertools::mcp::tools::ListToolsRequest;
            pub type ListToolsResponse = super::super::super::fastertools::mcp::tools::ListToolsResponse;
            pub type CallToolRequest = super::super::super::fastertools::mcp::tools::CallToolRequest;
            pub type ToolResult = super::super::super::fastertools::mcp::tools::ToolResult;
            #[allow(unused_unsafe, clippy::all)]
            /// List available tools
            pub fn handle_list_tools(
                request: &ListToolsRequest,
            ) -> Result<ListToolsResponse, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 9 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 9
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::fastertools::mcp::tools::ListToolsRequest {
                        cursor: cursor0,
                        progress_token: progress_token0,
                        meta: meta0,
                    } = request;
                    let (result2_0, result2_1, result2_2) = match cursor0 {
                        Some(e) => {
                            let vec1 = e;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            (1i32, ptr1.cast_mut(), len1)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result4_0, result4_1, result4_2) = match progress_token0 {
                        Some(e) => {
                            let vec3 = e;
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            (1i32, ptr3.cast_mut(), len3)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result9_0, result9_1, result9_2) = match meta0 {
                        Some(e) => {
                            let vec8 = e;
                            let len8 = vec8.len();
                            let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec8.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result8 = if layout8.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout8);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec8.into_iter().enumerate() {
                                let base = result8
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t5_0, t5_1) = e;
                                    let vec6 = t5_0;
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                                    let vec7 = t5_1;
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr7.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result8, layout8)]);
                            (1i32, result8, len8)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr10 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fastertools:mcp/tool-handler@0.1.4")]
                    unsafe extern "C" {
                        #[link_name = "handle-list-tools"]
                        fn wit_import11(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import11(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import11(
                            result2_0,
                            result2_1,
                            result2_2,
                            result4_0,
                            result4_1,
                            result4_2,
                            result9_0,
                            result9_1,
                            result9_2,
                            ptr10,
                        )
                    };
                    let l12 = i32::from(*ptr10.add(0).cast::<u8>());
                    let result81 = match l12 {
                        0 => {
                            let e = {
                                let l13 = *ptr10
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l14 = *ptr10
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base56 = l13;
                                let len56 = l14;
                                let mut result56 = _rt::Vec::with_capacity(len56);
                                for i in 0..len56 {
                                    let base = base56
                                        .add(i * (8 + 20 * ::core::mem::size_of::<*const u8>()));
                                    let e56 = {
                                        let l15 = *base.add(0).cast::<*mut u8>();
                                        let l16 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len17 = l16;
                                        let bytes17 = _rt::Vec::from_raw_parts(
                                            l15.cast(),
                                            len17,
                                            len17,
                                        );
                                        let l18 = i32::from(
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l22 = i32::from(
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l26 = *base
                                            .add(8 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l27 = *base
                                            .add(9 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len28 = l27;
                                        let bytes28 = _rt::Vec::from_raw_parts(
                                            l26.cast(),
                                            len28,
                                            len28,
                                        );
                                        let l29 = i32::from(
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l33 = i32::from(
                                            *base
                                                .add(13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l46 = i32::from(
                                            *base
                                                .add(8 + 17 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        super::super::super::fastertools::mcp::tools::Tool {
                                            base: super::super::super::fastertools::mcp::types::BaseMetadata {
                                                name: _rt::string_lift(bytes17),
                                                title: match l18 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l19 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l20 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len21 = l20;
                                                            let bytes21 = _rt::Vec::from_raw_parts(
                                                                l19.cast(),
                                                                len21,
                                                                len21,
                                                            );
                                                            _rt::string_lift(bytes21)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            },
                                            description: match l22 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l23 = *base
                                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l24 = *base
                                                            .add(7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len25 = l24;
                                                        let bytes25 = _rt::Vec::from_raw_parts(
                                                            l23.cast(),
                                                            len25,
                                                            len25,
                                                        );
                                                        _rt::string_lift(bytes25)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            input_schema: _rt::string_lift(bytes28),
                                            output_schema: match l29 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l30 = *base
                                                            .add(11 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l31 = *base
                                                            .add(12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len32 = l31;
                                                        let bytes32 = _rt::Vec::from_raw_parts(
                                                            l30.cast(),
                                                            len32,
                                                            len32,
                                                        );
                                                        _rt::string_lift(bytes32)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            annotations: match l33 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l34 = i32::from(
                                                            *base
                                                                .add(14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l38 = i32::from(
                                                            *base
                                                                .add(17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l40 = i32::from(
                                                            *base
                                                                .add(2 + 17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l42 = i32::from(
                                                            *base
                                                                .add(4 + 17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l44 = i32::from(
                                                            *base
                                                                .add(6 + 17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        super::super::super::fastertools::mcp::tools::ToolAnnotations {
                                                            title: match l34 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l35 = *base
                                                                            .add(15 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l36 = *base
                                                                            .add(16 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len37 = l36;
                                                                        let bytes37 = _rt::Vec::from_raw_parts(
                                                                            l35.cast(),
                                                                            len37,
                                                                            len37,
                                                                        );
                                                                        _rt::string_lift(bytes37)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            read_only_hint: match l38 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l39 = i32::from(
                                                                            *base
                                                                                .add(1 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l39 as u8)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            destructive_hint: match l40 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l41 = i32::from(
                                                                            *base
                                                                                .add(3 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l41 as u8)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            idempotent_hint: match l42 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l43 = i32::from(
                                                                            *base
                                                                                .add(5 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l43 as u8)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            open_world_hint: match l44 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l45 = i32::from(
                                                                            *base
                                                                                .add(7 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l45 as u8)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            meta: match l46 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l47 = *base
                                                            .add(8 + 18 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l48 = *base
                                                            .add(8 + 19 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base55 = l47;
                                                        let len55 = l48;
                                                        let mut result55 = _rt::Vec::with_capacity(len55);
                                                        for i in 0..len55 {
                                                            let base = base55
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e55 = {
                                                                let l49 = *base.add(0).cast::<*mut u8>();
                                                                let l50 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len51 = l50;
                                                                let bytes51 = _rt::Vec::from_raw_parts(
                                                                    l49.cast(),
                                                                    len51,
                                                                    len51,
                                                                );
                                                                let l52 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l53 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len54 = l53;
                                                                let bytes54 = _rt::Vec::from_raw_parts(
                                                                    l52.cast(),
                                                                    len54,
                                                                    len54,
                                                                );
                                                                (_rt::string_lift(bytes51), _rt::string_lift(bytes54))
                                                            };
                                                            result55.push(e55);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base55,
                                                            len55 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        result55
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    result56.push(e56);
                                }
                                _rt::cabi_dealloc(
                                    base56,
                                    len56 * (8 + 20 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l57 = i32::from(
                                    *ptr10
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l61 = i32::from(
                                    *ptr10
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::tools::ListToolsResponse {
                                    tools: result56,
                                    next_cursor: match l57 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l58 = *ptr10
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l59 = *ptr10
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len60 = l59;
                                                let bytes60 = _rt::Vec::from_raw_parts(
                                                    l58.cast(),
                                                    len60,
                                                    len60,
                                                );
                                                _rt::string_lift(bytes60)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    meta: match l61 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l62 = *ptr10
                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l63 = *ptr10
                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base70 = l62;
                                                let len70 = l63;
                                                let mut result70 = _rt::Vec::with_capacity(len70);
                                                for i in 0..len70 {
                                                    let base = base70
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e70 = {
                                                        let l64 = *base.add(0).cast::<*mut u8>();
                                                        let l65 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len66 = l65;
                                                        let bytes66 = _rt::Vec::from_raw_parts(
                                                            l64.cast(),
                                                            len66,
                                                            len66,
                                                        );
                                                        let l67 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l68 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len69 = l68;
                                                        let bytes69 = _rt::Vec::from_raw_parts(
                                                            l67.cast(),
                                                            len69,
                                                            len69,
                                                        );
                                                        (_rt::string_lift(bytes66), _rt::string_lift(bytes69))
                                                    };
                                                    result70.push(e70);
                                                }
                                                _rt::cabi_dealloc(
                                                    base70,
                                                    len70 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result70
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l71 = i32::from(
                                    *ptr10.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V73;
                                let v73 = match l71 {
                                    0 => V73::ParseError,
                                    1 => V73::InvalidRequest,
                                    2 => V73::MethodNotFound,
                                    3 => V73::InvalidParams,
                                    4 => V73::InternalError,
                                    5 => V73::ResourceNotFound,
                                    6 => V73::ToolNotFound,
                                    7 => V73::PromptNotFound,
                                    8 => V73::Unauthorized,
                                    9 => V73::RateLimited,
                                    10 => V73::Timeout,
                                    11 => V73::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e73 = {
                                            let l72 = *ptr10
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l72
                                        };
                                        V73::CustomCode(e73)
                                    }
                                };
                                let l74 = *ptr10
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l75 = *ptr10
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len76 = l75;
                                let bytes76 = _rt::Vec::from_raw_parts(
                                    l74.cast(),
                                    len76,
                                    len76,
                                );
                                let l77 = i32::from(
                                    *ptr10
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v73,
                                    message: _rt::string_lift(bytes76),
                                    data: match l77 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l78 = *ptr10
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l79 = *ptr10
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len80 = l79;
                                                let bytes80 = _rt::Vec::from_raw_parts(
                                                    l78.cast(),
                                                    len80,
                                                    len80,
                                                );
                                                _rt::string_lift(bytes80)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result81
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Execute a tool
            pub fn handle_call_tool(
                request: &CallToolRequest,
            ) -> Result<ToolResult, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 10 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 10
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::fastertools::mcp::tools::CallToolRequest {
                        name: name0,
                        arguments: arguments0,
                        progress_token: progress_token0,
                        meta: meta0,
                    } = request;
                    let vec1 = name0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let (result3_0, result3_1, result3_2) = match arguments0 {
                        Some(e) => {
                            let vec2 = e;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            (1i32, ptr2.cast_mut(), len2)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result5_0, result5_1, result5_2) = match progress_token0 {
                        Some(e) => {
                            let vec4 = e;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            (1i32, ptr4.cast_mut(), len4)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result10_0, result10_1, result10_2) = match meta0 {
                        Some(e) => {
                            let vec9 = e;
                            let len9 = vec9.len();
                            let layout9 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec9.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result9 = if layout9.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout9).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout9);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec9.into_iter().enumerate() {
                                let base = result9
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t6_0, t6_1) = e;
                                    let vec7 = t6_0;
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *base.add(0).cast::<*mut u8>() = ptr7.cast_mut();
                                    let vec8 = t6_1;
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr8.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result9, layout9)]);
                            (1i32, result9, len9)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr11 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fastertools:mcp/tool-handler@0.1.4")]
                    unsafe extern "C" {
                        #[link_name = "handle-call-tool"]
                        fn wit_import12(
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import12(
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import12(
                            ptr1.cast_mut(),
                            len1,
                            result3_0,
                            result3_1,
                            result3_2,
                            result5_0,
                            result5_1,
                            result5_2,
                            result10_0,
                            result10_1,
                            result10_2,
                            ptr11,
                        )
                    };
                    let l13 = i32::from(*ptr11.add(0).cast::<u8>());
                    let result228 = match l13 {
                        0 => {
                            let e = {
                                let l14 = *ptr11
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l15 = *ptr11
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base201 = l14;
                                let len201 = l15;
                                let mut result201 = _rt::Vec::with_capacity(len201);
                                for i in 0..len201 {
                                    let base = base201
                                        .add(i * (72 + 16 * ::core::mem::size_of::<*const u8>()));
                                    let e201 = {
                                        let l16 = i32::from(*base.add(0).cast::<u8>());
                                        use super::super::super::fastertools::mcp::types::ContentBlock as V200;
                                        let v200 = match l16 {
                                            0 => {
                                                let e200 = {
                                                    let l17 = *base.add(8).cast::<*mut u8>();
                                                    let l18 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len19 = l18;
                                                    let bytes19 = _rt::Vec::from_raw_parts(
                                                        l17.cast(),
                                                        len19,
                                                        len19,
                                                    );
                                                    let l20 = i32::from(
                                                        *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l32 = i32::from(
                                                        *base
                                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::fastertools::mcp::types::TextContent {
                                                        text: _rt::string_lift(bytes19),
                                                        annotations: match l20 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l21 = i32::from(
                                                                        *base
                                                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l26 = i32::from(
                                                                        *base
                                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l28 = i32::from(
                                                                        *base
                                                                            .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::fastertools::mcp::types::Annotations {
                                                                        audience: match l21 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l22 = *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l23 = *base
                                                                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base25 = l22;
                                                                                    let len25 = l23;
                                                                                    let mut result25 = _rt::Vec::with_capacity(len25);
                                                                                    for i in 0..len25 {
                                                                                        let base = base25.add(i * 1);
                                                                                        let e25 = {
                                                                                            let l24 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                                l24 as u8,
                                                                                            )
                                                                                        };
                                                                                        result25.push(e25);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base25, len25 * 1, 1);
                                                                                    result25
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l26 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l27 = *base
                                                                                        .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l27
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l28 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l29 = *base
                                                                                        .add(40 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l30 = *base
                                                                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len31 = l30;
                                                                                    let bytes31 = _rt::Vec::from_raw_parts(
                                                                                        l29.cast(),
                                                                                        len31,
                                                                                        len31,
                                                                                    );
                                                                                    _rt::string_lift(bytes31)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l32 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l33 = *base
                                                                        .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l34 = *base
                                                                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base41 = l33;
                                                                    let len41 = l34;
                                                                    let mut result41 = _rt::Vec::with_capacity(len41);
                                                                    for i in 0..len41 {
                                                                        let base = base41
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e41 = {
                                                                            let l35 = *base.add(0).cast::<*mut u8>();
                                                                            let l36 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len37 = l36;
                                                                            let bytes37 = _rt::Vec::from_raw_parts(
                                                                                l35.cast(),
                                                                                len37,
                                                                                len37,
                                                                            );
                                                                            let l38 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l39 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len40 = l39;
                                                                            let bytes40 = _rt::Vec::from_raw_parts(
                                                                                l38.cast(),
                                                                                len40,
                                                                                len40,
                                                                            );
                                                                            (_rt::string_lift(bytes37), _rt::string_lift(bytes40))
                                                                        };
                                                                        result41.push(e41);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base41,
                                                                        len41 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result41
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V200::Text(e200)
                                            }
                                            1 => {
                                                let e200 = {
                                                    let l42 = *base.add(8).cast::<*mut u8>();
                                                    let l43 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len44 = l43;
                                                    let l45 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l46 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len47 = l46;
                                                    let bytes47 = _rt::Vec::from_raw_parts(
                                                        l45.cast(),
                                                        len47,
                                                        len47,
                                                    );
                                                    let l48 = i32::from(
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l60 = i32::from(
                                                        *base
                                                            .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::fastertools::mcp::types::ImageContent {
                                                        data: _rt::Vec::from_raw_parts(l42.cast(), len44, len44),
                                                        mime_type: _rt::string_lift(bytes47),
                                                        annotations: match l48 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l49 = i32::from(
                                                                        *base
                                                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l54 = i32::from(
                                                                        *base
                                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l56 = i32::from(
                                                                        *base
                                                                            .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::fastertools::mcp::types::Annotations {
                                                                        audience: match l49 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l50 = *base
                                                                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l51 = *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base53 = l50;
                                                                                    let len53 = l51;
                                                                                    let mut result53 = _rt::Vec::with_capacity(len53);
                                                                                    for i in 0..len53 {
                                                                                        let base = base53.add(i * 1);
                                                                                        let e53 = {
                                                                                            let l52 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                                l52 as u8,
                                                                                            )
                                                                                        };
                                                                                        result53.push(e53);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base53, len53 * 1, 1);
                                                                                    result53
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l54 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l55 = *base
                                                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l55
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l56 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l57 = *base
                                                                                        .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l58 = *base
                                                                                        .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len59 = l58;
                                                                                    let bytes59 = _rt::Vec::from_raw_parts(
                                                                                        l57.cast(),
                                                                                        len59,
                                                                                        len59,
                                                                                    );
                                                                                    _rt::string_lift(bytes59)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l60 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l61 = *base
                                                                        .add(48 + 9 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l62 = *base
                                                                        .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base69 = l61;
                                                                    let len69 = l62;
                                                                    let mut result69 = _rt::Vec::with_capacity(len69);
                                                                    for i in 0..len69 {
                                                                        let base = base69
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e69 = {
                                                                            let l63 = *base.add(0).cast::<*mut u8>();
                                                                            let l64 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len65 = l64;
                                                                            let bytes65 = _rt::Vec::from_raw_parts(
                                                                                l63.cast(),
                                                                                len65,
                                                                                len65,
                                                                            );
                                                                            let l66 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l67 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len68 = l67;
                                                                            let bytes68 = _rt::Vec::from_raw_parts(
                                                                                l66.cast(),
                                                                                len68,
                                                                                len68,
                                                                            );
                                                                            (_rt::string_lift(bytes65), _rt::string_lift(bytes68))
                                                                        };
                                                                        result69.push(e69);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base69,
                                                                        len69 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result69
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V200::Image(e200)
                                            }
                                            2 => {
                                                let e200 = {
                                                    let l70 = *base.add(8).cast::<*mut u8>();
                                                    let l71 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len72 = l71;
                                                    let l73 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l74 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len75 = l74;
                                                    let bytes75 = _rt::Vec::from_raw_parts(
                                                        l73.cast(),
                                                        len75,
                                                        len75,
                                                    );
                                                    let l76 = i32::from(
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l88 = i32::from(
                                                        *base
                                                            .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::fastertools::mcp::types::AudioContent {
                                                        data: _rt::Vec::from_raw_parts(l70.cast(), len72, len72),
                                                        mime_type: _rt::string_lift(bytes75),
                                                        annotations: match l76 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l77 = i32::from(
                                                                        *base
                                                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l82 = i32::from(
                                                                        *base
                                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l84 = i32::from(
                                                                        *base
                                                                            .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::fastertools::mcp::types::Annotations {
                                                                        audience: match l77 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l78 = *base
                                                                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l79 = *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base81 = l78;
                                                                                    let len81 = l79;
                                                                                    let mut result81 = _rt::Vec::with_capacity(len81);
                                                                                    for i in 0..len81 {
                                                                                        let base = base81.add(i * 1);
                                                                                        let e81 = {
                                                                                            let l80 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                                l80 as u8,
                                                                                            )
                                                                                        };
                                                                                        result81.push(e81);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base81, len81 * 1, 1);
                                                                                    result81
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l82 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l83 = *base
                                                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l83
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l84 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l85 = *base
                                                                                        .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l86 = *base
                                                                                        .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len87 = l86;
                                                                                    let bytes87 = _rt::Vec::from_raw_parts(
                                                                                        l85.cast(),
                                                                                        len87,
                                                                                        len87,
                                                                                    );
                                                                                    _rt::string_lift(bytes87)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l88 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l89 = *base
                                                                        .add(48 + 9 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l90 = *base
                                                                        .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base97 = l89;
                                                                    let len97 = l90;
                                                                    let mut result97 = _rt::Vec::with_capacity(len97);
                                                                    for i in 0..len97 {
                                                                        let base = base97
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e97 = {
                                                                            let l91 = *base.add(0).cast::<*mut u8>();
                                                                            let l92 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len93 = l92;
                                                                            let bytes93 = _rt::Vec::from_raw_parts(
                                                                                l91.cast(),
                                                                                len93,
                                                                                len93,
                                                                            );
                                                                            let l94 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l95 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len96 = l95;
                                                                            let bytes96 = _rt::Vec::from_raw_parts(
                                                                                l94.cast(),
                                                                                len96,
                                                                                len96,
                                                                            );
                                                                            (_rt::string_lift(bytes93), _rt::string_lift(bytes96))
                                                                        };
                                                                        result97.push(e97);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base97,
                                                                        len97 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result97
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V200::Audio(e200)
                                            }
                                            3 => {
                                                let e200 = {
                                                    let l98 = *base.add(8).cast::<*mut u8>();
                                                    let l99 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len100 = l99;
                                                    let bytes100 = _rt::Vec::from_raw_parts(
                                                        l98.cast(),
                                                        len100,
                                                        len100,
                                                    );
                                                    let l101 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l102 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len103 = l102;
                                                    let bytes103 = _rt::Vec::from_raw_parts(
                                                        l101.cast(),
                                                        len103,
                                                        len103,
                                                    );
                                                    let l104 = i32::from(
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l108 = i32::from(
                                                        *base
                                                            .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l112 = i32::from(
                                                        *base
                                                            .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l114 = i32::from(
                                                        *base
                                                            .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l126 = i32::from(
                                                        *base
                                                            .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::fastertools::mcp::types::ResourceLink {
                                                        uri: _rt::string_lift(bytes100),
                                                        name: _rt::string_lift(bytes103),
                                                        description: match l104 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l105 = *base
                                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l106 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len107 = l106;
                                                                    let bytes107 = _rt::Vec::from_raw_parts(
                                                                        l105.cast(),
                                                                        len107,
                                                                        len107,
                                                                    );
                                                                    _rt::string_lift(bytes107)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        mime_type: match l108 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l109 = *base
                                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l110 = *base
                                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len111 = l110;
                                                                    let bytes111 = _rt::Vec::from_raw_parts(
                                                                        l109.cast(),
                                                                        len111,
                                                                        len111,
                                                                    );
                                                                    _rt::string_lift(bytes111)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        size: match l112 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l113 = *base
                                                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>();
                                                                    l113 as u64
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        annotations: match l114 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l115 = i32::from(
                                                                        *base
                                                                            .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l120 = i32::from(
                                                                        *base
                                                                            .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l122 = i32::from(
                                                                        *base
                                                                            .add(56 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::fastertools::mcp::types::Annotations {
                                                                        audience: match l115 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l116 = *base
                                                                                        .add(32 + 11 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l117 = *base
                                                                                        .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base119 = l116;
                                                                                    let len119 = l117;
                                                                                    let mut result119 = _rt::Vec::with_capacity(len119);
                                                                                    for i in 0..len119 {
                                                                                        let base = base119.add(i * 1);
                                                                                        let e119 = {
                                                                                            let l118 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                                l118 as u8,
                                                                                            )
                                                                                        };
                                                                                        result119.push(e119);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base119, len119 * 1, 1);
                                                                                    result119
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l120 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l121 = *base
                                                                                        .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l121
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l122 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l123 = *base
                                                                                        .add(56 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l124 = *base
                                                                                        .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len125 = l124;
                                                                                    let bytes125 = _rt::Vec::from_raw_parts(
                                                                                        l123.cast(),
                                                                                        len125,
                                                                                        len125,
                                                                                    );
                                                                                    _rt::string_lift(bytes125)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l126 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l127 = *base
                                                                        .add(64 + 15 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l128 = *base
                                                                        .add(64 + 16 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base135 = l127;
                                                                    let len135 = l128;
                                                                    let mut result135 = _rt::Vec::with_capacity(len135);
                                                                    for i in 0..len135 {
                                                                        let base = base135
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e135 = {
                                                                            let l129 = *base.add(0).cast::<*mut u8>();
                                                                            let l130 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len131 = l130;
                                                                            let bytes131 = _rt::Vec::from_raw_parts(
                                                                                l129.cast(),
                                                                                len131,
                                                                                len131,
                                                                            );
                                                                            let l132 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l133 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len134 = l133;
                                                                            let bytes134 = _rt::Vec::from_raw_parts(
                                                                                l132.cast(),
                                                                                len134,
                                                                                len134,
                                                                            );
                                                                            (_rt::string_lift(bytes131), _rt::string_lift(bytes134))
                                                                        };
                                                                        result135.push(e135);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base135,
                                                                        len135 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result135
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V200::ResourceLink(e200)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 4, "invalid enum discriminant");
                                                let e200 = {
                                                    let l136 = i32::from(*base.add(8).cast::<u8>());
                                                    use super::super::super::fastertools::mcp::types::ResourceContents as V177;
                                                    let v177 = match l136 {
                                                        0 => {
                                                            let e177 = {
                                                                let l137 = *base
                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l138 = *base
                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len139 = l138;
                                                                let bytes139 = _rt::Vec::from_raw_parts(
                                                                    l137.cast(),
                                                                    len139,
                                                                    len139,
                                                                );
                                                                let l140 = i32::from(
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l144 = *base
                                                                    .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l145 = *base
                                                                    .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len146 = l145;
                                                                let bytes146 = _rt::Vec::from_raw_parts(
                                                                    l144.cast(),
                                                                    len146,
                                                                    len146,
                                                                );
                                                                let l147 = i32::from(
                                                                    *base
                                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::fastertools::mcp::types::TextResourceContents {
                                                                    uri: _rt::string_lift(bytes139),
                                                                    mime_type: match l140 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l141 = *base
                                                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l142 = *base
                                                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len143 = l142;
                                                                                let bytes143 = _rt::Vec::from_raw_parts(
                                                                                    l141.cast(),
                                                                                    len143,
                                                                                    len143,
                                                                                );
                                                                                _rt::string_lift(bytes143)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    text: _rt::string_lift(bytes146),
                                                                    meta: match l147 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l148 = *base
                                                                                    .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l149 = *base
                                                                                    .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let base156 = l148;
                                                                                let len156 = l149;
                                                                                let mut result156 = _rt::Vec::with_capacity(len156);
                                                                                for i in 0..len156 {
                                                                                    let base = base156
                                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                                    let e156 = {
                                                                                        let l150 = *base.add(0).cast::<*mut u8>();
                                                                                        let l151 = *base
                                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len152 = l151;
                                                                                        let bytes152 = _rt::Vec::from_raw_parts(
                                                                                            l150.cast(),
                                                                                            len152,
                                                                                            len152,
                                                                                        );
                                                                                        let l153 = *base
                                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<*mut u8>();
                                                                                        let l154 = *base
                                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len155 = l154;
                                                                                        let bytes155 = _rt::Vec::from_raw_parts(
                                                                                            l153.cast(),
                                                                                            len155,
                                                                                            len155,
                                                                                        );
                                                                                        (_rt::string_lift(bytes152), _rt::string_lift(bytes155))
                                                                                    };
                                                                                    result156.push(e156);
                                                                                }
                                                                                _rt::cabi_dealloc(
                                                                                    base156,
                                                                                    len156 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                                    ::core::mem::size_of::<*const u8>(),
                                                                                );
                                                                                result156
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V177::Text(e177)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e177 = {
                                                                let l157 = *base
                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l158 = *base
                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len159 = l158;
                                                                let bytes159 = _rt::Vec::from_raw_parts(
                                                                    l157.cast(),
                                                                    len159,
                                                                    len159,
                                                                );
                                                                let l160 = i32::from(
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l164 = *base
                                                                    .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l165 = *base
                                                                    .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len166 = l165;
                                                                let l167 = i32::from(
                                                                    *base
                                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::fastertools::mcp::types::BlobResourceContents {
                                                                    uri: _rt::string_lift(bytes159),
                                                                    mime_type: match l160 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l161 = *base
                                                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l162 = *base
                                                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len163 = l162;
                                                                                let bytes163 = _rt::Vec::from_raw_parts(
                                                                                    l161.cast(),
                                                                                    len163,
                                                                                    len163,
                                                                                );
                                                                                _rt::string_lift(bytes163)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    blob: _rt::Vec::from_raw_parts(l164.cast(), len166, len166),
                                                                    meta: match l167 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l168 = *base
                                                                                    .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l169 = *base
                                                                                    .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let base176 = l168;
                                                                                let len176 = l169;
                                                                                let mut result176 = _rt::Vec::with_capacity(len176);
                                                                                for i in 0..len176 {
                                                                                    let base = base176
                                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                                    let e176 = {
                                                                                        let l170 = *base.add(0).cast::<*mut u8>();
                                                                                        let l171 = *base
                                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len172 = l171;
                                                                                        let bytes172 = _rt::Vec::from_raw_parts(
                                                                                            l170.cast(),
                                                                                            len172,
                                                                                            len172,
                                                                                        );
                                                                                        let l173 = *base
                                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<*mut u8>();
                                                                                        let l174 = *base
                                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len175 = l174;
                                                                                        let bytes175 = _rt::Vec::from_raw_parts(
                                                                                            l173.cast(),
                                                                                            len175,
                                                                                            len175,
                                                                                        );
                                                                                        (_rt::string_lift(bytes172), _rt::string_lift(bytes175))
                                                                                    };
                                                                                    result176.push(e176);
                                                                                }
                                                                                _rt::cabi_dealloc(
                                                                                    base176,
                                                                                    len176 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                                    ::core::mem::size_of::<*const u8>(),
                                                                                );
                                                                                result176
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V177::Blob(e177)
                                                        }
                                                    };
                                                    let l178 = i32::from(
                                                        *base
                                                            .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l190 = i32::from(
                                                        *base
                                                            .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::fastertools::mcp::types::EmbeddedResource {
                                                        contents: v177,
                                                        annotations: match l178 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l179 = i32::from(
                                                                        *base
                                                                            .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l184 = i32::from(
                                                                        *base
                                                                            .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l186 = i32::from(
                                                                        *base
                                                                            .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::fastertools::mcp::types::Annotations {
                                                                        audience: match l179 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l180 = *base
                                                                                        .add(24 + 11 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l181 = *base
                                                                                        .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base183 = l180;
                                                                                    let len183 = l181;
                                                                                    let mut result183 = _rt::Vec::with_capacity(len183);
                                                                                    for i in 0..len183 {
                                                                                        let base = base183.add(i * 1);
                                                                                        let e183 = {
                                                                                            let l182 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                                l182 as u8,
                                                                                            )
                                                                                        };
                                                                                        result183.push(e183);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base183, len183 * 1, 1);
                                                                                    result183
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l184 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l185 = *base
                                                                                        .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l185
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l186 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l187 = *base
                                                                                        .add(48 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l188 = *base
                                                                                        .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len189 = l188;
                                                                                    let bytes189 = _rt::Vec::from_raw_parts(
                                                                                        l187.cast(),
                                                                                        len189,
                                                                                        len189,
                                                                                    );
                                                                                    _rt::string_lift(bytes189)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l190 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l191 = *base
                                                                        .add(56 + 15 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l192 = *base
                                                                        .add(56 + 16 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base199 = l191;
                                                                    let len199 = l192;
                                                                    let mut result199 = _rt::Vec::with_capacity(len199);
                                                                    for i in 0..len199 {
                                                                        let base = base199
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e199 = {
                                                                            let l193 = *base.add(0).cast::<*mut u8>();
                                                                            let l194 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len195 = l194;
                                                                            let bytes195 = _rt::Vec::from_raw_parts(
                                                                                l193.cast(),
                                                                                len195,
                                                                                len195,
                                                                            );
                                                                            let l196 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l197 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len198 = l197;
                                                                            let bytes198 = _rt::Vec::from_raw_parts(
                                                                                l196.cast(),
                                                                                len198,
                                                                                len198,
                                                                            );
                                                                            (_rt::string_lift(bytes195), _rt::string_lift(bytes198))
                                                                        };
                                                                        result199.push(e199);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base199,
                                                                        len199 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result199
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V200::EmbeddedResource(e200)
                                            }
                                        };
                                        v200
                                    };
                                    result201.push(e201);
                                }
                                _rt::cabi_dealloc(
                                    base201,
                                    len201 * (72 + 16 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let l202 = i32::from(
                                    *ptr11
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l206 = i32::from(
                                    *ptr11
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l208 = i32::from(
                                    *ptr11
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::tools::ToolResult {
                                    content: result201,
                                    structured_content: match l202 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l203 = *ptr11
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l204 = *ptr11
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len205 = l204;
                                                let bytes205 = _rt::Vec::from_raw_parts(
                                                    l203.cast(),
                                                    len205,
                                                    len205,
                                                );
                                                _rt::string_lift(bytes205)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    is_error: match l206 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l207 = i32::from(
                                                    *ptr11
                                                        .add(1 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                _rt::bool_lift(l207 as u8)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    meta: match l208 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l209 = *ptr11
                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l210 = *ptr11
                                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base217 = l209;
                                                let len217 = l210;
                                                let mut result217 = _rt::Vec::with_capacity(len217);
                                                for i in 0..len217 {
                                                    let base = base217
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e217 = {
                                                        let l211 = *base.add(0).cast::<*mut u8>();
                                                        let l212 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len213 = l212;
                                                        let bytes213 = _rt::Vec::from_raw_parts(
                                                            l211.cast(),
                                                            len213,
                                                            len213,
                                                        );
                                                        let l214 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l215 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len216 = l215;
                                                        let bytes216 = _rt::Vec::from_raw_parts(
                                                            l214.cast(),
                                                            len216,
                                                            len216,
                                                        );
                                                        (_rt::string_lift(bytes213), _rt::string_lift(bytes216))
                                                    };
                                                    result217.push(e217);
                                                }
                                                _rt::cabi_dealloc(
                                                    base217,
                                                    len217 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result217
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l218 = i32::from(
                                    *ptr11.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V220;
                                let v220 = match l218 {
                                    0 => V220::ParseError,
                                    1 => V220::InvalidRequest,
                                    2 => V220::MethodNotFound,
                                    3 => V220::InvalidParams,
                                    4 => V220::InternalError,
                                    5 => V220::ResourceNotFound,
                                    6 => V220::ToolNotFound,
                                    7 => V220::PromptNotFound,
                                    8 => V220::Unauthorized,
                                    9 => V220::RateLimited,
                                    10 => V220::Timeout,
                                    11 => V220::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e220 = {
                                            let l219 = *ptr11
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l219
                                        };
                                        V220::CustomCode(e220)
                                    }
                                };
                                let l221 = *ptr11
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l222 = *ptr11
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len223 = l222;
                                let bytes223 = _rt::Vec::from_raw_parts(
                                    l221.cast(),
                                    len223,
                                    len223,
                                );
                                let l224 = i32::from(
                                    *ptr11
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v220,
                                    message: _rt::string_lift(bytes223),
                                    data: match l224 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l225 = *ptr11
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l226 = *ptr11
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len227 = l226;
                                                let bytes227 = _rt::Vec::from_raw_parts(
                                                    l225.cast(),
                                                    len227,
                                                    len227,
                                                );
                                                _rt::string_lift(bytes227)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result228
                }
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::vec::Vec;
    pub use alloc_crate::string::String;
    pub use alloc_crate::alloc;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    extern crate alloc as alloc_crate;
}
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:wasmcp:server@0.1.0:server:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 4261] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xa8\x20\x01A\x02\x01\
A\x16\x01B9\x01m\x02\x04user\x09assistant\x04\0\x04role\x03\0\0\x01o\x02ss\x01p\x02\
\x04\0\x0bmeta-fields\x03\0\x03\x01p\x01\x01k\x05\x01ku\x01ks\x01r\x03\x08audien\
ce\x06\x08priority\x07\x0dlast-modified\x08\x04\0\x0bannotations\x03\0\x09\x01r\x02\
\x04names\x05title\x08\x04\0\x0dbase-metadata\x03\0\x0b\x01k\x0a\x01k\x04\x01r\x03\
\x04texts\x0bannotations\x0d\x04meta\x0e\x04\0\x0ctext-content\x03\0\x0f\x01p}\x01\
r\x04\x04data\x11\x09mime-types\x0bannotations\x0d\x04meta\x0e\x04\0\x0dimage-co\
ntent\x03\0\x12\x01r\x04\x04data\x11\x09mime-types\x0bannotations\x0d\x04meta\x0e\
\x04\0\x0daudio-content\x03\0\x14\x01kw\x01r\x07\x03uris\x04names\x0bdescription\
\x08\x09mime-type\x08\x04size\x16\x0bannotations\x0d\x04meta\x0e\x04\0\x0dresour\
ce-link\x03\0\x17\x01r\x04\x03uris\x09mime-type\x08\x04texts\x04meta\x0e\x04\0\x16\
text-resource-contents\x03\0\x19\x01r\x04\x03uris\x09mime-type\x08\x04blob\x11\x04\
meta\x0e\x04\0\x16blob-resource-contents\x03\0\x1b\x01q\x02\x04text\x01\x1a\0\x04\
blob\x01\x1c\0\x04\0\x11resource-contents\x03\0\x1d\x01r\x03\x08contents\x1e\x0b\
annotations\x0d\x04meta\x0e\x04\0\x11embedded-resource\x03\0\x1f\x01q\x05\x04tex\
t\x01\x10\0\x05image\x01\x13\0\x05audio\x01\x15\0\x0dresource-link\x01\x18\0\x11\
embedded-resource\x01\x20\0\x04\0\x0dcontent-block\x03\0!\x01s\x04\0\x0ajson-val\
ue\x03\0#\x01s\x04\0\x0bjson-schema\x03\0%\x01q\x0d\x0bparse-error\0\0\x0finvali\
d-request\0\0\x10method-not-found\0\0\x0einvalid-params\0\0\x0einternal-error\0\0\
\x12resource-not-found\0\0\x0etool-not-found\0\0\x10prompt-not-found\0\0\x0cunau\
thorized\0\0\x0crate-limited\0\0\x07timeout\0\0\x09cancelled\0\0\x0bcustom-code\x01\
z\0\x04\0\x0aerror-code\x03\0'\x01r\x03\x04code(\x07messages\x04data\x08\x04\0\x09\
mcp-error\x03\0)\x01s\x04\0\x06cursor\x03\0+\x01s\x04\0\x0eprogress-token\x03\0-\
\x01m\x03\x04user\x09assistant\x06system\x04\0\x0cmessage-role\x03\0/\x01r\x01\x04\
name\x08\x04\0\x0amodel-hint\x03\01\x01p2\x01k3\x01r\x04\x05hints4\x0dcost-prior\
ity\x07\x0espeed-priority\x07\x15intelligence-priority\x07\x04\0\x11model-prefer\
ences\x03\05\x01r\x04\x0curi-templates\x04names\x0bdescription\x08\x09mime-type\x08\
\x04\0\x11resource-template\x03\07\x03\0\x1bfastertools:mcp/types@0.1.4\x05\0\x02\
\x03\0\0\x09mcp-error\x02\x03\0\0\x0bmeta-fields\x01B'\x02\x03\x02\x01\x01\x04\0\
\x09mcp-error\x03\0\0\x02\x03\x02\x01\x02\x04\0\x0bmeta-fields\x03\0\x02\x01s\x04\
\0\x10protocol-version\x03\0\x04\x01ks\x01r\x03\x04names\x07versions\x05title\x06\
\x04\0\x13implementation-info\x03\0\x07\x01k\x7f\x01r\x01\x0clist-changed\x09\x04\
\0\x10roots-capability\x03\0\x0a\x01k\x03\x01k\x0b\x01r\x04\x0cexperimental\x0c\x05\
roots\x0d\x08sampling\x09\x0belicitation\x09\x04\0\x13client-capabilities\x03\0\x0e\
\x01r\x01\x0clist-changed\x09\x04\0\x12prompts-capability\x03\0\x10\x01r\x02\x09\
subscribe\x09\x0clist-changed\x09\x04\0\x14resources-capability\x03\0\x12\x01r\x01\
\x0clist-changed\x09\x04\0\x10tools-capability\x03\0\x14\x01k\x11\x01k\x13\x01k\x15\
\x01r\x06\x0cexperimental\x0c\x07logging\x09\x0bcompletions\x09\x07prompts\x16\x09\
resources\x17\x05tools\x18\x04\0\x13server-capabilities\x03\0\x19\x01r\x04\x10pr\
otocol-version\x05\x0ccapabilities\x0f\x0bclient-info\x08\x04meta\x0c\x04\0\x12i\
nitialize-request\x03\0\x1b\x01r\x05\x10protocol-version\x05\x0ccapabilities\x1a\
\x0bserver-info\x08\x0cinstructions\x06\x04meta\x0c\x04\0\x13initialize-response\
\x03\0\x1d\x01j\x01\x1e\x01\x01\x01@\x01\x07request\x1c\0\x1f\x04\0\x0ainitializ\
e\x01\x20\x01j\0\x01\x01\x01@\0\0!\x04\0\x0binitialized\x01\"\x04\0\x04ping\x01\"\
\x04\0\x08shutdown\x01\"\x03\0\x1dfastertools:mcp/session@0.1.4\x05\x03\x02\x03\0\
\0\x0eprogress-token\x01B%\x02\x03\x02\x01\x01\x04\0\x09mcp-error\x03\0\0\x02\x03\
\x02\x01\x02\x04\0\x0bmeta-fields\x03\0\x02\x02\x03\x02\x01\x04\x04\0\x0eprogres\
s-token\x03\0\x04\x01ku\x01ks\x01k\x03\x01r\x05\x0eprogress-token\x05\x08progres\
su\x05total\x06\x07message\x07\x04meta\x08\x04\0\x15progress-notification\x03\0\x09\
\x01r\x03\x0arequest-ids\x06reason\x07\x04meta\x08\x04\0\x16cancelled-notificati\
on\x03\0\x0b\x01r\x01\x04meta\x08\x04\0\x12tools-list-changed\x03\0\x0d\x01r\x01\
\x04meta\x08\x04\0\x16resources-list-changed\x03\0\x0f\x01r\x01\x04meta\x08\x04\0\
\x14prompts-list-changed\x03\0\x11\x01r\x02\x03uris\x04meta\x08\x04\0\x10resourc\
e-updated\x03\0\x13\x01r\x01\x04meta\x08\x04\0\x12roots-list-changed\x03\0\x15\x01\
m\x08\x05debug\x04info\x06notice\x07warning\x05error\x08critical\x05alert\x09eme\
rgency\x04\0\x09log-level\x03\0\x17\x01o\x02ss\x01p\x19\x01k\x1a\x01r\x05\x05lev\
el\x18\x06logger\x07\x07messages\x04data\x1b\x04meta\x08\x04\0\x0blog-message\x03\
\0\x1c\x01q\x08\x08progress\x01\x0a\0\x09cancelled\x01\x0c\0\x12tools-list-chang\
ed\x01\x0e\0\x16resources-list-changed\x01\x10\0\x14prompts-list-changed\x01\x12\
\0\x10resource-updated\x01\x14\0\x12roots-list-changed\x01\x16\0\x0blog-message\x01\
\x1d\0\x04\0\x0cnotification\x03\0\x1e\x01j\0\x01\x01\x01@\x01\x0cnotification\x1f\
\0\x20\x04\0\x11send-notification\x01!\x01@\x01\x05level\x18\0\x20\x04\0\x0dset-\
log-level\x01\"\x03\0#fastertools:mcp/notifications@0.1.4\x05\x05\x02\x03\0\0\x0d\
content-block\x02\x03\0\0\x0ajson-value\x02\x03\0\0\x0bjson-schema\x02\x03\0\0\x0d\
base-metadata\x02\x03\0\0\x06cursor\x01B,\x02\x03\x02\x01\x06\x04\0\x0dcontent-b\
lock\x03\0\0\x02\x03\x02\x01\x07\x04\0\x0ajson-value\x03\0\x02\x02\x03\x02\x01\x08\
\x04\0\x0bjson-schema\x03\0\x04\x02\x03\x02\x01\x01\x04\0\x09mcp-error\x03\0\x06\
\x02\x03\x02\x01\x09\x04\0\x0dbase-metadata\x03\0\x08\x02\x03\x02\x01\x02\x04\0\x0b\
meta-fields\x03\0\x0a\x02\x03\x02\x01\x0a\x04\0\x06cursor\x03\0\x0c\x02\x03\x02\x01\
\x04\x04\0\x0eprogress-token\x03\0\x0e\x01ks\x01k\x7f\x01r\x05\x05title\x10\x0er\
ead-only-hint\x11\x10destructive-hint\x11\x0fidempotent-hint\x11\x0fopen-world-h\
int\x11\x04\0\x10tool-annotations\x03\0\x12\x01k\x05\x01k\x13\x01k\x0b\x01r\x06\x04\
base\x09\x0bdescription\x10\x0cinput-schema\x05\x0doutput-schema\x14\x0bannotati\
ons\x15\x04meta\x16\x04\0\x04tool\x03\0\x17\x01p\x01\x01k\x03\x01r\x04\x07conten\
t\x19\x12structured-content\x1a\x08is-error\x11\x04meta\x16\x04\0\x0btool-result\
\x03\0\x1b\x01k\x0d\x01k\x0f\x01r\x03\x06cursor\x1d\x0eprogress-token\x1e\x04met\
a\x16\x04\0\x12list-tools-request\x03\0\x1f\x01p\x18\x01r\x03\x05tools!\x0bnext-\
cursor\x1d\x04meta\x16\x04\0\x13list-tools-response\x03\0\"\x01r\x04\x04names\x09\
arguments\x1a\x0eprogress-token\x1e\x04meta\x16\x04\0\x11call-tool-request\x03\0\
$\x01j\x01#\x01\x07\x01@\x01\x07request\x20\0&\x04\0\x0alist-tools\x01'\x01j\x01\
\x1c\x01\x07\x01@\x01\x07request%\0(\x04\0\x09call-tool\x01)\x03\0\x1bfastertool\
s:mcp/tools@0.1.4\x05\x0b\x02\x03\0\x03\x12list-tools-request\x02\x03\0\x03\x13l\
ist-tools-response\x02\x03\0\x03\x11call-tool-request\x02\x03\0\x03\x0btool-resu\
lt\x01B\x10\x02\x03\x02\x01\x01\x04\0\x09mcp-error\x03\0\0\x02\x03\x02\x01\x0c\x04\
\0\x12list-tools-request\x03\0\x02\x02\x03\x02\x01\x0d\x04\0\x13list-tools-respo\
nse\x03\0\x04\x02\x03\x02\x01\x0e\x04\0\x11call-tool-request\x03\0\x06\x02\x03\x02\
\x01\x0f\x04\0\x0btool-result\x03\0\x08\x01j\x01\x05\x01\x01\x01@\x01\x07request\
\x03\0\x0a\x04\0\x11handle-list-tools\x01\x0b\x01j\x01\x09\x01\x01\x01@\x01\x07r\
equest\x07\0\x0c\x04\0\x10handle-call-tool\x01\x0d\x03\0\"fastertools:mcp/tool-h\
andler@0.1.4\x05\x10\x04\0\x1awasmcp:server/server@0.1.0\x04\0\x0b\x0c\x01\0\x06\
server\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227\
.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
