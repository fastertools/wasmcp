// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
//   * additional derives ["serde::Serialize", "serde::Deserialize", "Clone"]
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wasmcp {
    pub mod mcp {
        /// Core type definitions for the Model Context Protocol
        /// These types are used across all MCP interfaces
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Role in a conversation
            #[repr(u8)]
            #[derive(
                Clone,
                Copy,
                Eq,
                Ord,
                PartialEq,
                PartialOrd,
                serde::Deserialize,
                serde::Serialize
            )]
            pub enum Role {
                User,
                Assistant,
            }
            impl ::core::fmt::Debug for Role {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Role::User => f.debug_tuple("Role::User").finish(),
                        Role::Assistant => f.debug_tuple("Role::Assistant").finish(),
                    }
                }
            }
            impl Role {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> Role {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => Role::User,
                        1 => Role::Assistant,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// JSON value as a string
            /// This is a JSON-encoded value that should be parsed/validated by implementations
            pub type JsonValue = _rt::String;
            /// Metadata fields for extensibility
            /// Key-value pairs where values are JSON-encoded strings
            pub type MetaFields = _rt::Vec<(_rt::String, _rt::String)>;
            /// Annotations provide hints to clients about how to handle data
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct Annotations {
                /// Who this data is intended for
                pub audience: Option<_rt::Vec<Role>>,
                /// Priority from 0.0 (least) to 1.0 (most important)
                /// Implementations SHOULD validate this is within [0.0, 1.0] range
                pub priority: Option<f64>,
                /// ISO 8601 timestamp of last modification
                /// Format: YYYY-MM-DDTHH:mm:ss[.sss]Z or Â±HH:MM offset
                pub last_modified: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Annotations {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Annotations")
                        .field("audience", &self.audience)
                        .field("priority", &self.priority)
                        .field("last-modified", &self.last_modified)
                        .finish()
                }
            }
            /// Base metadata pattern used throughout the protocol
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct BaseMetadata {
                /// Programmatic identifier
                pub name: _rt::String,
                /// Human-readable display name
                pub title: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for BaseMetadata {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BaseMetadata")
                        .field("name", &self.name)
                        .field("title", &self.title)
                        .finish()
                }
            }
            /// Text content with optional annotations
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct TextContent {
                pub text: _rt::String,
                pub annotations: Option<Annotations>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for TextContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextContent")
                        .field("text", &self.text)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Image content as binary data
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ImageContent {
                /// Base64-encoded image data
                pub data: _rt::Vec<u8>,
                /// MIME type (e.g., "image/png", "image/jpeg")
                pub mime_type: _rt::String,
                pub annotations: Option<Annotations>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ImageContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ImageContent")
                        .field("data", &self.data)
                        .field("mime-type", &self.mime_type)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Audio content as binary data
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct AudioContent {
                /// Base64-encoded audio data
                pub data: _rt::Vec<u8>,
                /// MIME type (e.g., "audio/wav", "audio/mp3")
                pub mime_type: _rt::String,
                pub annotations: Option<Annotations>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for AudioContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AudioContent")
                        .field("data", &self.data)
                        .field("mime-type", &self.mime_type)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Reference to a resource that the server can read
            /// Resource links included in prompts or tool results may not appear in resources/list
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ResourceLink {
                /// URI of the resource
                pub uri: _rt::String,
                /// Programmatic identifier for the resource
                pub name: _rt::String,
                /// Human-readable display title (preferred for UI display)
                pub title: Option<_rt::String>,
                /// Description of what this resource represents
                pub description: Option<_rt::String>,
                /// MIME type of the resource, if known
                pub mime_type: Option<_rt::String>,
                /// Size in bytes (before encoding), if known
                pub size: Option<u64>,
                /// Client hints for handling
                pub annotations: Option<Annotations>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ResourceLink {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourceLink")
                        .field("uri", &self.uri)
                        .field("name", &self.name)
                        .field("title", &self.title)
                        .field("description", &self.description)
                        .field("mime-type", &self.mime_type)
                        .field("size", &self.size)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct TextResourceContents {
                pub uri: _rt::String,
                pub mime_type: Option<_rt::String>,
                pub text: _rt::String,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for TextResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextResourceContents")
                        .field("uri", &self.uri)
                        .field("mime-type", &self.mime_type)
                        .field("text", &self.text)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct BlobResourceContents {
                pub uri: _rt::String,
                pub mime_type: Option<_rt::String>,
                /// Binary data
                pub blob: _rt::Vec<u8>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for BlobResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BlobResourceContents")
                        .field("uri", &self.uri)
                        .field("mime-type", &self.mime_type)
                        .field("blob", &self.blob)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Resource contents can be either text or binary
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub enum ResourceContents {
                Text(TextResourceContents),
                Blob(BlobResourceContents),
            }
            impl ::core::fmt::Debug for ResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ResourceContents::Text(e) => {
                            f.debug_tuple("ResourceContents::Text").field(e).finish()
                        }
                        ResourceContents::Blob(e) => {
                            f.debug_tuple("ResourceContents::Blob").field(e).finish()
                        }
                    }
                }
            }
            /// Embedded resource content
            /// The contents of a resource, embedded into a prompt or tool call result
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct EmbeddedResource {
                /// The actual resource contents (text or binary)
                pub contents: ResourceContents,
                /// Client hints for handling
                pub annotations: Option<Annotations>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for EmbeddedResource {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EmbeddedResource")
                        .field("contents", &self.contents)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Content block types that can be included in messages
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub enum ContentBlock {
                Text(TextContent),
                Image(ImageContent),
                Audio(AudioContent),
                ResourceLink(ResourceLink),
                EmbeddedResource(EmbeddedResource),
            }
            impl ::core::fmt::Debug for ContentBlock {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ContentBlock::Text(e) => {
                            f.debug_tuple("ContentBlock::Text").field(e).finish()
                        }
                        ContentBlock::Image(e) => {
                            f.debug_tuple("ContentBlock::Image").field(e).finish()
                        }
                        ContentBlock::Audio(e) => {
                            f.debug_tuple("ContentBlock::Audio").field(e).finish()
                        }
                        ContentBlock::ResourceLink(e) => {
                            f.debug_tuple("ContentBlock::ResourceLink").field(e).finish()
                        }
                        ContentBlock::EmbeddedResource(e) => {
                            f.debug_tuple("ContentBlock::EmbeddedResource")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            /// JSON Schema representation
            /// Kept as a string since JSON Schema is complex
            /// and typically validated by specialized libraries
            pub type JsonSchema = _rt::String;
            /// Standard JSON-RPC and MCP error codes
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub enum ErrorCode {
                /// JSON-RPC standard errors
                ParseError,
                /// -32700
                InvalidRequest,
                /// -32600
                MethodNotFound,
                /// -32601
                InvalidParams,
                /// -32602
                InternalError,
                /// -32603
                /// MCP-specific errors
                ResourceNotFound,
                ToolNotFound,
                PromptNotFound,
                Unauthorized,
                RateLimited,
                Timeout,
                Cancelled,
                /// Custom error with specific code
                CustomCode(i32),
            }
            impl ::core::fmt::Debug for ErrorCode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ErrorCode::ParseError => {
                            f.debug_tuple("ErrorCode::ParseError").finish()
                        }
                        ErrorCode::InvalidRequest => {
                            f.debug_tuple("ErrorCode::InvalidRequest").finish()
                        }
                        ErrorCode::MethodNotFound => {
                            f.debug_tuple("ErrorCode::MethodNotFound").finish()
                        }
                        ErrorCode::InvalidParams => {
                            f.debug_tuple("ErrorCode::InvalidParams").finish()
                        }
                        ErrorCode::InternalError => {
                            f.debug_tuple("ErrorCode::InternalError").finish()
                        }
                        ErrorCode::ResourceNotFound => {
                            f.debug_tuple("ErrorCode::ResourceNotFound").finish()
                        }
                        ErrorCode::ToolNotFound => {
                            f.debug_tuple("ErrorCode::ToolNotFound").finish()
                        }
                        ErrorCode::PromptNotFound => {
                            f.debug_tuple("ErrorCode::PromptNotFound").finish()
                        }
                        ErrorCode::Unauthorized => {
                            f.debug_tuple("ErrorCode::Unauthorized").finish()
                        }
                        ErrorCode::RateLimited => {
                            f.debug_tuple("ErrorCode::RateLimited").finish()
                        }
                        ErrorCode::Timeout => {
                            f.debug_tuple("ErrorCode::Timeout").finish()
                        }
                        ErrorCode::Cancelled => {
                            f.debug_tuple("ErrorCode::Cancelled").finish()
                        }
                        ErrorCode::CustomCode(e) => {
                            f.debug_tuple("ErrorCode::CustomCode").field(e).finish()
                        }
                    }
                }
            }
            /// Standard error structure
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct McpError {
                pub code: ErrorCode,
                pub message: _rt::String,
                /// Additional error context (JSON-encoded)
                pub data: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for McpError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("McpError")
                        .field("code", &self.code)
                        .field("message", &self.message)
                        .field("data", &self.data)
                        .finish()
                }
            }
            impl ::core::fmt::Display for McpError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for McpError {}
            /// Pagination cursor for list operations
            pub type Cursor = _rt::String;
            /// Progress token for tracking long-running operations
            pub type ProgressToken = _rt::String;
            /// JSON-RPC request ID
            /// Can be either a string or number in JSON-RPC
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub enum RequestId {
                Str(_rt::String),
                Num(i64),
            }
            impl ::core::fmt::Debug for RequestId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        RequestId::Str(e) => {
                            f.debug_tuple("RequestId::Str").field(e).finish()
                        }
                        RequestId::Num(e) => {
                            f.debug_tuple("RequestId::Num").field(e).finish()
                        }
                    }
                }
            }
            /// Message role for LLM interactions
            #[repr(u8)]
            #[derive(
                Clone,
                Copy,
                Eq,
                Ord,
                PartialEq,
                PartialOrd,
                serde::Deserialize,
                serde::Serialize
            )]
            pub enum MessageRole {
                User,
                Assistant,
                System,
            }
            impl ::core::fmt::Debug for MessageRole {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        MessageRole::User => f.debug_tuple("MessageRole::User").finish(),
                        MessageRole::Assistant => {
                            f.debug_tuple("MessageRole::Assistant").finish()
                        }
                        MessageRole::System => {
                            f.debug_tuple("MessageRole::System").finish()
                        }
                    }
                }
            }
            impl MessageRole {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> MessageRole {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => MessageRole::User,
                        1 => MessageRole::Assistant,
                        2 => MessageRole::System,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Resource template with URI template support (RFC 6570)
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ResourceTemplate {
                /// URI template that can be expanded with variables
                pub uri_template: _rt::String,
                /// Identifier for the template
                pub name: _rt::String,
                /// Human-readable description
                pub description: Option<_rt::String>,
                /// Expected MIME type of resources
                pub mime_type: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ResourceTemplate {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourceTemplate")
                        .field("uri-template", &self.uri_template)
                        .field("name", &self.name)
                        .field("description", &self.description)
                        .field("mime-type", &self.mime_type)
                        .finish()
                }
            }
        }
        /// Core types and capabilities for MCP
        /// Every MCP implementation requires these fundamental types and functions
        /// Type definitions for core MCP protocol operations
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod core_types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type MetaFields = super::super::super::wasmcp::mcp::types::MetaFields;
            /// Protocol versions supported by MCP
            /// These correspond to official MCP specification versions
            #[repr(u8)]
            #[derive(
                Clone,
                Copy,
                Eq,
                Ord,
                PartialEq,
                PartialOrd,
                serde::Deserialize,
                serde::Serialize
            )]
            pub enum ProtocolVersion {
                /// MCP 2025-03-26 specification
                V20250326,
                /// MCP 2025-06-18 specification (latest)
                V20250618,
            }
            impl ::core::fmt::Debug for ProtocolVersion {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ProtocolVersion::V20250326 => {
                            f.debug_tuple("ProtocolVersion::V20250326").finish()
                        }
                        ProtocolVersion::V20250618 => {
                            f.debug_tuple("ProtocolVersion::V20250618").finish()
                        }
                    }
                }
            }
            impl ProtocolVersion {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ProtocolVersion {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ProtocolVersion::V20250326,
                        1 => ProtocolVersion::V20250618,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Information about an MCP implementation
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ImplementationInfo {
                /// Implementation name (e.g., "weather-server")
                pub name: _rt::String,
                /// Implementation version (e.g., "1.0.0")
                pub version: _rt::String,
                /// Optional human-readable title
                pub title: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ImplementationInfo {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ImplementationInfo")
                        .field("name", &self.name)
                        .field("version", &self.version)
                        .field("title", &self.title)
                        .finish()
                }
            }
            /// Root listing capability details
            #[repr(C)]
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub struct RootsCapability {
                /// Server will notify when roots list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for RootsCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RootsCapability")
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Prompts capability details
            #[repr(C)]
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub struct PromptsCapability {
                /// Server will notify when prompts list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for PromptsCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PromptsCapability")
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Resources capability details
            #[repr(C)]
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub struct ResourcesCapability {
                /// Server supports resource subscriptions
                pub subscribe: Option<bool>,
                /// Server will notify when resource list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for ResourcesCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourcesCapability")
                        .field("subscribe", &self.subscribe)
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Tools capability details
            #[repr(C)]
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub struct ToolsCapability {
                /// Server will notify when tools list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for ToolsCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolsCapability")
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Capabilities that a client supports
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ClientCapabilities {
                /// Experimental/custom capabilities
                pub experimental: Option<MetaFields>,
                /// Support for roots (directory access)
                pub roots: Option<RootsCapability>,
                /// Support for LLM sampling
                pub sampling: Option<bool>,
                /// Support for user elicitation
                pub elicitation: Option<bool>,
            }
            impl ::core::fmt::Debug for ClientCapabilities {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ClientCapabilities")
                        .field("experimental", &self.experimental)
                        .field("roots", &self.roots)
                        .field("sampling", &self.sampling)
                        .field("elicitation", &self.elicitation)
                        .finish()
                }
            }
            /// Capabilities that a server provides
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ServerCapabilities {
                /// Experimental/custom capabilities
                pub experimental: Option<MetaFields>,
                /// Server can send log messages
                pub logging: Option<bool>,
                /// Server supports argument autocompletion
                pub completions: Option<bool>,
                /// Server offers prompts
                pub prompts: Option<PromptsCapability>,
                /// Server offers resources
                pub resources: Option<ResourcesCapability>,
                /// Server offers tools
                pub tools: Option<ToolsCapability>,
            }
            impl ::core::fmt::Debug for ServerCapabilities {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ServerCapabilities")
                        .field("experimental", &self.experimental)
                        .field("logging", &self.logging)
                        .field("completions", &self.completions)
                        .field("prompts", &self.prompts)
                        .field("resources", &self.resources)
                        .field("tools", &self.tools)
                        .finish()
                }
            }
            /// Initialize request sent by client on connection
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct InitializeRequest {
                /// Protocol version the client supports
                pub protocol_version: ProtocolVersion,
                /// Client's capabilities
                pub capabilities: ClientCapabilities,
                /// Client implementation details
                pub client_info: ImplementationInfo,
                /// Optional metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for InitializeRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("InitializeRequest")
                        .field("protocol-version", &self.protocol_version)
                        .field("capabilities", &self.capabilities)
                        .field("client-info", &self.client_info)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Initialize response from server
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct InitializeResponse {
                /// Protocol version the server will use
                pub protocol_version: ProtocolVersion,
                /// Server's capabilities
                pub capabilities: ServerCapabilities,
                /// Server implementation details
                pub server_info: ImplementationInfo,
                /// Optional instructions for using the server
                pub instructions: Option<_rt::String>,
                /// Optional metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for InitializeResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("InitializeResponse")
                        .field("protocol-version", &self.protocol_version)
                        .field("capabilities", &self.capabilities)
                        .field("server-info", &self.server_info)
                        .field("instructions", &self.instructions)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
        }
        /// Notification types for MCP events and updates
        /// Type definitions for notifications
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod notification_types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type McpError = super::super::super::wasmcp::mcp::types::McpError;
            pub type MetaFields = super::super::super::wasmcp::mcp::types::MetaFields;
            pub type ProgressToken = super::super::super::wasmcp::mcp::types::ProgressToken;
            pub type RequestId = super::super::super::wasmcp::mcp::types::RequestId;
            /// Notification types that can be sent
            /// Notification that a long-running operation has progress
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ProgressNotification {
                /// Token identifying the operation
                pub progress_token: ProgressToken,
                /// Current progress value (can be fractional)
                pub progress: f64,
                /// Total expected progress (if known, can be fractional)
                pub total: Option<f64>,
                /// Optional progress message
                pub message: Option<_rt::String>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ProgressNotification {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ProgressNotification")
                        .field("progress-token", &self.progress_token)
                        .field("progress", &self.progress)
                        .field("total", &self.total)
                        .field("message", &self.message)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Notification that an operation was cancelled
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct CancelledNotification {
                /// ID of the cancelled request
                pub request_id: RequestId,
                /// Optional cancellation reason
                pub reason: Option<_rt::String>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for CancelledNotification {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CancelledNotification")
                        .field("request-id", &self.request_id)
                        .field("reason", &self.reason)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Notification that the tools list has changed
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ToolsListChanged {
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ToolsListChanged {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolsListChanged").field("meta", &self.meta).finish()
                }
            }
            /// Notification that the resources list has changed
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ResourcesListChanged {
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ResourcesListChanged {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourcesListChanged")
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Notification that the prompts list has changed
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct PromptsListChanged {
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for PromptsListChanged {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PromptsListChanged")
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Notification that a subscribed resource has been updated
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ResourceUpdated {
                /// URI of the updated resource
                pub uri: _rt::String,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ResourceUpdated {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourceUpdated")
                        .field("uri", &self.uri)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Notification that the roots list has changed
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct RootsListChanged {
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for RootsListChanged {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RootsListChanged").field("meta", &self.meta).finish()
                }
            }
            /// Log levels for logging notifications
            #[repr(u8)]
            #[derive(
                Clone,
                Copy,
                Eq,
                Ord,
                PartialEq,
                PartialOrd,
                serde::Deserialize,
                serde::Serialize
            )]
            pub enum LogLevel {
                Debug,
                Info,
                Notice,
                Warning,
                Error,
                Critical,
                Alert,
                Emergency,
            }
            impl ::core::fmt::Debug for LogLevel {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        LogLevel::Debug => f.debug_tuple("LogLevel::Debug").finish(),
                        LogLevel::Info => f.debug_tuple("LogLevel::Info").finish(),
                        LogLevel::Notice => f.debug_tuple("LogLevel::Notice").finish(),
                        LogLevel::Warning => f.debug_tuple("LogLevel::Warning").finish(),
                        LogLevel::Error => f.debug_tuple("LogLevel::Error").finish(),
                        LogLevel::Critical => {
                            f.debug_tuple("LogLevel::Critical").finish()
                        }
                        LogLevel::Alert => f.debug_tuple("LogLevel::Alert").finish(),
                        LogLevel::Emergency => {
                            f.debug_tuple("LogLevel::Emergency").finish()
                        }
                    }
                }
            }
            impl LogLevel {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> LogLevel {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => LogLevel::Debug,
                        1 => LogLevel::Info,
                        2 => LogLevel::Notice,
                        3 => LogLevel::Warning,
                        4 => LogLevel::Error,
                        5 => LogLevel::Critical,
                        6 => LogLevel::Alert,
                        7 => LogLevel::Emergency,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Log message notification
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct LogMessage {
                /// Severity level
                pub level: LogLevel,
                /// Optional logger name
                pub logger: Option<_rt::String>,
                /// Log message or data
                pub message: _rt::String,
                /// Additional structured data
                pub data: Option<_rt::Vec<(_rt::String, _rt::String)>>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for LogMessage {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("LogMessage")
                        .field("level", &self.level)
                        .field("logger", &self.logger)
                        .field("message", &self.message)
                        .field("data", &self.data)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// All possible notification types
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub enum Notification {
                /// Progress update for long-running operation
                Progress(ProgressNotification),
                /// Operation was cancelled
                Cancelled(CancelledNotification),
                /// Tools list changed
                ToolsListChanged(ToolsListChanged),
                /// Resources list changed
                ResourcesListChanged(ResourcesListChanged),
                /// Prompts list changed
                PromptsListChanged(PromptsListChanged),
                /// Subscribed resource was updated
                ResourceUpdated(ResourceUpdated),
                /// Roots list changed
                RootsListChanged(RootsListChanged),
                /// Log message from server
                LogMessage(LogMessage),
            }
            impl ::core::fmt::Debug for Notification {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Notification::Progress(e) => {
                            f.debug_tuple("Notification::Progress").field(e).finish()
                        }
                        Notification::Cancelled(e) => {
                            f.debug_tuple("Notification::Cancelled").field(e).finish()
                        }
                        Notification::ToolsListChanged(e) => {
                            f.debug_tuple("Notification::ToolsListChanged")
                                .field(e)
                                .finish()
                        }
                        Notification::ResourcesListChanged(e) => {
                            f.debug_tuple("Notification::ResourcesListChanged")
                                .field(e)
                                .finish()
                        }
                        Notification::PromptsListChanged(e) => {
                            f.debug_tuple("Notification::PromptsListChanged")
                                .field(e)
                                .finish()
                        }
                        Notification::ResourceUpdated(e) => {
                            f.debug_tuple("Notification::ResourceUpdated")
                                .field(e)
                                .finish()
                        }
                        Notification::RootsListChanged(e) => {
                            f.debug_tuple("Notification::RootsListChanged")
                                .field(e)
                                .finish()
                        }
                        Notification::LogMessage(e) => {
                            f.debug_tuple("Notification::LogMessage").field(e).finish()
                        }
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Notification operations
            /// Send a notification to the client
            pub fn send_notification(
                notification: &Notification,
            ) -> Result<(), McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let (
                        result66_0,
                        result66_1,
                        result66_2,
                        result66_3,
                        result66_4,
                        result66_5,
                        result66_6,
                        result66_7,
                        result66_8,
                        result66_9,
                        result66_10,
                        result66_11,
                        result66_12,
                    ) = match notification {
                        Notification::Progress(e) => {
                            let ProgressNotification {
                                progress_token: progress_token0,
                                progress: progress0,
                                total: total0,
                                message: message0,
                                meta: meta0,
                            } = e;
                            let vec1 = progress_token0;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            let (result2_0, result2_1) = match total0 {
                                Some(e) => (1i32, _rt::as_f64(e)),
                                None => (0i32, 0.0f64),
                            };
                            let (result4_0, result4_1, result4_2) = match message0 {
                                Some(e) => {
                                    let vec3 = e;
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    (1i32, ptr3.cast_mut(), len3)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            let (result9_0, result9_1, result9_2) = match meta0 {
                                Some(e) => {
                                    let vec8 = e;
                                    let len8 = vec8.len();
                                    let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec8.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result8 = if layout8.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout8);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec8.into_iter().enumerate() {
                                        let base = result8
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t5_0, t5_1) = e;
                                            let vec6 = t5_0;
                                            let ptr6 = vec6.as_ptr().cast::<u8>();
                                            let len6 = vec6.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len6;
                                            *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                                            let vec7 = t5_1;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len7;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr7.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result8, layout8)]);
                                    (1i32, result8, len8)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                0i32,
                                ptr1.cast_mut(),
                                ::core::mem::MaybeUninit::new(len1 as i64 as u64),
                                ::core::mem::MaybeUninit::new(
                                    (_rt::as_f64(progress0)).to_bits() as i64 as u64,
                                ),
                                result2_0 as *mut u8,
                                ::core::mem::MaybeUninit::new(
                                    (result2_1).to_bits() as i64 as u64,
                                ),
                                result4_0 as usize,
                                result4_1,
                                result4_2 as *mut u8,
                                result9_0 as usize,
                                result9_1,
                                result9_2 as *mut u8,
                                0usize,
                            )
                        }
                        Notification::Cancelled(e) => {
                            let CancelledNotification {
                                request_id: request_id10,
                                reason: reason10,
                                meta: meta10,
                            } = e;
                            use super::super::super::wasmcp::mcp::types::RequestId as V12;
                            let (result13_0, result13_1, result13_2) = match request_id10 {
                                V12::Str(e) => {
                                    let vec11 = e;
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    (
                                        0i32,
                                        {
                                            let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                            t.as_mut_ptr().cast::<*mut u8>().write(ptr11.cast_mut());
                                            t
                                        },
                                        len11,
                                    )
                                }
                                V12::Num(e) => {
                                    (
                                        1i32,
                                        ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                        0usize,
                                    )
                                }
                            };
                            let (result15_0, result15_1, result15_2) = match reason10 {
                                Some(e) => {
                                    let vec14 = e;
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    (1i32, ptr14.cast_mut(), len14)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            let (result20_0, result20_1, result20_2) = match meta10 {
                                Some(e) => {
                                    let vec19 = e;
                                    let len19 = vec19.len();
                                    let layout19 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec19.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result19 = if layout19.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout19).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout19);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec19.into_iter().enumerate() {
                                        let base = result19
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t16_0, t16_1) = e;
                                            let vec17 = t16_0;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len17;
                                            *base.add(0).cast::<*mut u8>() = ptr17.cast_mut();
                                            let vec18 = t16_1;
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len18;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr18.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result19, layout19)]);
                                    (1i32, result19, len19)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                1i32,
                                result13_0 as *mut u8,
                                result13_1,
                                ::core::mem::MaybeUninit::new(result13_2 as i64 as u64),
                                result15_0 as *mut u8,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(result15_1);
                                    t
                                },
                                result15_2,
                                result20_0 as *mut u8,
                                result20_1,
                                result20_2,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                        Notification::ToolsListChanged(e) => {
                            let ToolsListChanged { meta: meta21 } = e;
                            let (result26_0, result26_1, result26_2) = match meta21 {
                                Some(e) => {
                                    let vec25 = e;
                                    let len25 = vec25.len();
                                    let layout25 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec25.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result25 = if layout25.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout25).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout25);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec25.into_iter().enumerate() {
                                        let base = result25
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t22_0, t22_1) = e;
                                            let vec23 = t22_0;
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len23;
                                            *base.add(0).cast::<*mut u8>() = ptr23.cast_mut();
                                            let vec24 = t22_1;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len24;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr24.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result25, layout25)]);
                                    (1i32, result25, len25)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                2i32,
                                result26_0 as *mut u8,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(result26_1);
                                    t
                                },
                                ::core::mem::MaybeUninit::new(result26_2 as i64 as u64),
                                ::core::ptr::null_mut(),
                                ::core::mem::MaybeUninit::<u64>::zeroed(),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                        Notification::ResourcesListChanged(e) => {
                            let ResourcesListChanged { meta: meta27 } = e;
                            let (result32_0, result32_1, result32_2) = match meta27 {
                                Some(e) => {
                                    let vec31 = e;
                                    let len31 = vec31.len();
                                    let layout31 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec31.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result31 = if layout31.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout31).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout31);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec31.into_iter().enumerate() {
                                        let base = result31
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t28_0, t28_1) = e;
                                            let vec29 = t28_0;
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len29;
                                            *base.add(0).cast::<*mut u8>() = ptr29.cast_mut();
                                            let vec30 = t28_1;
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len30;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr30.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result31, layout31)]);
                                    (1i32, result31, len31)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                3i32,
                                result32_0 as *mut u8,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(result32_1);
                                    t
                                },
                                ::core::mem::MaybeUninit::new(result32_2 as i64 as u64),
                                ::core::ptr::null_mut(),
                                ::core::mem::MaybeUninit::<u64>::zeroed(),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                        Notification::PromptsListChanged(e) => {
                            let PromptsListChanged { meta: meta33 } = e;
                            let (result38_0, result38_1, result38_2) = match meta33 {
                                Some(e) => {
                                    let vec37 = e;
                                    let len37 = vec37.len();
                                    let layout37 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec37.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result37 = if layout37.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout37).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout37);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec37.into_iter().enumerate() {
                                        let base = result37
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t34_0, t34_1) = e;
                                            let vec35 = t34_0;
                                            let ptr35 = vec35.as_ptr().cast::<u8>();
                                            let len35 = vec35.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len35;
                                            *base.add(0).cast::<*mut u8>() = ptr35.cast_mut();
                                            let vec36 = t34_1;
                                            let ptr36 = vec36.as_ptr().cast::<u8>();
                                            let len36 = vec36.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len36;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr36.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result37, layout37)]);
                                    (1i32, result37, len37)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                4i32,
                                result38_0 as *mut u8,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(result38_1);
                                    t
                                },
                                ::core::mem::MaybeUninit::new(result38_2 as i64 as u64),
                                ::core::ptr::null_mut(),
                                ::core::mem::MaybeUninit::<u64>::zeroed(),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                        Notification::ResourceUpdated(e) => {
                            let ResourceUpdated { uri: uri39, meta: meta39 } = e;
                            let vec40 = uri39;
                            let ptr40 = vec40.as_ptr().cast::<u8>();
                            let len40 = vec40.len();
                            let (result45_0, result45_1, result45_2) = match meta39 {
                                Some(e) => {
                                    let vec44 = e;
                                    let len44 = vec44.len();
                                    let layout44 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec44.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result44 = if layout44.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout44).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout44);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec44.into_iter().enumerate() {
                                        let base = result44
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t41_0, t41_1) = e;
                                            let vec42 = t41_0;
                                            let ptr42 = vec42.as_ptr().cast::<u8>();
                                            let len42 = vec42.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len42;
                                            *base.add(0).cast::<*mut u8>() = ptr42.cast_mut();
                                            let vec43 = t41_1;
                                            let ptr43 = vec43.as_ptr().cast::<u8>();
                                            let len43 = vec43.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len43;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr43.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result44, layout44)]);
                                    (1i32, result44, len44)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                5i32,
                                ptr40.cast_mut(),
                                ::core::mem::MaybeUninit::new(len40 as i64 as u64),
                                ::core::mem::MaybeUninit::new(i64::from(result45_0) as u64),
                                result45_1,
                                ::core::mem::MaybeUninit::new(result45_2 as i64 as u64),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                        Notification::RootsListChanged(e) => {
                            let RootsListChanged { meta: meta46 } = e;
                            let (result51_0, result51_1, result51_2) = match meta46 {
                                Some(e) => {
                                    let vec50 = e;
                                    let len50 = vec50.len();
                                    let layout50 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec50.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result50 = if layout50.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout50).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout50);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec50.into_iter().enumerate() {
                                        let base = result50
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t47_0, t47_1) = e;
                                            let vec48 = t47_0;
                                            let ptr48 = vec48.as_ptr().cast::<u8>();
                                            let len48 = vec48.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len48;
                                            *base.add(0).cast::<*mut u8>() = ptr48.cast_mut();
                                            let vec49 = t47_1;
                                            let ptr49 = vec49.as_ptr().cast::<u8>();
                                            let len49 = vec49.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len49;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr49.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result50, layout50)]);
                                    (1i32, result50, len50)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                6i32,
                                result51_0 as *mut u8,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(result51_1);
                                    t
                                },
                                ::core::mem::MaybeUninit::new(result51_2 as i64 as u64),
                                ::core::ptr::null_mut(),
                                ::core::mem::MaybeUninit::<u64>::zeroed(),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                        Notification::LogMessage(e) => {
                            let LogMessage {
                                level: level52,
                                logger: logger52,
                                message: message52,
                                data: data52,
                                meta: meta52,
                            } = e;
                            let (result54_0, result54_1, result54_2) = match logger52 {
                                Some(e) => {
                                    let vec53 = e;
                                    let ptr53 = vec53.as_ptr().cast::<u8>();
                                    let len53 = vec53.len();
                                    (1i32, ptr53.cast_mut(), len53)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            let vec55 = message52;
                            let ptr55 = vec55.as_ptr().cast::<u8>();
                            let len55 = vec55.len();
                            let (result60_0, result60_1, result60_2) = match data52 {
                                Some(e) => {
                                    let vec59 = e;
                                    let len59 = vec59.len();
                                    let layout59 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec59.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result59 = if layout59.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout59).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout59);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec59.into_iter().enumerate() {
                                        let base = result59
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t56_0, t56_1) = e;
                                            let vec57 = t56_0;
                                            let ptr57 = vec57.as_ptr().cast::<u8>();
                                            let len57 = vec57.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len57;
                                            *base.add(0).cast::<*mut u8>() = ptr57.cast_mut();
                                            let vec58 = t56_1;
                                            let ptr58 = vec58.as_ptr().cast::<u8>();
                                            let len58 = vec58.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len58;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr58.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result59, layout59)]);
                                    (1i32, result59, len59)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            let (result65_0, result65_1, result65_2) = match meta52 {
                                Some(e) => {
                                    let vec64 = e;
                                    let len64 = vec64.len();
                                    let layout64 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec64.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result64 = if layout64.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout64).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout64);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec64.into_iter().enumerate() {
                                        let base = result64
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t61_0, t61_1) = e;
                                            let vec62 = t61_0;
                                            let ptr62 = vec62.as_ptr().cast::<u8>();
                                            let len62 = vec62.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len62;
                                            *base.add(0).cast::<*mut u8>() = ptr62.cast_mut();
                                            let vec63 = t61_1;
                                            let ptr63 = vec63.as_ptr().cast::<u8>();
                                            let len63 = vec63.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len63;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr63.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result64, layout64)]);
                                    (1i32, result64, len64)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                7i32,
                                level52.clone() as i32 as *mut u8,
                                ::core::mem::MaybeUninit::new(i64::from(result54_0) as u64),
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(result54_1);
                                    t
                                },
                                result54_2 as *mut u8,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(ptr55.cast_mut());
                                    t
                                },
                                len55,
                                result60_0 as *mut u8,
                                result60_1,
                                result60_2,
                                result65_0 as *mut u8,
                                result65_1,
                                result65_2,
                            )
                        }
                    };
                    let ptr67 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:mcp/notification-types@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "send-notification"]
                        fn wit_import68(
                            _: i32,
                            _: *mut u8,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: *mut u8,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: *mut u8,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import68(
                        _: i32,
                        _: *mut u8,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: *mut u8,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: usize,
                        _: *mut u8,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import68(
                            result66_0,
                            result66_1,
                            result66_2,
                            result66_3,
                            result66_4,
                            result66_5,
                            result66_6,
                            result66_7,
                            result66_8,
                            result66_9,
                            result66_10,
                            result66_11,
                            result66_12,
                            ptr67,
                        )
                    };
                    let l69 = i32::from(*ptr67.add(0).cast::<u8>());
                    let result80 = match l69 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l70 = i32::from(
                                    *ptr67.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::wasmcp::mcp::types::ErrorCode as V72;
                                let v72 = match l70 {
                                    0 => V72::ParseError,
                                    1 => V72::InvalidRequest,
                                    2 => V72::MethodNotFound,
                                    3 => V72::InvalidParams,
                                    4 => V72::InternalError,
                                    5 => V72::ResourceNotFound,
                                    6 => V72::ToolNotFound,
                                    7 => V72::PromptNotFound,
                                    8 => V72::Unauthorized,
                                    9 => V72::RateLimited,
                                    10 => V72::Timeout,
                                    11 => V72::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e72 = {
                                            let l71 = *ptr67
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l71
                                        };
                                        V72::CustomCode(e72)
                                    }
                                };
                                let l73 = *ptr67
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l74 = *ptr67
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len75 = l74;
                                let bytes75 = _rt::Vec::from_raw_parts(
                                    l73.cast(),
                                    len75,
                                    len75,
                                );
                                let l76 = i32::from(
                                    *ptr67
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::wasmcp::mcp::types::McpError {
                                    code: v72,
                                    message: _rt::string_lift(bytes75),
                                    data: match l76 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l77 = *ptr67
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l78 = *ptr67
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len79 = l78;
                                                let bytes79 = _rt::Vec::from_raw_parts(
                                                    l77.cast(),
                                                    len79,
                                                    len79,
                                                );
                                                _rt::string_lift(bytes79)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result80
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Set the minimum log level for log notifications
            pub fn set_log_level(level: LogLevel) -> Result<(), McpError> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:mcp/notification-types@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "set-log-level"]
                        fn wit_import1(_: i32, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(level.clone() as i32, ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result13 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = i32::from(
                                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::wasmcp::mcp::types::ErrorCode as V5;
                                let v5 = match l3 {
                                    0 => V5::ParseError,
                                    1 => V5::InvalidRequest,
                                    2 => V5::MethodNotFound,
                                    3 => V5::InvalidParams,
                                    4 => V5::InternalError,
                                    5 => V5::ResourceNotFound,
                                    6 => V5::ToolNotFound,
                                    7 => V5::PromptNotFound,
                                    8 => V5::Unauthorized,
                                    9 => V5::RateLimited,
                                    10 => V5::Timeout,
                                    11 => V5::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e5 = {
                                            let l4 = *ptr0
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l4
                                        };
                                        V5::CustomCode(e5)
                                    }
                                };
                                let l6 = *ptr0
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr0
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                let l9 = i32::from(
                                    *ptr0
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::wasmcp::mcp::types::McpError {
                                    code: v5,
                                    message: _rt::string_lift(bytes8),
                                    data: match l9 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l10 = *ptr0
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l11 = *ptr0
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result13
                }
            }
        }
        /// Authorization types for MCP servers
        /// These types define the authorization configuration that providers can declare
        /// and that transports use to enforce authorization
        /// Type definitions for authentication and authorization
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod authorization_types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Provider declares its authorization requirements
            /// This is returned by core-capabilities::get-auth-config()
            /// and used by the transport to enforce authorization
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ProviderAuthConfig {
                /// Expected JWT issuer (REQUIRED for auth)
                pub expected_issuer: _rt::String,
                /// Expected JWT audiences (REQUIRED for auth - must have at least one)
                pub expected_audiences: _rt::Vec<_rt::String>,
                /// JWKS URI for key discovery (REQUIRED for auth)
                pub jwks_uri: _rt::String,
                /// Optional Rego policy for authorization
                pub policy: Option<_rt::String>,
                /// Optional data for policy evaluation
                pub policy_data: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ProviderAuthConfig {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ProviderAuthConfig")
                        .field("expected-issuer", &self.expected_issuer)
                        .field("expected-audiences", &self.expected_audiences)
                        .field("jwks-uri", &self.jwks_uri)
                        .field("policy", &self.policy)
                        .field("policy-data", &self.policy_data)
                        .finish()
                }
            }
        }
        /// Core capabilities that all MCP implementations must provide
        /// These are the essential protocol functions every server needs
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod core_capabilities {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type McpError = super::super::super::wasmcp::mcp::types::McpError;
            pub type InitializeRequest = super::super::super::wasmcp::mcp::core_types::InitializeRequest;
            pub type InitializeResponse = super::super::super::wasmcp::mcp::core_types::InitializeResponse;
            pub type ProviderAuthConfig = super::super::super::wasmcp::mcp::authorization_types::ProviderAuthConfig;
            #[allow(unused_unsafe, clippy::all)]
            /// Handle session initialization
            /// Implementations should declare their capabilities here
            pub fn handle_initialize(
                request: &InitializeRequest,
            ) -> Result<InitializeResponse, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 16 + 18 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 16
                            + 18 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::wasmcp::mcp::core_types::InitializeRequest {
                        protocol_version: protocol_version1,
                        capabilities: capabilities1,
                        client_info: client_info1,
                        meta: meta1,
                    } = request;
                    *ptr0.add(0).cast::<u8>() = (protocol_version1.clone() as i32) as u8;
                    let super::super::super::wasmcp::mcp::core_types::ClientCapabilities {
                        experimental: experimental2,
                        roots: roots2,
                        sampling: sampling2,
                        elicitation: elicitation2,
                    } = capabilities1;
                    match experimental2 {
                        Some(e) => {
                            *ptr0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec6 = e;
                            let len6 = vec6.len();
                            let layout6 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec6.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result6 = if layout6.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout6);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec6.into_iter().enumerate() {
                                let base = result6
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t3_0, t3_1) = e;
                                    let vec4 = t3_0;
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                                    let vec5 = t3_1;
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                            }
                            *ptr0
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result6;
                            cleanup_list.extend_from_slice(&[(result6, layout6)]);
                        }
                        None => {
                            *ptr0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match roots2 {
                        Some(e) => {
                            *ptr0
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let super::super::super::wasmcp::mcp::core_types::RootsCapability {
                                list_changed: list_changed7,
                            } = e;
                            match list_changed7 {
                                Some(e) => {
                                    *ptr0
                                        .add(1 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(2 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                None => {
                                    *ptr0
                                        .add(1 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        None => {
                            *ptr0
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match sampling2 {
                        Some(e) => {
                            *ptr0
                                .add(3 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            *ptr0
                                .add(4 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (match e {
                                true => 1,
                                false => 0,
                            }) as u8;
                        }
                        None => {
                            *ptr0
                                .add(3 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match elicitation2 {
                        Some(e) => {
                            *ptr0
                                .add(5 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            *ptr0
                                .add(6 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (match e {
                                true => 1,
                                false => 0,
                            }) as u8;
                        }
                        None => {
                            *ptr0
                                .add(5 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let super::super::super::wasmcp::mcp::core_types::ImplementationInfo {
                        name: name8,
                        version: version8,
                        title: title8,
                    } = client_info1;
                    let vec9 = name8;
                    let ptr9 = vec9.as_ptr().cast::<u8>();
                    let len9 = vec9.len();
                    *ptr0
                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len9;
                    *ptr0
                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr9.cast_mut();
                    let vec10 = version8;
                    let ptr10 = vec10.as_ptr().cast::<u8>();
                    let len10 = vec10.len();
                    *ptr0
                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len10;
                    *ptr0
                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr10.cast_mut();
                    match title8 {
                        Some(e) => {
                            *ptr0
                                .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec11 = e;
                            let ptr11 = vec11.as_ptr().cast::<u8>();
                            let len11 = vec11.len();
                            *ptr0
                                .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len11;
                            *ptr0
                                .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr11.cast_mut();
                        }
                        None => {
                            *ptr0
                                .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match meta1 {
                        Some(e) => {
                            *ptr0
                                .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec15 = e;
                            let len15 = vec15.len();
                            let layout15 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec15.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result15 = if layout15.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout15).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout15);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec15.into_iter().enumerate() {
                                let base = result15
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t12_0, t12_1) = e;
                                    let vec13 = t12_0;
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len13;
                                    *base.add(0).cast::<*mut u8>() = ptr13.cast_mut();
                                    let vec14 = t12_1;
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr14.cast_mut();
                                }
                            }
                            *ptr0
                                .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len15;
                            *ptr0
                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result15;
                            cleanup_list.extend_from_slice(&[(result15, layout15)]);
                        }
                        None => {
                            *ptr0
                                .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let ptr16 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:mcp/core-capabilities@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "handle-initialize"]
                        fn wit_import17(_: *mut u8, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import17(_: *mut u8, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import17(ptr0, ptr16) };
                    let l18 = i32::from(*ptr16.add(0).cast::<u8>());
                    let result79 = match l18 {
                        0 => {
                            let e = {
                                let l19 = i32::from(
                                    *ptr16.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                let l20 = i32::from(
                                    *ptr16
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l30 = i32::from(
                                    *ptr16
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l32 = i32::from(
                                    *ptr16
                                        .add(2 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l34 = i32::from(
                                    *ptr16
                                        .add(4 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l37 = i32::from(
                                    *ptr16
                                        .add(7 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l42 = i32::from(
                                    *ptr16
                                        .add(12 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l45 = *ptr16
                                    .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l46 = *ptr16
                                    .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len47 = l46;
                                let bytes47 = _rt::Vec::from_raw_parts(
                                    l45.cast(),
                                    len47,
                                    len47,
                                );
                                let l48 = *ptr16
                                    .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l49 = *ptr16
                                    .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len50 = l49;
                                let bytes50 = _rt::Vec::from_raw_parts(
                                    l48.cast(),
                                    len50,
                                    len50,
                                );
                                let l51 = i32::from(
                                    *ptr16
                                        .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l55 = i32::from(
                                    *ptr16
                                        .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l59 = i32::from(
                                    *ptr16
                                        .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::wasmcp::mcp::core_types::InitializeResponse {
                                    protocol_version: super::super::super::wasmcp::mcp::core_types::ProtocolVersion::_lift(
                                        l19 as u8,
                                    ),
                                    capabilities: super::super::super::wasmcp::mcp::core_types::ServerCapabilities {
                                        experimental: match l20 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l21 = *ptr16
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l22 = *ptr16
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base29 = l21;
                                                    let len29 = l22;
                                                    let mut result29 = _rt::Vec::with_capacity(len29);
                                                    for i in 0..len29 {
                                                        let base = base29
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        let e29 = {
                                                            let l23 = *base.add(0).cast::<*mut u8>();
                                                            let l24 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len25 = l24;
                                                            let bytes25 = _rt::Vec::from_raw_parts(
                                                                l23.cast(),
                                                                len25,
                                                                len25,
                                                            );
                                                            let l26 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l27 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len28 = l27;
                                                            let bytes28 = _rt::Vec::from_raw_parts(
                                                                l26.cast(),
                                                                len28,
                                                                len28,
                                                            );
                                                            (_rt::string_lift(bytes25), _rt::string_lift(bytes28))
                                                        };
                                                        result29.push(e29);
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base29,
                                                        len29 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    result29
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        logging: match l30 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l31 = i32::from(
                                                        *ptr16
                                                            .add(1 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    _rt::bool_lift(l31 as u8)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        completions: match l32 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l33 = i32::from(
                                                        *ptr16
                                                            .add(3 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    _rt::bool_lift(l33 as u8)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        prompts: match l34 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l35 = i32::from(
                                                        *ptr16
                                                            .add(5 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::wasmcp::mcp::core_types::PromptsCapability {
                                                        list_changed: match l35 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l36 = i32::from(
                                                                        *ptr16
                                                                            .add(6 + 5 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    _rt::bool_lift(l36 as u8)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        resources: match l37 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l38 = i32::from(
                                                        *ptr16
                                                            .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l40 = i32::from(
                                                        *ptr16
                                                            .add(10 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::wasmcp::mcp::core_types::ResourcesCapability {
                                                        subscribe: match l38 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l39 = i32::from(
                                                                        *ptr16
                                                                            .add(9 + 5 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    _rt::bool_lift(l39 as u8)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        list_changed: match l40 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l41 = i32::from(
                                                                        *ptr16
                                                                            .add(11 + 5 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    _rt::bool_lift(l41 as u8)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        tools: match l42 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l43 = i32::from(
                                                        *ptr16
                                                            .add(13 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::wasmcp::mcp::core_types::ToolsCapability {
                                                        list_changed: match l43 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l44 = i32::from(
                                                                        *ptr16
                                                                            .add(14 + 5 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    _rt::bool_lift(l44 as u8)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    },
                                    server_info: super::super::super::wasmcp::mcp::core_types::ImplementationInfo {
                                        name: _rt::string_lift(bytes47),
                                        version: _rt::string_lift(bytes50),
                                        title: match l51 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l52 = *ptr16
                                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l53 = *ptr16
                                                        .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len54 = l53;
                                                    let bytes54 = _rt::Vec::from_raw_parts(
                                                        l52.cast(),
                                                        len54,
                                                        len54,
                                                    );
                                                    _rt::string_lift(bytes54)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    },
                                    instructions: match l55 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l56 = *ptr16
                                                    .add(16 + 13 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l57 = *ptr16
                                                    .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len58 = l57;
                                                let bytes58 = _rt::Vec::from_raw_parts(
                                                    l56.cast(),
                                                    len58,
                                                    len58,
                                                );
                                                _rt::string_lift(bytes58)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    meta: match l59 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l60 = *ptr16
                                                    .add(16 + 16 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l61 = *ptr16
                                                    .add(16 + 17 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base68 = l60;
                                                let len68 = l61;
                                                let mut result68 = _rt::Vec::with_capacity(len68);
                                                for i in 0..len68 {
                                                    let base = base68
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e68 = {
                                                        let l62 = *base.add(0).cast::<*mut u8>();
                                                        let l63 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len64 = l63;
                                                        let bytes64 = _rt::Vec::from_raw_parts(
                                                            l62.cast(),
                                                            len64,
                                                            len64,
                                                        );
                                                        let l65 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l66 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len67 = l66;
                                                        let bytes67 = _rt::Vec::from_raw_parts(
                                                            l65.cast(),
                                                            len67,
                                                            len67,
                                                        );
                                                        (_rt::string_lift(bytes64), _rt::string_lift(bytes67))
                                                    };
                                                    result68.push(e68);
                                                }
                                                _rt::cabi_dealloc(
                                                    base68,
                                                    len68 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result68
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l69 = i32::from(
                                    *ptr16.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::wasmcp::mcp::types::ErrorCode as V71;
                                let v71 = match l69 {
                                    0 => V71::ParseError,
                                    1 => V71::InvalidRequest,
                                    2 => V71::MethodNotFound,
                                    3 => V71::InvalidParams,
                                    4 => V71::InternalError,
                                    5 => V71::ResourceNotFound,
                                    6 => V71::ToolNotFound,
                                    7 => V71::PromptNotFound,
                                    8 => V71::Unauthorized,
                                    9 => V71::RateLimited,
                                    10 => V71::Timeout,
                                    11 => V71::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e71 = {
                                            let l70 = *ptr16
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l70
                                        };
                                        V71::CustomCode(e71)
                                    }
                                };
                                let l72 = *ptr16
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l73 = *ptr16
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len74 = l73;
                                let bytes74 = _rt::Vec::from_raw_parts(
                                    l72.cast(),
                                    len74,
                                    len74,
                                );
                                let l75 = i32::from(
                                    *ptr16
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::wasmcp::mcp::types::McpError {
                                    code: v71,
                                    message: _rt::string_lift(bytes74),
                                    data: match l75 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l76 = *ptr16
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l77 = *ptr16
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len78 = l77;
                                                let bytes78 = _rt::Vec::from_raw_parts(
                                                    l76.cast(),
                                                    len78,
                                                    len78,
                                                );
                                                _rt::string_lift(bytes78)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result79
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Handle initialization complete notification
            pub fn handle_initialized() -> Result<(), McpError> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:mcp/core-capabilities@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "handle-initialized"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result13 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = i32::from(
                                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::wasmcp::mcp::types::ErrorCode as V5;
                                let v5 = match l3 {
                                    0 => V5::ParseError,
                                    1 => V5::InvalidRequest,
                                    2 => V5::MethodNotFound,
                                    3 => V5::InvalidParams,
                                    4 => V5::InternalError,
                                    5 => V5::ResourceNotFound,
                                    6 => V5::ToolNotFound,
                                    7 => V5::PromptNotFound,
                                    8 => V5::Unauthorized,
                                    9 => V5::RateLimited,
                                    10 => V5::Timeout,
                                    11 => V5::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e5 = {
                                            let l4 = *ptr0
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l4
                                        };
                                        V5::CustomCode(e5)
                                    }
                                };
                                let l6 = *ptr0
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr0
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                let l9 = i32::from(
                                    *ptr0
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::wasmcp::mcp::types::McpError {
                                    code: v5,
                                    message: _rt::string_lift(bytes8),
                                    data: match l9 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l10 = *ptr0
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l11 = *ptr0
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result13
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Handle ping request for keepalive
            pub fn handle_ping() -> Result<(), McpError> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:mcp/core-capabilities@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "handle-ping"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result13 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = i32::from(
                                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::wasmcp::mcp::types::ErrorCode as V5;
                                let v5 = match l3 {
                                    0 => V5::ParseError,
                                    1 => V5::InvalidRequest,
                                    2 => V5::MethodNotFound,
                                    3 => V5::InvalidParams,
                                    4 => V5::InternalError,
                                    5 => V5::ResourceNotFound,
                                    6 => V5::ToolNotFound,
                                    7 => V5::PromptNotFound,
                                    8 => V5::Unauthorized,
                                    9 => V5::RateLimited,
                                    10 => V5::Timeout,
                                    11 => V5::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e5 = {
                                            let l4 = *ptr0
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l4
                                        };
                                        V5::CustomCode(e5)
                                    }
                                };
                                let l6 = *ptr0
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr0
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                let l9 = i32::from(
                                    *ptr0
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::wasmcp::mcp::types::McpError {
                                    code: v5,
                                    message: _rt::string_lift(bytes8),
                                    data: match l9 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l10 = *ptr0
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l11 = *ptr0
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result13
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Handle shutdown request
            pub fn handle_shutdown() -> Result<(), McpError> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:mcp/core-capabilities@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "handle-shutdown"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result13 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = i32::from(
                                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::wasmcp::mcp::types::ErrorCode as V5;
                                let v5 = match l3 {
                                    0 => V5::ParseError,
                                    1 => V5::InvalidRequest,
                                    2 => V5::MethodNotFound,
                                    3 => V5::InvalidParams,
                                    4 => V5::InternalError,
                                    5 => V5::ResourceNotFound,
                                    6 => V5::ToolNotFound,
                                    7 => V5::PromptNotFound,
                                    8 => V5::Unauthorized,
                                    9 => V5::RateLimited,
                                    10 => V5::Timeout,
                                    11 => V5::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e5 = {
                                            let l4 = *ptr0
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l4
                                        };
                                        V5::CustomCode(e5)
                                    }
                                };
                                let l6 = *ptr0
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr0
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                let l9 = i32::from(
                                    *ptr0
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::wasmcp::mcp::types::McpError {
                                    code: v5,
                                    message: _rt::string_lift(bytes8),
                                    data: match l9 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l10 = *ptr0
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l11 = *ptr0
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result13
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get provider's auth configuration (optional - return none for no auth)
            /// If auth configuration is provided, the transport will enforce authorization
            pub fn get_auth_config() -> Option<ProviderAuthConfig> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 13 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 13
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:mcp/core-capabilities@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "get-auth-config"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result23 = match l2 {
                        0 => None,
                        1 => {
                            let e = {
                                let l3 = *ptr0
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l4 = *ptr0
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(
                                    l3.cast(),
                                    len5,
                                    len5,
                                );
                                let l6 = *ptr0
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr0
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base11 = l6;
                                let len11 = l7;
                                let mut result11 = _rt::Vec::with_capacity(len11);
                                for i in 0..len11 {
                                    let base = base11
                                        .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                    let e11 = {
                                        let l8 = *base.add(0).cast::<*mut u8>();
                                        let l9 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len10 = l9;
                                        let bytes10 = _rt::Vec::from_raw_parts(
                                            l8.cast(),
                                            len10,
                                            len10,
                                        );
                                        _rt::string_lift(bytes10)
                                    };
                                    result11.push(e11);
                                }
                                _rt::cabi_dealloc(
                                    base11,
                                    len11 * (2 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l12 = *ptr0
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l13 = *ptr0
                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len14 = l13;
                                let bytes14 = _rt::Vec::from_raw_parts(
                                    l12.cast(),
                                    len14,
                                    len14,
                                );
                                let l15 = i32::from(
                                    *ptr0
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l19 = i32::from(
                                    *ptr0
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::wasmcp::mcp::authorization_types::ProviderAuthConfig {
                                    expected_issuer: _rt::string_lift(bytes5),
                                    expected_audiences: result11,
                                    jwks_uri: _rt::string_lift(bytes14),
                                    policy: match l15 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l16 = *ptr0
                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l17 = *ptr0
                                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len18 = l17;
                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                    l16.cast(),
                                                    len18,
                                                    len18,
                                                );
                                                _rt::string_lift(bytes18)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    policy_data: match l19 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l20 = *ptr0
                                                    .add(11 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l21 = *ptr0
                                                    .add(12 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len22 = l21;
                                                let bytes22 = _rt::Vec::from_raw_parts(
                                                    l20.cast(),
                                                    len22,
                                                    len22,
                                                );
                                                _rt::string_lift(bytes22)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result23
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get cached JWKS for a given URI (optional - return none if not cached or not implemented)
            /// Allows providers to implement JWKS caching via WASI-KV or other persistence mechanisms
            /// The transport will call this before fetching from jwks-uri to check for cached keys
            pub fn jwks_cache_get(jwks_uri: &str) -> Option<_rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = jwks_uri;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:mcp/core-capabilities@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "jwks-cache-get"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result7 = match l3 {
                        0 => None,
                        1 => {
                            let e = {
                                let l4 = *ptr1
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l5 = *ptr1
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                _rt::string_lift(bytes6)
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result7
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Cache JWKS for a given URI (optional - no-op if caching not implemented)
            /// The transport calls this after successfully fetching JWKS from jwks-uri
            /// Providers can implement caching via WASI-KV or other persistence mechanisms
            /// The jwks parameter contains the raw JWKS JSON string to cache
            pub fn jwks_cache_set(jwks_uri: &str, jwks: &str) -> () {
                unsafe {
                    let vec0 = jwks_uri;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = jwks;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:mcp/core-capabilities@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "jwks-cache-set"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8, _: usize);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1) };
                }
            }
        }
        /// Tool types and capabilities for MCP
        /// Type definitions for tools
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod tool_types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type ContentBlock = super::super::super::wasmcp::mcp::types::ContentBlock;
            pub type JsonValue = super::super::super::wasmcp::mcp::types::JsonValue;
            pub type JsonSchema = super::super::super::wasmcp::mcp::types::JsonSchema;
            pub type BaseMetadata = super::super::super::wasmcp::mcp::types::BaseMetadata;
            pub type MetaFields = super::super::super::wasmcp::mcp::types::MetaFields;
            pub type Cursor = super::super::super::wasmcp::mcp::types::Cursor;
            pub type ProgressToken = super::super::super::wasmcp::mcp::types::ProgressToken;
            /// Behavioral hints about tool operations
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ToolAnnotations {
                /// Human-readable title for display
                pub title: Option<_rt::String>,
                /// Tool does not modify environment
                pub read_only_hint: Option<bool>,
                /// Tool may perform destructive updates (meaningful when not read-only)
                pub destructive_hint: Option<bool>,
                /// Repeated calls with same args have no additional effect
                pub idempotent_hint: Option<bool>,
                /// Tool interacts with external entities
                pub open_world_hint: Option<bool>,
            }
            impl ::core::fmt::Debug for ToolAnnotations {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolAnnotations")
                        .field("title", &self.title)
                        .field("read-only-hint", &self.read_only_hint)
                        .field("destructive-hint", &self.destructive_hint)
                        .field("idempotent-hint", &self.idempotent_hint)
                        .field("open-world-hint", &self.open_world_hint)
                        .finish()
                }
            }
            /// Tool definition with metadata and schema
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct Tool {
                /// Base metadata (name and optional title)
                pub base: BaseMetadata,
                /// Human-readable description of what the tool does
                pub description: Option<_rt::String>,
                /// JSON Schema for input parameters
                pub input_schema: JsonSchema,
                /// Optional schema for structured output
                pub output_schema: Option<JsonSchema>,
                /// Behavioral hints for clients
                pub annotations: Option<ToolAnnotations>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for Tool {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Tool")
                        .field("base", &self.base)
                        .field("description", &self.description)
                        .field("input-schema", &self.input_schema)
                        .field("output-schema", &self.output_schema)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Result from executing a tool
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ToolResult {
                /// Unstructured content blocks (text, images, etc.)
                pub content: _rt::Vec<ContentBlock>,
                /// Optional structured JSON output
                pub structured_content: Option<JsonValue>,
                /// Whether the tool execution resulted in an error
                /// If true, content should contain error details
                pub is_error: Option<bool>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ToolResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolResult")
                        .field("content", &self.content)
                        .field("structured-content", &self.structured_content)
                        .field("is-error", &self.is_error)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Request to list available tools
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ListToolsRequest {
                /// Pagination cursor from previous response
                pub cursor: Option<Cursor>,
                /// Optional progress tracking token
                pub progress_token: Option<ProgressToken>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ListToolsRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListToolsRequest")
                        .field("cursor", &self.cursor)
                        .field("progress-token", &self.progress_token)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Response with list of available tools
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ListToolsResponse {
                /// Available tools
                pub tools: _rt::Vec<Tool>,
                /// Cursor for next page if more tools exist
                pub next_cursor: Option<Cursor>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ListToolsResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListToolsResponse")
                        .field("tools", &self.tools)
                        .field("next-cursor", &self.next_cursor)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Request to execute a tool
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct CallToolRequest {
                /// Name of the tool to execute
                pub name: _rt::String,
                /// Arguments as JSON object
                pub arguments: Option<JsonValue>,
                /// Optional progress tracking token
                pub progress_token: Option<ProgressToken>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for CallToolRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CallToolRequest")
                        .field("name", &self.name)
                        .field("arguments", &self.arguments)
                        .field("progress-token", &self.progress_token)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
        }
        /// Tool capabilities - implement this to provide tools
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod tools_capabilities {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type McpError = super::super::super::wasmcp::mcp::types::McpError;
            pub type ListToolsRequest = super::super::super::wasmcp::mcp::tool_types::ListToolsRequest;
            pub type ListToolsResponse = super::super::super::wasmcp::mcp::tool_types::ListToolsResponse;
            pub type CallToolRequest = super::super::super::wasmcp::mcp::tool_types::CallToolRequest;
            pub type ToolResult = super::super::super::wasmcp::mcp::tool_types::ToolResult;
            #[allow(unused_unsafe, clippy::all)]
            /// List available tools
            pub fn handle_list_tools(
                request: &ListToolsRequest,
            ) -> Result<ListToolsResponse, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 9 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 9
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::wasmcp::mcp::tool_types::ListToolsRequest {
                        cursor: cursor0,
                        progress_token: progress_token0,
                        meta: meta0,
                    } = request;
                    let (result2_0, result2_1, result2_2) = match cursor0 {
                        Some(e) => {
                            let vec1 = e;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            (1i32, ptr1.cast_mut(), len1)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result4_0, result4_1, result4_2) = match progress_token0 {
                        Some(e) => {
                            let vec3 = e;
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            (1i32, ptr3.cast_mut(), len3)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result9_0, result9_1, result9_2) = match meta0 {
                        Some(e) => {
                            let vec8 = e;
                            let len8 = vec8.len();
                            let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec8.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result8 = if layout8.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout8);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec8.into_iter().enumerate() {
                                let base = result8
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t5_0, t5_1) = e;
                                    let vec6 = t5_0;
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                                    let vec7 = t5_1;
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr7.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result8, layout8)]);
                            (1i32, result8, len8)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr10 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:mcp/tools-capabilities@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "handle-list-tools"]
                        fn wit_import11(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import11(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import11(
                            result2_0,
                            result2_1,
                            result2_2,
                            result4_0,
                            result4_1,
                            result4_2,
                            result9_0,
                            result9_1,
                            result9_2,
                            ptr10,
                        )
                    };
                    let l12 = i32::from(*ptr10.add(0).cast::<u8>());
                    let result81 = match l12 {
                        0 => {
                            let e = {
                                let l13 = *ptr10
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l14 = *ptr10
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base56 = l13;
                                let len56 = l14;
                                let mut result56 = _rt::Vec::with_capacity(len56);
                                for i in 0..len56 {
                                    let base = base56
                                        .add(i * (8 + 20 * ::core::mem::size_of::<*const u8>()));
                                    let e56 = {
                                        let l15 = *base.add(0).cast::<*mut u8>();
                                        let l16 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len17 = l16;
                                        let bytes17 = _rt::Vec::from_raw_parts(
                                            l15.cast(),
                                            len17,
                                            len17,
                                        );
                                        let l18 = i32::from(
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l22 = i32::from(
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l26 = *base
                                            .add(8 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l27 = *base
                                            .add(9 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len28 = l27;
                                        let bytes28 = _rt::Vec::from_raw_parts(
                                            l26.cast(),
                                            len28,
                                            len28,
                                        );
                                        let l29 = i32::from(
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l33 = i32::from(
                                            *base
                                                .add(13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l46 = i32::from(
                                            *base
                                                .add(8 + 17 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        super::super::super::wasmcp::mcp::tool_types::Tool {
                                            base: super::super::super::wasmcp::mcp::types::BaseMetadata {
                                                name: _rt::string_lift(bytes17),
                                                title: match l18 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l19 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l20 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len21 = l20;
                                                            let bytes21 = _rt::Vec::from_raw_parts(
                                                                l19.cast(),
                                                                len21,
                                                                len21,
                                                            );
                                                            _rt::string_lift(bytes21)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            },
                                            description: match l22 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l23 = *base
                                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l24 = *base
                                                            .add(7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len25 = l24;
                                                        let bytes25 = _rt::Vec::from_raw_parts(
                                                            l23.cast(),
                                                            len25,
                                                            len25,
                                                        );
                                                        _rt::string_lift(bytes25)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            input_schema: _rt::string_lift(bytes28),
                                            output_schema: match l29 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l30 = *base
                                                            .add(11 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l31 = *base
                                                            .add(12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len32 = l31;
                                                        let bytes32 = _rt::Vec::from_raw_parts(
                                                            l30.cast(),
                                                            len32,
                                                            len32,
                                                        );
                                                        _rt::string_lift(bytes32)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            annotations: match l33 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l34 = i32::from(
                                                            *base
                                                                .add(14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l38 = i32::from(
                                                            *base
                                                                .add(17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l40 = i32::from(
                                                            *base
                                                                .add(2 + 17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l42 = i32::from(
                                                            *base
                                                                .add(4 + 17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l44 = i32::from(
                                                            *base
                                                                .add(6 + 17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        super::super::super::wasmcp::mcp::tool_types::ToolAnnotations {
                                                            title: match l34 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l35 = *base
                                                                            .add(15 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l36 = *base
                                                                            .add(16 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len37 = l36;
                                                                        let bytes37 = _rt::Vec::from_raw_parts(
                                                                            l35.cast(),
                                                                            len37,
                                                                            len37,
                                                                        );
                                                                        _rt::string_lift(bytes37)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            read_only_hint: match l38 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l39 = i32::from(
                                                                            *base
                                                                                .add(1 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l39 as u8)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            destructive_hint: match l40 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l41 = i32::from(
                                                                            *base
                                                                                .add(3 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l41 as u8)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            idempotent_hint: match l42 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l43 = i32::from(
                                                                            *base
                                                                                .add(5 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l43 as u8)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            open_world_hint: match l44 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l45 = i32::from(
                                                                            *base
                                                                                .add(7 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l45 as u8)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            meta: match l46 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l47 = *base
                                                            .add(8 + 18 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l48 = *base
                                                            .add(8 + 19 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base55 = l47;
                                                        let len55 = l48;
                                                        let mut result55 = _rt::Vec::with_capacity(len55);
                                                        for i in 0..len55 {
                                                            let base = base55
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e55 = {
                                                                let l49 = *base.add(0).cast::<*mut u8>();
                                                                let l50 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len51 = l50;
                                                                let bytes51 = _rt::Vec::from_raw_parts(
                                                                    l49.cast(),
                                                                    len51,
                                                                    len51,
                                                                );
                                                                let l52 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l53 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len54 = l53;
                                                                let bytes54 = _rt::Vec::from_raw_parts(
                                                                    l52.cast(),
                                                                    len54,
                                                                    len54,
                                                                );
                                                                (_rt::string_lift(bytes51), _rt::string_lift(bytes54))
                                                            };
                                                            result55.push(e55);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base55,
                                                            len55 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        result55
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    result56.push(e56);
                                }
                                _rt::cabi_dealloc(
                                    base56,
                                    len56 * (8 + 20 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l57 = i32::from(
                                    *ptr10
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l61 = i32::from(
                                    *ptr10
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::wasmcp::mcp::tool_types::ListToolsResponse {
                                    tools: result56,
                                    next_cursor: match l57 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l58 = *ptr10
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l59 = *ptr10
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len60 = l59;
                                                let bytes60 = _rt::Vec::from_raw_parts(
                                                    l58.cast(),
                                                    len60,
                                                    len60,
                                                );
                                                _rt::string_lift(bytes60)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    meta: match l61 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l62 = *ptr10
                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l63 = *ptr10
                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base70 = l62;
                                                let len70 = l63;
                                                let mut result70 = _rt::Vec::with_capacity(len70);
                                                for i in 0..len70 {
                                                    let base = base70
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e70 = {
                                                        let l64 = *base.add(0).cast::<*mut u8>();
                                                        let l65 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len66 = l65;
                                                        let bytes66 = _rt::Vec::from_raw_parts(
                                                            l64.cast(),
                                                            len66,
                                                            len66,
                                                        );
                                                        let l67 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l68 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len69 = l68;
                                                        let bytes69 = _rt::Vec::from_raw_parts(
                                                            l67.cast(),
                                                            len69,
                                                            len69,
                                                        );
                                                        (_rt::string_lift(bytes66), _rt::string_lift(bytes69))
                                                    };
                                                    result70.push(e70);
                                                }
                                                _rt::cabi_dealloc(
                                                    base70,
                                                    len70 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result70
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l71 = i32::from(
                                    *ptr10.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::wasmcp::mcp::types::ErrorCode as V73;
                                let v73 = match l71 {
                                    0 => V73::ParseError,
                                    1 => V73::InvalidRequest,
                                    2 => V73::MethodNotFound,
                                    3 => V73::InvalidParams,
                                    4 => V73::InternalError,
                                    5 => V73::ResourceNotFound,
                                    6 => V73::ToolNotFound,
                                    7 => V73::PromptNotFound,
                                    8 => V73::Unauthorized,
                                    9 => V73::RateLimited,
                                    10 => V73::Timeout,
                                    11 => V73::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e73 = {
                                            let l72 = *ptr10
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l72
                                        };
                                        V73::CustomCode(e73)
                                    }
                                };
                                let l74 = *ptr10
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l75 = *ptr10
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len76 = l75;
                                let bytes76 = _rt::Vec::from_raw_parts(
                                    l74.cast(),
                                    len76,
                                    len76,
                                );
                                let l77 = i32::from(
                                    *ptr10
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::wasmcp::mcp::types::McpError {
                                    code: v73,
                                    message: _rt::string_lift(bytes76),
                                    data: match l77 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l78 = *ptr10
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l79 = *ptr10
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len80 = l79;
                                                let bytes80 = _rt::Vec::from_raw_parts(
                                                    l78.cast(),
                                                    len80,
                                                    len80,
                                                );
                                                _rt::string_lift(bytes80)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result81
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Execute a tool
            pub fn handle_call_tool(
                request: &CallToolRequest,
            ) -> Result<ToolResult, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 10 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 10
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::wasmcp::mcp::tool_types::CallToolRequest {
                        name: name0,
                        arguments: arguments0,
                        progress_token: progress_token0,
                        meta: meta0,
                    } = request;
                    let vec1 = name0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let (result3_0, result3_1, result3_2) = match arguments0 {
                        Some(e) => {
                            let vec2 = e;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            (1i32, ptr2.cast_mut(), len2)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result5_0, result5_1, result5_2) = match progress_token0 {
                        Some(e) => {
                            let vec4 = e;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            (1i32, ptr4.cast_mut(), len4)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result10_0, result10_1, result10_2) = match meta0 {
                        Some(e) => {
                            let vec9 = e;
                            let len9 = vec9.len();
                            let layout9 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec9.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result9 = if layout9.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout9).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout9);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec9.into_iter().enumerate() {
                                let base = result9
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t6_0, t6_1) = e;
                                    let vec7 = t6_0;
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *base.add(0).cast::<*mut u8>() = ptr7.cast_mut();
                                    let vec8 = t6_1;
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr8.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result9, layout9)]);
                            (1i32, result9, len9)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr11 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:mcp/tools-capabilities@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "handle-call-tool"]
                        fn wit_import12(
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import12(
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import12(
                            ptr1.cast_mut(),
                            len1,
                            result3_0,
                            result3_1,
                            result3_2,
                            result5_0,
                            result5_1,
                            result5_2,
                            result10_0,
                            result10_1,
                            result10_2,
                            ptr11,
                        )
                    };
                    let l13 = i32::from(*ptr11.add(0).cast::<u8>());
                    let result232 = match l13 {
                        0 => {
                            let e = {
                                let l14 = *ptr11
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l15 = *ptr11
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base205 = l14;
                                let len205 = l15;
                                let mut result205 = _rt::Vec::with_capacity(len205);
                                for i in 0..len205 {
                                    let base = base205
                                        .add(i * (80 + 18 * ::core::mem::size_of::<*const u8>()));
                                    let e205 = {
                                        let l16 = i32::from(*base.add(0).cast::<u8>());
                                        use super::super::super::wasmcp::mcp::types::ContentBlock as V204;
                                        let v204 = match l16 {
                                            0 => {
                                                let e204 = {
                                                    let l17 = *base.add(8).cast::<*mut u8>();
                                                    let l18 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len19 = l18;
                                                    let bytes19 = _rt::Vec::from_raw_parts(
                                                        l17.cast(),
                                                        len19,
                                                        len19,
                                                    );
                                                    let l20 = i32::from(
                                                        *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l32 = i32::from(
                                                        *base
                                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::wasmcp::mcp::types::TextContent {
                                                        text: _rt::string_lift(bytes19),
                                                        annotations: match l20 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l21 = i32::from(
                                                                        *base
                                                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l26 = i32::from(
                                                                        *base
                                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l28 = i32::from(
                                                                        *base
                                                                            .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::wasmcp::mcp::types::Annotations {
                                                                        audience: match l21 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l22 = *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l23 = *base
                                                                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base25 = l22;
                                                                                    let len25 = l23;
                                                                                    let mut result25 = _rt::Vec::with_capacity(len25);
                                                                                    for i in 0..len25 {
                                                                                        let base = base25.add(i * 1);
                                                                                        let e25 = {
                                                                                            let l24 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::wasmcp::mcp::types::Role::_lift(
                                                                                                l24 as u8,
                                                                                            )
                                                                                        };
                                                                                        result25.push(e25);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base25, len25 * 1, 1);
                                                                                    result25
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l26 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l27 = *base
                                                                                        .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l27
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l28 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l29 = *base
                                                                                        .add(40 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l30 = *base
                                                                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len31 = l30;
                                                                                    let bytes31 = _rt::Vec::from_raw_parts(
                                                                                        l29.cast(),
                                                                                        len31,
                                                                                        len31,
                                                                                    );
                                                                                    _rt::string_lift(bytes31)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l32 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l33 = *base
                                                                        .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l34 = *base
                                                                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base41 = l33;
                                                                    let len41 = l34;
                                                                    let mut result41 = _rt::Vec::with_capacity(len41);
                                                                    for i in 0..len41 {
                                                                        let base = base41
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e41 = {
                                                                            let l35 = *base.add(0).cast::<*mut u8>();
                                                                            let l36 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len37 = l36;
                                                                            let bytes37 = _rt::Vec::from_raw_parts(
                                                                                l35.cast(),
                                                                                len37,
                                                                                len37,
                                                                            );
                                                                            let l38 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l39 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len40 = l39;
                                                                            let bytes40 = _rt::Vec::from_raw_parts(
                                                                                l38.cast(),
                                                                                len40,
                                                                                len40,
                                                                            );
                                                                            (_rt::string_lift(bytes37), _rt::string_lift(bytes40))
                                                                        };
                                                                        result41.push(e41);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base41,
                                                                        len41 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result41
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V204::Text(e204)
                                            }
                                            1 => {
                                                let e204 = {
                                                    let l42 = *base.add(8).cast::<*mut u8>();
                                                    let l43 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len44 = l43;
                                                    let l45 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l46 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len47 = l46;
                                                    let bytes47 = _rt::Vec::from_raw_parts(
                                                        l45.cast(),
                                                        len47,
                                                        len47,
                                                    );
                                                    let l48 = i32::from(
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l60 = i32::from(
                                                        *base
                                                            .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::wasmcp::mcp::types::ImageContent {
                                                        data: _rt::Vec::from_raw_parts(l42.cast(), len44, len44),
                                                        mime_type: _rt::string_lift(bytes47),
                                                        annotations: match l48 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l49 = i32::from(
                                                                        *base
                                                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l54 = i32::from(
                                                                        *base
                                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l56 = i32::from(
                                                                        *base
                                                                            .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::wasmcp::mcp::types::Annotations {
                                                                        audience: match l49 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l50 = *base
                                                                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l51 = *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base53 = l50;
                                                                                    let len53 = l51;
                                                                                    let mut result53 = _rt::Vec::with_capacity(len53);
                                                                                    for i in 0..len53 {
                                                                                        let base = base53.add(i * 1);
                                                                                        let e53 = {
                                                                                            let l52 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::wasmcp::mcp::types::Role::_lift(
                                                                                                l52 as u8,
                                                                                            )
                                                                                        };
                                                                                        result53.push(e53);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base53, len53 * 1, 1);
                                                                                    result53
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l54 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l55 = *base
                                                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l55
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l56 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l57 = *base
                                                                                        .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l58 = *base
                                                                                        .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len59 = l58;
                                                                                    let bytes59 = _rt::Vec::from_raw_parts(
                                                                                        l57.cast(),
                                                                                        len59,
                                                                                        len59,
                                                                                    );
                                                                                    _rt::string_lift(bytes59)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l60 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l61 = *base
                                                                        .add(48 + 9 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l62 = *base
                                                                        .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base69 = l61;
                                                                    let len69 = l62;
                                                                    let mut result69 = _rt::Vec::with_capacity(len69);
                                                                    for i in 0..len69 {
                                                                        let base = base69
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e69 = {
                                                                            let l63 = *base.add(0).cast::<*mut u8>();
                                                                            let l64 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len65 = l64;
                                                                            let bytes65 = _rt::Vec::from_raw_parts(
                                                                                l63.cast(),
                                                                                len65,
                                                                                len65,
                                                                            );
                                                                            let l66 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l67 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len68 = l67;
                                                                            let bytes68 = _rt::Vec::from_raw_parts(
                                                                                l66.cast(),
                                                                                len68,
                                                                                len68,
                                                                            );
                                                                            (_rt::string_lift(bytes65), _rt::string_lift(bytes68))
                                                                        };
                                                                        result69.push(e69);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base69,
                                                                        len69 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result69
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V204::Image(e204)
                                            }
                                            2 => {
                                                let e204 = {
                                                    let l70 = *base.add(8).cast::<*mut u8>();
                                                    let l71 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len72 = l71;
                                                    let l73 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l74 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len75 = l74;
                                                    let bytes75 = _rt::Vec::from_raw_parts(
                                                        l73.cast(),
                                                        len75,
                                                        len75,
                                                    );
                                                    let l76 = i32::from(
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l88 = i32::from(
                                                        *base
                                                            .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::wasmcp::mcp::types::AudioContent {
                                                        data: _rt::Vec::from_raw_parts(l70.cast(), len72, len72),
                                                        mime_type: _rt::string_lift(bytes75),
                                                        annotations: match l76 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l77 = i32::from(
                                                                        *base
                                                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l82 = i32::from(
                                                                        *base
                                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l84 = i32::from(
                                                                        *base
                                                                            .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::wasmcp::mcp::types::Annotations {
                                                                        audience: match l77 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l78 = *base
                                                                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l79 = *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base81 = l78;
                                                                                    let len81 = l79;
                                                                                    let mut result81 = _rt::Vec::with_capacity(len81);
                                                                                    for i in 0..len81 {
                                                                                        let base = base81.add(i * 1);
                                                                                        let e81 = {
                                                                                            let l80 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::wasmcp::mcp::types::Role::_lift(
                                                                                                l80 as u8,
                                                                                            )
                                                                                        };
                                                                                        result81.push(e81);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base81, len81 * 1, 1);
                                                                                    result81
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l82 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l83 = *base
                                                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l83
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l84 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l85 = *base
                                                                                        .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l86 = *base
                                                                                        .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len87 = l86;
                                                                                    let bytes87 = _rt::Vec::from_raw_parts(
                                                                                        l85.cast(),
                                                                                        len87,
                                                                                        len87,
                                                                                    );
                                                                                    _rt::string_lift(bytes87)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l88 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l89 = *base
                                                                        .add(48 + 9 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l90 = *base
                                                                        .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base97 = l89;
                                                                    let len97 = l90;
                                                                    let mut result97 = _rt::Vec::with_capacity(len97);
                                                                    for i in 0..len97 {
                                                                        let base = base97
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e97 = {
                                                                            let l91 = *base.add(0).cast::<*mut u8>();
                                                                            let l92 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len93 = l92;
                                                                            let bytes93 = _rt::Vec::from_raw_parts(
                                                                                l91.cast(),
                                                                                len93,
                                                                                len93,
                                                                            );
                                                                            let l94 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l95 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len96 = l95;
                                                                            let bytes96 = _rt::Vec::from_raw_parts(
                                                                                l94.cast(),
                                                                                len96,
                                                                                len96,
                                                                            );
                                                                            (_rt::string_lift(bytes93), _rt::string_lift(bytes96))
                                                                        };
                                                                        result97.push(e97);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base97,
                                                                        len97 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result97
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V204::Audio(e204)
                                            }
                                            3 => {
                                                let e204 = {
                                                    let l98 = *base.add(8).cast::<*mut u8>();
                                                    let l99 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len100 = l99;
                                                    let bytes100 = _rt::Vec::from_raw_parts(
                                                        l98.cast(),
                                                        len100,
                                                        len100,
                                                    );
                                                    let l101 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l102 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len103 = l102;
                                                    let bytes103 = _rt::Vec::from_raw_parts(
                                                        l101.cast(),
                                                        len103,
                                                        len103,
                                                    );
                                                    let l104 = i32::from(
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l108 = i32::from(
                                                        *base
                                                            .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l112 = i32::from(
                                                        *base
                                                            .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l116 = i32::from(
                                                        *base
                                                            .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l118 = i32::from(
                                                        *base
                                                            .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l130 = i32::from(
                                                        *base
                                                            .add(72 + 16 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::wasmcp::mcp::types::ResourceLink {
                                                        uri: _rt::string_lift(bytes100),
                                                        name: _rt::string_lift(bytes103),
                                                        title: match l104 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l105 = *base
                                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l106 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len107 = l106;
                                                                    let bytes107 = _rt::Vec::from_raw_parts(
                                                                        l105.cast(),
                                                                        len107,
                                                                        len107,
                                                                    );
                                                                    _rt::string_lift(bytes107)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        description: match l108 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l109 = *base
                                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l110 = *base
                                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len111 = l110;
                                                                    let bytes111 = _rt::Vec::from_raw_parts(
                                                                        l109.cast(),
                                                                        len111,
                                                                        len111,
                                                                    );
                                                                    _rt::string_lift(bytes111)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        mime_type: match l112 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l113 = *base
                                                                        .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l114 = *base
                                                                        .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len115 = l114;
                                                                    let bytes115 = _rt::Vec::from_raw_parts(
                                                                        l113.cast(),
                                                                        len115,
                                                                        len115,
                                                                    );
                                                                    _rt::string_lift(bytes115)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        size: match l116 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l117 = *base
                                                                        .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>();
                                                                    l117 as u64
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        annotations: match l118 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l119 = i32::from(
                                                                        *base
                                                                            .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l124 = i32::from(
                                                                        *base
                                                                            .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l126 = i32::from(
                                                                        *base
                                                                            .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::wasmcp::mcp::types::Annotations {
                                                                        audience: match l119 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l120 = *base
                                                                                        .add(40 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l121 = *base
                                                                                        .add(40 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base123 = l120;
                                                                                    let len123 = l121;
                                                                                    let mut result123 = _rt::Vec::with_capacity(len123);
                                                                                    for i in 0..len123 {
                                                                                        let base = base123.add(i * 1);
                                                                                        let e123 = {
                                                                                            let l122 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::wasmcp::mcp::types::Role::_lift(
                                                                                                l122 as u8,
                                                                                            )
                                                                                        };
                                                                                        result123.push(e123);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base123, len123 * 1, 1);
                                                                                    result123
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l124 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l125 = *base
                                                                                        .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l125
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l126 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l127 = *base
                                                                                        .add(64 + 15 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l128 = *base
                                                                                        .add(64 + 16 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len129 = l128;
                                                                                    let bytes129 = _rt::Vec::from_raw_parts(
                                                                                        l127.cast(),
                                                                                        len129,
                                                                                        len129,
                                                                                    );
                                                                                    _rt::string_lift(bytes129)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l130 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l131 = *base
                                                                        .add(72 + 17 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l132 = *base
                                                                        .add(72 + 18 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base139 = l131;
                                                                    let len139 = l132;
                                                                    let mut result139 = _rt::Vec::with_capacity(len139);
                                                                    for i in 0..len139 {
                                                                        let base = base139
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e139 = {
                                                                            let l133 = *base.add(0).cast::<*mut u8>();
                                                                            let l134 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len135 = l134;
                                                                            let bytes135 = _rt::Vec::from_raw_parts(
                                                                                l133.cast(),
                                                                                len135,
                                                                                len135,
                                                                            );
                                                                            let l136 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l137 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len138 = l137;
                                                                            let bytes138 = _rt::Vec::from_raw_parts(
                                                                                l136.cast(),
                                                                                len138,
                                                                                len138,
                                                                            );
                                                                            (_rt::string_lift(bytes135), _rt::string_lift(bytes138))
                                                                        };
                                                                        result139.push(e139);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base139,
                                                                        len139 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result139
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V204::ResourceLink(e204)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 4, "invalid enum discriminant");
                                                let e204 = {
                                                    let l140 = i32::from(*base.add(8).cast::<u8>());
                                                    use super::super::super::wasmcp::mcp::types::ResourceContents as V181;
                                                    let v181 = match l140 {
                                                        0 => {
                                                            let e181 = {
                                                                let l141 = *base
                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l142 = *base
                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len143 = l142;
                                                                let bytes143 = _rt::Vec::from_raw_parts(
                                                                    l141.cast(),
                                                                    len143,
                                                                    len143,
                                                                );
                                                                let l144 = i32::from(
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l148 = *base
                                                                    .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l149 = *base
                                                                    .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len150 = l149;
                                                                let bytes150 = _rt::Vec::from_raw_parts(
                                                                    l148.cast(),
                                                                    len150,
                                                                    len150,
                                                                );
                                                                let l151 = i32::from(
                                                                    *base
                                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::wasmcp::mcp::types::TextResourceContents {
                                                                    uri: _rt::string_lift(bytes143),
                                                                    mime_type: match l144 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l145 = *base
                                                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l146 = *base
                                                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len147 = l146;
                                                                                let bytes147 = _rt::Vec::from_raw_parts(
                                                                                    l145.cast(),
                                                                                    len147,
                                                                                    len147,
                                                                                );
                                                                                _rt::string_lift(bytes147)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    text: _rt::string_lift(bytes150),
                                                                    meta: match l151 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l152 = *base
                                                                                    .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l153 = *base
                                                                                    .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let base160 = l152;
                                                                                let len160 = l153;
                                                                                let mut result160 = _rt::Vec::with_capacity(len160);
                                                                                for i in 0..len160 {
                                                                                    let base = base160
                                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                                    let e160 = {
                                                                                        let l154 = *base.add(0).cast::<*mut u8>();
                                                                                        let l155 = *base
                                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len156 = l155;
                                                                                        let bytes156 = _rt::Vec::from_raw_parts(
                                                                                            l154.cast(),
                                                                                            len156,
                                                                                            len156,
                                                                                        );
                                                                                        let l157 = *base
                                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<*mut u8>();
                                                                                        let l158 = *base
                                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len159 = l158;
                                                                                        let bytes159 = _rt::Vec::from_raw_parts(
                                                                                            l157.cast(),
                                                                                            len159,
                                                                                            len159,
                                                                                        );
                                                                                        (_rt::string_lift(bytes156), _rt::string_lift(bytes159))
                                                                                    };
                                                                                    result160.push(e160);
                                                                                }
                                                                                _rt::cabi_dealloc(
                                                                                    base160,
                                                                                    len160 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                                    ::core::mem::size_of::<*const u8>(),
                                                                                );
                                                                                result160
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V181::Text(e181)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e181 = {
                                                                let l161 = *base
                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l162 = *base
                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len163 = l162;
                                                                let bytes163 = _rt::Vec::from_raw_parts(
                                                                    l161.cast(),
                                                                    len163,
                                                                    len163,
                                                                );
                                                                let l164 = i32::from(
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l168 = *base
                                                                    .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l169 = *base
                                                                    .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len170 = l169;
                                                                let l171 = i32::from(
                                                                    *base
                                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::wasmcp::mcp::types::BlobResourceContents {
                                                                    uri: _rt::string_lift(bytes163),
                                                                    mime_type: match l164 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l165 = *base
                                                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l166 = *base
                                                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len167 = l166;
                                                                                let bytes167 = _rt::Vec::from_raw_parts(
                                                                                    l165.cast(),
                                                                                    len167,
                                                                                    len167,
                                                                                );
                                                                                _rt::string_lift(bytes167)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    blob: _rt::Vec::from_raw_parts(l168.cast(), len170, len170),
                                                                    meta: match l171 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l172 = *base
                                                                                    .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l173 = *base
                                                                                    .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let base180 = l172;
                                                                                let len180 = l173;
                                                                                let mut result180 = _rt::Vec::with_capacity(len180);
                                                                                for i in 0..len180 {
                                                                                    let base = base180
                                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                                    let e180 = {
                                                                                        let l174 = *base.add(0).cast::<*mut u8>();
                                                                                        let l175 = *base
                                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len176 = l175;
                                                                                        let bytes176 = _rt::Vec::from_raw_parts(
                                                                                            l174.cast(),
                                                                                            len176,
                                                                                            len176,
                                                                                        );
                                                                                        let l177 = *base
                                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<*mut u8>();
                                                                                        let l178 = *base
                                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len179 = l178;
                                                                                        let bytes179 = _rt::Vec::from_raw_parts(
                                                                                            l177.cast(),
                                                                                            len179,
                                                                                            len179,
                                                                                        );
                                                                                        (_rt::string_lift(bytes176), _rt::string_lift(bytes179))
                                                                                    };
                                                                                    result180.push(e180);
                                                                                }
                                                                                _rt::cabi_dealloc(
                                                                                    base180,
                                                                                    len180 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                                    ::core::mem::size_of::<*const u8>(),
                                                                                );
                                                                                result180
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V181::Blob(e181)
                                                        }
                                                    };
                                                    let l182 = i32::from(
                                                        *base
                                                            .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l194 = i32::from(
                                                        *base
                                                            .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::wasmcp::mcp::types::EmbeddedResource {
                                                        contents: v181,
                                                        annotations: match l182 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l183 = i32::from(
                                                                        *base
                                                                            .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l188 = i32::from(
                                                                        *base
                                                                            .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l190 = i32::from(
                                                                        *base
                                                                            .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::wasmcp::mcp::types::Annotations {
                                                                        audience: match l183 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l184 = *base
                                                                                        .add(24 + 11 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l185 = *base
                                                                                        .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base187 = l184;
                                                                                    let len187 = l185;
                                                                                    let mut result187 = _rt::Vec::with_capacity(len187);
                                                                                    for i in 0..len187 {
                                                                                        let base = base187.add(i * 1);
                                                                                        let e187 = {
                                                                                            let l186 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::wasmcp::mcp::types::Role::_lift(
                                                                                                l186 as u8,
                                                                                            )
                                                                                        };
                                                                                        result187.push(e187);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base187, len187 * 1, 1);
                                                                                    result187
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l188 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l189 = *base
                                                                                        .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l189
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l190 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l191 = *base
                                                                                        .add(48 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l192 = *base
                                                                                        .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len193 = l192;
                                                                                    let bytes193 = _rt::Vec::from_raw_parts(
                                                                                        l191.cast(),
                                                                                        len193,
                                                                                        len193,
                                                                                    );
                                                                                    _rt::string_lift(bytes193)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l194 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l195 = *base
                                                                        .add(56 + 15 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l196 = *base
                                                                        .add(56 + 16 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base203 = l195;
                                                                    let len203 = l196;
                                                                    let mut result203 = _rt::Vec::with_capacity(len203);
                                                                    for i in 0..len203 {
                                                                        let base = base203
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e203 = {
                                                                            let l197 = *base.add(0).cast::<*mut u8>();
                                                                            let l198 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len199 = l198;
                                                                            let bytes199 = _rt::Vec::from_raw_parts(
                                                                                l197.cast(),
                                                                                len199,
                                                                                len199,
                                                                            );
                                                                            let l200 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l201 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len202 = l201;
                                                                            let bytes202 = _rt::Vec::from_raw_parts(
                                                                                l200.cast(),
                                                                                len202,
                                                                                len202,
                                                                            );
                                                                            (_rt::string_lift(bytes199), _rt::string_lift(bytes202))
                                                                        };
                                                                        result203.push(e203);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base203,
                                                                        len203 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result203
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V204::EmbeddedResource(e204)
                                            }
                                        };
                                        v204
                                    };
                                    result205.push(e205);
                                }
                                _rt::cabi_dealloc(
                                    base205,
                                    len205 * (80 + 18 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let l206 = i32::from(
                                    *ptr11
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l210 = i32::from(
                                    *ptr11
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l212 = i32::from(
                                    *ptr11
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::wasmcp::mcp::tool_types::ToolResult {
                                    content: result205,
                                    structured_content: match l206 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l207 = *ptr11
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l208 = *ptr11
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len209 = l208;
                                                let bytes209 = _rt::Vec::from_raw_parts(
                                                    l207.cast(),
                                                    len209,
                                                    len209,
                                                );
                                                _rt::string_lift(bytes209)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    is_error: match l210 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l211 = i32::from(
                                                    *ptr11
                                                        .add(1 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                _rt::bool_lift(l211 as u8)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    meta: match l212 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l213 = *ptr11
                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l214 = *ptr11
                                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base221 = l213;
                                                let len221 = l214;
                                                let mut result221 = _rt::Vec::with_capacity(len221);
                                                for i in 0..len221 {
                                                    let base = base221
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e221 = {
                                                        let l215 = *base.add(0).cast::<*mut u8>();
                                                        let l216 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len217 = l216;
                                                        let bytes217 = _rt::Vec::from_raw_parts(
                                                            l215.cast(),
                                                            len217,
                                                            len217,
                                                        );
                                                        let l218 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l219 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len220 = l219;
                                                        let bytes220 = _rt::Vec::from_raw_parts(
                                                            l218.cast(),
                                                            len220,
                                                            len220,
                                                        );
                                                        (_rt::string_lift(bytes217), _rt::string_lift(bytes220))
                                                    };
                                                    result221.push(e221);
                                                }
                                                _rt::cabi_dealloc(
                                                    base221,
                                                    len221 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result221
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l222 = i32::from(
                                    *ptr11.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::wasmcp::mcp::types::ErrorCode as V224;
                                let v224 = match l222 {
                                    0 => V224::ParseError,
                                    1 => V224::InvalidRequest,
                                    2 => V224::MethodNotFound,
                                    3 => V224::InvalidParams,
                                    4 => V224::InternalError,
                                    5 => V224::ResourceNotFound,
                                    6 => V224::ToolNotFound,
                                    7 => V224::PromptNotFound,
                                    8 => V224::Unauthorized,
                                    9 => V224::RateLimited,
                                    10 => V224::Timeout,
                                    11 => V224::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e224 = {
                                            let l223 = *ptr11
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l223
                                        };
                                        V224::CustomCode(e224)
                                    }
                                };
                                let l225 = *ptr11
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l226 = *ptr11
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len227 = l226;
                                let bytes227 = _rt::Vec::from_raw_parts(
                                    l225.cast(),
                                    len227,
                                    len227,
                                );
                                let l228 = i32::from(
                                    *ptr11
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::wasmcp::mcp::types::McpError {
                                    code: v224,
                                    message: _rt::string_lift(bytes227),
                                    data: match l228 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l229 = *ptr11
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l230 = *ptr11
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len231 = l230;
                                                let bytes231 = _rt::Vec::from_raw_parts(
                                                    l229.cast(),
                                                    len231,
                                                    len231,
                                                );
                                                _rt::string_lift(bytes231)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result232
                }
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub use alloc_crate::alloc;
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    extern crate alloc as alloc_crate;
}
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:wasmcp:mcp@0.1.0:tools-transport:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 5133] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x87'\x01A\x02\x01A\x1e\
\x01B;\x01m\x02\x04user\x09assistant\x04\0\x04role\x03\0\0\x01s\x04\0\x0ajson-va\
lue\x03\0\x02\x01o\x02ss\x01p\x04\x04\0\x0bmeta-fields\x03\0\x05\x01p\x01\x01k\x07\
\x01ku\x01ks\x01r\x03\x08audience\x08\x08priority\x09\x0dlast-modified\x0a\x04\0\
\x0bannotations\x03\0\x0b\x01r\x02\x04names\x05title\x0a\x04\0\x0dbase-metadata\x03\
\0\x0d\x01k\x0c\x01k\x06\x01r\x03\x04texts\x0bannotations\x0f\x04meta\x10\x04\0\x0c\
text-content\x03\0\x11\x01p}\x01r\x04\x04data\x13\x09mime-types\x0bannotations\x0f\
\x04meta\x10\x04\0\x0dimage-content\x03\0\x14\x01r\x04\x04data\x13\x09mime-types\
\x0bannotations\x0f\x04meta\x10\x04\0\x0daudio-content\x03\0\x16\x01kw\x01r\x08\x03\
uris\x04names\x05title\x0a\x0bdescription\x0a\x09mime-type\x0a\x04size\x18\x0ban\
notations\x0f\x04meta\x10\x04\0\x0dresource-link\x03\0\x19\x01r\x04\x03uris\x09m\
ime-type\x0a\x04texts\x04meta\x10\x04\0\x16text-resource-contents\x03\0\x1b\x01r\
\x04\x03uris\x09mime-type\x0a\x04blob\x13\x04meta\x10\x04\0\x16blob-resource-con\
tents\x03\0\x1d\x01q\x02\x04text\x01\x1c\0\x04blob\x01\x1e\0\x04\0\x11resource-c\
ontents\x03\0\x1f\x01r\x03\x08contents\x20\x0bannotations\x0f\x04meta\x10\x04\0\x11\
embedded-resource\x03\0!\x01q\x05\x04text\x01\x12\0\x05image\x01\x15\0\x05audio\x01\
\x17\0\x0dresource-link\x01\x1a\0\x11embedded-resource\x01\"\0\x04\0\x0dcontent-\
block\x03\0#\x01s\x04\0\x0bjson-schema\x03\0%\x01q\x0d\x0bparse-error\0\0\x0finv\
alid-request\0\0\x10method-not-found\0\0\x0einvalid-params\0\0\x0einternal-error\
\0\0\x12resource-not-found\0\0\x0etool-not-found\0\0\x10prompt-not-found\0\0\x0c\
unauthorized\0\0\x0crate-limited\0\0\x07timeout\0\0\x09cancelled\0\0\x0bcustom-c\
ode\x01z\0\x04\0\x0aerror-code\x03\0'\x01r\x03\x04code(\x07messages\x04data\x0a\x04\
\0\x09mcp-error\x03\0)\x01s\x04\0\x06cursor\x03\0+\x01s\x04\0\x0eprogress-token\x03\
\0-\x01q\x02\x03str\x01s\0\x03num\x01x\0\x04\0\x0arequest-id\x03\0/\x01m\x03\x04\
user\x09assistant\x06system\x04\0\x0cmessage-role\x03\01\x01r\x01\x04name\x0a\x04\
\0\x0amodel-hint\x03\03\x01p4\x01k5\x01r\x04\x05hints6\x0dcost-priority\x09\x0es\
peed-priority\x09\x15intelligence-priority\x09\x04\0\x11model-preferences\x03\07\
\x01r\x04\x0curi-templates\x04names\x0bdescription\x0a\x09mime-type\x0a\x04\0\x11\
resource-template\x03\09\x03\0\x16wasmcp:mcp/types@0.1.0\x05\0\x02\x03\0\0\x0bme\
ta-fields\x01B\x1d\x02\x03\x02\x01\x01\x04\0\x0bmeta-fields\x03\0\0\x01m\x02\x09\
v20250326\x09v20250618\x04\0\x10protocol-version\x03\0\x02\x01ks\x01r\x03\x04nam\
es\x07versions\x05title\x04\x04\0\x13implementation-info\x03\0\x05\x01k\x7f\x01r\
\x01\x0clist-changed\x07\x04\0\x10roots-capability\x03\0\x08\x01r\x01\x0clist-ch\
anged\x07\x04\0\x12prompts-capability\x03\0\x0a\x01r\x02\x09subscribe\x07\x0clis\
t-changed\x07\x04\0\x14resources-capability\x03\0\x0c\x01r\x01\x0clist-changed\x07\
\x04\0\x10tools-capability\x03\0\x0e\x01k\x01\x01k\x09\x01r\x04\x0cexperimental\x10\
\x05roots\x11\x08sampling\x07\x0belicitation\x07\x04\0\x13client-capabilities\x03\
\0\x12\x01k\x0b\x01k\x0d\x01k\x0f\x01r\x06\x0cexperimental\x10\x07logging\x07\x0b\
completions\x07\x07prompts\x14\x09resources\x15\x05tools\x16\x04\0\x13server-cap\
abilities\x03\0\x17\x01r\x04\x10protocol-version\x03\x0ccapabilities\x13\x0bclie\
nt-info\x06\x04meta\x10\x04\0\x12initialize-request\x03\0\x19\x01r\x05\x10protoc\
ol-version\x03\x0ccapabilities\x18\x0bserver-info\x06\x0cinstructions\x04\x04met\
a\x10\x04\0\x13initialize-response\x03\0\x1b\x03\0\x1bwasmcp:mcp/core-types@0.1.\
0\x05\x02\x02\x03\0\0\x09mcp-error\x02\x03\0\0\x0eprogress-token\x02\x03\0\0\x0a\
request-id\x01B'\x02\x03\x02\x01\x03\x04\0\x09mcp-error\x03\0\0\x02\x03\x02\x01\x01\
\x04\0\x0bmeta-fields\x03\0\x02\x02\x03\x02\x01\x04\x04\0\x0eprogress-token\x03\0\
\x04\x02\x03\x02\x01\x05\x04\0\x0arequest-id\x03\0\x06\x01ku\x01ks\x01k\x03\x01r\
\x05\x0eprogress-token\x05\x08progressu\x05total\x08\x07message\x09\x04meta\x0a\x04\
\0\x15progress-notification\x03\0\x0b\x01r\x03\x0arequest-id\x07\x06reason\x09\x04\
meta\x0a\x04\0\x16cancelled-notification\x03\0\x0d\x01r\x01\x04meta\x0a\x04\0\x12\
tools-list-changed\x03\0\x0f\x01r\x01\x04meta\x0a\x04\0\x16resources-list-change\
d\x03\0\x11\x01r\x01\x04meta\x0a\x04\0\x14prompts-list-changed\x03\0\x13\x01r\x02\
\x03uris\x04meta\x0a\x04\0\x10resource-updated\x03\0\x15\x01r\x01\x04meta\x0a\x04\
\0\x12roots-list-changed\x03\0\x17\x01m\x08\x05debug\x04info\x06notice\x07warnin\
g\x05error\x08critical\x05alert\x09emergency\x04\0\x09log-level\x03\0\x19\x01o\x02\
ss\x01p\x1b\x01k\x1c\x01r\x05\x05level\x1a\x06logger\x09\x07messages\x04data\x1d\
\x04meta\x0a\x04\0\x0blog-message\x03\0\x1e\x01q\x08\x08progress\x01\x0c\0\x09ca\
ncelled\x01\x0e\0\x12tools-list-changed\x01\x10\0\x16resources-list-changed\x01\x12\
\0\x14prompts-list-changed\x01\x14\0\x10resource-updated\x01\x16\0\x12roots-list\
-changed\x01\x18\0\x0blog-message\x01\x1f\0\x04\0\x0cnotification\x03\0\x20\x01j\
\0\x01\x01\x01@\x01\x0cnotification!\0\"\x04\0\x11send-notification\x01#\x01@\x01\
\x05level\x1a\0\"\x04\0\x0dset-log-level\x01$\x03\0#wasmcp:mcp/notification-type\
s@0.1.0\x05\x06\x01B\x13\x02\x03\x02\x01\x01\x04\0\x0bmeta-fields\x03\0\0\x01ps\x01\
ks\x01r\x05\x0fexpected-issuers\x12expected-audiences\x02\x08jwks-uris\x06policy\
\x03\x0bpolicy-data\x03\x04\0\x14provider-auth-config\x03\0\x04\x01kw\x01r\x08\x09\
client-id\x03\x07user-id\x03\x06scopes\x02\x06issuer\x03\x08audience\x03\x06clai\
ms\x01\x03exp\x06\x03iat\x06\x04\0\x0cauth-context\x03\0\x07\x01o\x02ss\x01p\x09\
\x01p}\x01k\x0b\x01r\x0a\x05tokens\x06methods\x04paths\x07headers\x0a\x04body\x0c\
\x0fexpected-issuers\x12expected-audiences\x02\x08jwks-uris\x06policy\x03\x0bpol\
icy-data\x03\x04\0\x0cauth-request\x03\0\x0d\x01r\x04\x06status{\x0aerror-codes\x0b\
descriptions\x10www-authenticate\x03\x04\0\x0aauth-error\x03\0\x0f\x01q\x02\x0aa\
uthorized\x01\x08\0\x0cunauthorized\x01\x10\0\x04\0\x0dauth-response\x03\0\x11\x03\
\0$wasmcp:mcp/authorization-types@0.1.0\x05\x07\x02\x03\0\x01\x12initialize-requ\
est\x02\x03\0\x01\x13initialize-response\x02\x03\0\x03\x14provider-auth-config\x01\
B\x18\x02\x03\x02\x01\x03\x04\0\x09mcp-error\x03\0\0\x02\x03\x02\x01\x08\x04\0\x12\
initialize-request\x03\0\x02\x02\x03\x02\x01\x09\x04\0\x13initialize-response\x03\
\0\x04\x02\x03\x02\x01\x0a\x04\0\x14provider-auth-config\x03\0\x06\x01j\x01\x05\x01\
\x01\x01@\x01\x07request\x03\0\x08\x04\0\x11handle-initialize\x01\x09\x01j\0\x01\
\x01\x01@\0\0\x0a\x04\0\x12handle-initialized\x01\x0b\x04\0\x0bhandle-ping\x01\x0b\
\x04\0\x0fhandle-shutdown\x01\x0b\x01k\x07\x01@\0\0\x0c\x04\0\x0fget-auth-config\
\x01\x0d\x01ks\x01@\x01\x08jwks-uris\0\x0e\x04\0\x0ejwks-cache-get\x01\x0f\x01@\x02\
\x08jwks-uris\x04jwkss\x01\0\x04\0\x0ejwks-cache-set\x01\x10\x03\0\"wasmcp:mcp/c\
ore-capabilities@0.1.0\x05\x0b\x02\x03\0\0\x0dcontent-block\x02\x03\0\0\x0ajson-\
value\x02\x03\0\0\x0bjson-schema\x02\x03\0\0\x0dbase-metadata\x02\x03\0\0\x06cur\
sor\x01B$\x02\x03\x02\x01\x0c\x04\0\x0dcontent-block\x03\0\0\x02\x03\x02\x01\x0d\
\x04\0\x0ajson-value\x03\0\x02\x02\x03\x02\x01\x0e\x04\0\x0bjson-schema\x03\0\x04\
\x02\x03\x02\x01\x0f\x04\0\x0dbase-metadata\x03\0\x06\x02\x03\x02\x01\x01\x04\0\x0b\
meta-fields\x03\0\x08\x02\x03\x02\x01\x10\x04\0\x06cursor\x03\0\x0a\x02\x03\x02\x01\
\x04\x04\0\x0eprogress-token\x03\0\x0c\x01ks\x01k\x7f\x01r\x05\x05title\x0e\x0er\
ead-only-hint\x0f\x10destructive-hint\x0f\x0fidempotent-hint\x0f\x0fopen-world-h\
int\x0f\x04\0\x10tool-annotations\x03\0\x10\x01k\x05\x01k\x11\x01k\x09\x01r\x06\x04\
base\x07\x0bdescription\x0e\x0cinput-schema\x05\x0doutput-schema\x12\x0bannotati\
ons\x13\x04meta\x14\x04\0\x04tool\x03\0\x15\x01p\x01\x01k\x03\x01r\x04\x07conten\
t\x17\x12structured-content\x18\x08is-error\x0f\x04meta\x14\x04\0\x0btool-result\
\x03\0\x19\x01k\x0b\x01k\x0d\x01r\x03\x06cursor\x1b\x0eprogress-token\x1c\x04met\
a\x14\x04\0\x12list-tools-request\x03\0\x1d\x01p\x16\x01r\x03\x05tools\x1f\x0bne\
xt-cursor\x1b\x04meta\x14\x04\0\x13list-tools-response\x03\0\x20\x01r\x04\x04nam\
es\x09arguments\x18\x0eprogress-token\x1c\x04meta\x14\x04\0\x11call-tool-request\
\x03\0\"\x03\0\x1bwasmcp:mcp/tool-types@0.1.0\x05\x11\x02\x03\0\x05\x12list-tool\
s-request\x02\x03\0\x05\x13list-tools-response\x02\x03\0\x05\x11call-tool-reques\
t\x02\x03\0\x05\x0btool-result\x01B\x10\x02\x03\x02\x01\x03\x04\0\x09mcp-error\x03\
\0\0\x02\x03\x02\x01\x12\x04\0\x12list-tools-request\x03\0\x02\x02\x03\x02\x01\x13\
\x04\0\x13list-tools-response\x03\0\x04\x02\x03\x02\x01\x14\x04\0\x11call-tool-r\
equest\x03\0\x06\x02\x03\x02\x01\x15\x04\0\x0btool-result\x03\0\x08\x01j\x01\x05\
\x01\x01\x01@\x01\x07request\x03\0\x0a\x04\0\x11handle-list-tools\x01\x0b\x01j\x01\
\x09\x01\x01\x01@\x01\x07request\x07\0\x0c\x04\0\x10handle-call-tool\x01\x0d\x03\
\0#wasmcp:mcp/tools-capabilities@0.1.0\x05\x16\x04\0\x20wasmcp:mcp/tools-transpo\
rt@0.1.0\x04\0\x0b\x15\x01\0\x0ftools-transport\x03\0\0\0G\x09producers\x01\x0cp\
rocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
