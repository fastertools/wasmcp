// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
//   * additional derives ["serde::Serialize", "serde::Deserialize", "Clone"]
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod fastertools {
    pub mod mcp {
        /// Core type definitions for the Model Context Protocol
        /// These types are used across all MCP interfaces
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Role in a conversation
            #[repr(u8)]
            #[derive(
                Clone,
                Copy,
                Eq,
                Ord,
                PartialEq,
                PartialOrd,
                serde::Deserialize,
                serde::Serialize
            )]
            pub enum Role {
                User,
                Assistant,
            }
            impl ::core::fmt::Debug for Role {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Role::User => f.debug_tuple("Role::User").finish(),
                        Role::Assistant => f.debug_tuple("Role::Assistant").finish(),
                    }
                }
            }
            impl Role {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> Role {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => Role::User,
                        1 => Role::Assistant,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// JSON value as a string
            /// This is a JSON-encoded value that should be parsed/validated by implementations
            pub type JsonValue = _rt::String;
            /// Metadata fields for extensibility
            /// Key-value pairs where values are JSON-encoded strings
            pub type MetaFields = _rt::Vec<(_rt::String, _rt::String)>;
            /// Annotations provide hints to clients about how to handle data
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct Annotations {
                /// Who this data is intended for
                pub audience: Option<_rt::Vec<Role>>,
                /// Priority from 0.0 (least) to 1.0 (most important)
                /// Implementations SHOULD validate this is within [0.0, 1.0] range
                pub priority: Option<f64>,
                /// ISO 8601 timestamp of last modification
                /// Format: YYYY-MM-DDTHH:mm:ss[.sss]Z or Â±HH:MM offset
                pub last_modified: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Annotations {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Annotations")
                        .field("audience", &self.audience)
                        .field("priority", &self.priority)
                        .field("last-modified", &self.last_modified)
                        .finish()
                }
            }
            /// Base metadata pattern used throughout the protocol
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct BaseMetadata {
                /// Programmatic identifier
                pub name: _rt::String,
                /// Human-readable display name
                pub title: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for BaseMetadata {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BaseMetadata")
                        .field("name", &self.name)
                        .field("title", &self.title)
                        .finish()
                }
            }
            /// Text content with optional annotations
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct TextContent {
                pub text: _rt::String,
                pub annotations: Option<Annotations>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for TextContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextContent")
                        .field("text", &self.text)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Image content as binary data
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ImageContent {
                /// Base64-encoded image data
                pub data: _rt::Vec<u8>,
                /// MIME type (e.g., "image/png", "image/jpeg")
                pub mime_type: _rt::String,
                pub annotations: Option<Annotations>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ImageContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ImageContent")
                        .field("data", &self.data)
                        .field("mime-type", &self.mime_type)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Audio content as binary data
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct AudioContent {
                /// Base64-encoded audio data
                pub data: _rt::Vec<u8>,
                /// MIME type (e.g., "audio/wav", "audio/mp3")
                pub mime_type: _rt::String,
                pub annotations: Option<Annotations>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for AudioContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AudioContent")
                        .field("data", &self.data)
                        .field("mime-type", &self.mime_type)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Reference to a resource that the server can read
            /// Resource links included in prompts or tool results may not appear in resources/list
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ResourceLink {
                /// URI of the resource
                pub uri: _rt::String,
                /// Programmatic identifier for the resource
                pub name: _rt::String,
                /// Human-readable display title (preferred for UI display)
                pub title: Option<_rt::String>,
                /// Description of what this resource represents
                pub description: Option<_rt::String>,
                /// MIME type of the resource, if known
                pub mime_type: Option<_rt::String>,
                /// Size in bytes (before encoding), if known
                pub size: Option<u64>,
                /// Client hints for handling
                pub annotations: Option<Annotations>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ResourceLink {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourceLink")
                        .field("uri", &self.uri)
                        .field("name", &self.name)
                        .field("title", &self.title)
                        .field("description", &self.description)
                        .field("mime-type", &self.mime_type)
                        .field("size", &self.size)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct TextResourceContents {
                pub uri: _rt::String,
                pub mime_type: Option<_rt::String>,
                pub text: _rt::String,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for TextResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextResourceContents")
                        .field("uri", &self.uri)
                        .field("mime-type", &self.mime_type)
                        .field("text", &self.text)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct BlobResourceContents {
                pub uri: _rt::String,
                pub mime_type: Option<_rt::String>,
                /// Binary data
                pub blob: _rt::Vec<u8>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for BlobResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BlobResourceContents")
                        .field("uri", &self.uri)
                        .field("mime-type", &self.mime_type)
                        .field("blob", &self.blob)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Resource contents can be either text or binary
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub enum ResourceContents {
                Text(TextResourceContents),
                Blob(BlobResourceContents),
            }
            impl ::core::fmt::Debug for ResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ResourceContents::Text(e) => {
                            f.debug_tuple("ResourceContents::Text").field(e).finish()
                        }
                        ResourceContents::Blob(e) => {
                            f.debug_tuple("ResourceContents::Blob").field(e).finish()
                        }
                    }
                }
            }
            /// Embedded resource content
            /// The contents of a resource, embedded into a prompt or tool call result
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct EmbeddedResource {
                /// The actual resource contents (text or binary)
                pub contents: ResourceContents,
                /// Client hints for handling
                pub annotations: Option<Annotations>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for EmbeddedResource {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EmbeddedResource")
                        .field("contents", &self.contents)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Content block types that can be included in messages
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub enum ContentBlock {
                Text(TextContent),
                Image(ImageContent),
                Audio(AudioContent),
                ResourceLink(ResourceLink),
                EmbeddedResource(EmbeddedResource),
            }
            impl ::core::fmt::Debug for ContentBlock {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ContentBlock::Text(e) => {
                            f.debug_tuple("ContentBlock::Text").field(e).finish()
                        }
                        ContentBlock::Image(e) => {
                            f.debug_tuple("ContentBlock::Image").field(e).finish()
                        }
                        ContentBlock::Audio(e) => {
                            f.debug_tuple("ContentBlock::Audio").field(e).finish()
                        }
                        ContentBlock::ResourceLink(e) => {
                            f.debug_tuple("ContentBlock::ResourceLink").field(e).finish()
                        }
                        ContentBlock::EmbeddedResource(e) => {
                            f.debug_tuple("ContentBlock::EmbeddedResource")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            /// JSON Schema representation
            /// Kept as a string since JSON Schema is complex
            /// and typically validated by specialized libraries
            pub type JsonSchema = _rt::String;
            /// Standard JSON-RPC and MCP error codes
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub enum ErrorCode {
                /// JSON-RPC standard errors
                ParseError,
                /// -32700
                InvalidRequest,
                /// -32600
                MethodNotFound,
                /// -32601
                InvalidParams,
                /// -32602
                InternalError,
                /// -32603
                /// MCP-specific errors
                ResourceNotFound,
                ToolNotFound,
                PromptNotFound,
                Unauthorized,
                RateLimited,
                Timeout,
                Cancelled,
                /// Custom error with specific code
                CustomCode(i32),
            }
            impl ::core::fmt::Debug for ErrorCode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ErrorCode::ParseError => {
                            f.debug_tuple("ErrorCode::ParseError").finish()
                        }
                        ErrorCode::InvalidRequest => {
                            f.debug_tuple("ErrorCode::InvalidRequest").finish()
                        }
                        ErrorCode::MethodNotFound => {
                            f.debug_tuple("ErrorCode::MethodNotFound").finish()
                        }
                        ErrorCode::InvalidParams => {
                            f.debug_tuple("ErrorCode::InvalidParams").finish()
                        }
                        ErrorCode::InternalError => {
                            f.debug_tuple("ErrorCode::InternalError").finish()
                        }
                        ErrorCode::ResourceNotFound => {
                            f.debug_tuple("ErrorCode::ResourceNotFound").finish()
                        }
                        ErrorCode::ToolNotFound => {
                            f.debug_tuple("ErrorCode::ToolNotFound").finish()
                        }
                        ErrorCode::PromptNotFound => {
                            f.debug_tuple("ErrorCode::PromptNotFound").finish()
                        }
                        ErrorCode::Unauthorized => {
                            f.debug_tuple("ErrorCode::Unauthorized").finish()
                        }
                        ErrorCode::RateLimited => {
                            f.debug_tuple("ErrorCode::RateLimited").finish()
                        }
                        ErrorCode::Timeout => {
                            f.debug_tuple("ErrorCode::Timeout").finish()
                        }
                        ErrorCode::Cancelled => {
                            f.debug_tuple("ErrorCode::Cancelled").finish()
                        }
                        ErrorCode::CustomCode(e) => {
                            f.debug_tuple("ErrorCode::CustomCode").field(e).finish()
                        }
                    }
                }
            }
            /// Standard error structure
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct McpError {
                pub code: ErrorCode,
                pub message: _rt::String,
                /// Additional error context (JSON-encoded)
                pub data: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for McpError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("McpError")
                        .field("code", &self.code)
                        .field("message", &self.message)
                        .field("data", &self.data)
                        .finish()
                }
            }
            impl ::core::fmt::Display for McpError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for McpError {}
            /// Pagination cursor for list operations
            pub type Cursor = _rt::String;
            /// Progress token for tracking long-running operations
            pub type ProgressToken = _rt::String;
            /// JSON-RPC request ID
            /// Can be either a string or number in JSON-RPC
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub enum RequestId {
                Str(_rt::String),
                Num(i64),
            }
            impl ::core::fmt::Debug for RequestId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        RequestId::Str(e) => {
                            f.debug_tuple("RequestId::Str").field(e).finish()
                        }
                        RequestId::Num(e) => {
                            f.debug_tuple("RequestId::Num").field(e).finish()
                        }
                    }
                }
            }
            /// Message role for LLM interactions
            #[repr(u8)]
            #[derive(
                Clone,
                Copy,
                Eq,
                Ord,
                PartialEq,
                PartialOrd,
                serde::Deserialize,
                serde::Serialize
            )]
            pub enum MessageRole {
                User,
                Assistant,
                System,
            }
            impl ::core::fmt::Debug for MessageRole {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        MessageRole::User => f.debug_tuple("MessageRole::User").finish(),
                        MessageRole::Assistant => {
                            f.debug_tuple("MessageRole::Assistant").finish()
                        }
                        MessageRole::System => {
                            f.debug_tuple("MessageRole::System").finish()
                        }
                    }
                }
            }
            impl MessageRole {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> MessageRole {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => MessageRole::User,
                        1 => MessageRole::Assistant,
                        2 => MessageRole::System,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Hint for model selection
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ModelHint {
                /// Name pattern to match (e.g., "claude", "gpt-4")
                pub name: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ModelHint {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ModelHint").field("name", &self.name).finish()
                }
            }
            /// Model selection preferences for LLM sampling
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ModelPreferences {
                /// Hints for model selection
                pub hints: Option<_rt::Vec<ModelHint>>,
                /// Priority for cost optimization (0.0-1.0)
                pub cost_priority: Option<f64>,
                /// Priority for speed (0.0-1.0)
                pub speed_priority: Option<f64>,
                /// Priority for intelligence/capability (0.0-1.0)
                pub intelligence_priority: Option<f64>,
            }
            impl ::core::fmt::Debug for ModelPreferences {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ModelPreferences")
                        .field("hints", &self.hints)
                        .field("cost-priority", &self.cost_priority)
                        .field("speed-priority", &self.speed_priority)
                        .field("intelligence-priority", &self.intelligence_priority)
                        .finish()
                }
            }
            /// Resource template with URI template support (RFC 6570)
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ResourceTemplate {
                /// URI template that can be expanded with variables
                pub uri_template: _rt::String,
                /// Identifier for the template
                pub name: _rt::String,
                /// Human-readable description
                pub description: Option<_rt::String>,
                /// Expected MIME type of resources
                pub mime_type: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ResourceTemplate {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourceTemplate")
                        .field("uri-template", &self.uri_template)
                        .field("name", &self.name)
                        .field("description", &self.description)
                        .field("mime-type", &self.mime_type)
                        .finish()
                }
            }
        }
        /// Session management and capability negotiation for MCP
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod session {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type McpError = super::super::super::fastertools::mcp::types::McpError;
            pub type MetaFields = super::super::super::fastertools::mcp::types::MetaFields;
            /// Protocol versions supported by MCP
            /// These correspond to official MCP specification versions
            #[repr(u8)]
            #[derive(
                Clone,
                Copy,
                Eq,
                Ord,
                PartialEq,
                PartialOrd,
                serde::Deserialize,
                serde::Serialize
            )]
            pub enum ProtocolVersion {
                /// MCP 2024-11-05 specification
                McpV20241105,
                /// MCP 2025-03-26 specification
                McpV20250326,
                /// MCP 2025-06-18 specification
                McpV20250618,
                /// Latest draft specification (DRAFT-2025-v3)
                DraftV2025V3,
            }
            impl ::core::fmt::Debug for ProtocolVersion {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ProtocolVersion::McpV20241105 => {
                            f.debug_tuple("ProtocolVersion::McpV20241105").finish()
                        }
                        ProtocolVersion::McpV20250326 => {
                            f.debug_tuple("ProtocolVersion::McpV20250326").finish()
                        }
                        ProtocolVersion::McpV20250618 => {
                            f.debug_tuple("ProtocolVersion::McpV20250618").finish()
                        }
                        ProtocolVersion::DraftV2025V3 => {
                            f.debug_tuple("ProtocolVersion::DraftV2025V3").finish()
                        }
                    }
                }
            }
            impl ProtocolVersion {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ProtocolVersion {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ProtocolVersion::McpV20241105,
                        1 => ProtocolVersion::McpV20250326,
                        2 => ProtocolVersion::McpV20250618,
                        3 => ProtocolVersion::DraftV2025V3,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Information about an MCP implementation
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ImplementationInfo {
                /// Implementation name (e.g., "weather-server")
                pub name: _rt::String,
                /// Implementation version (e.g., "1.0.0")
                pub version: _rt::String,
                /// Optional human-readable title
                pub title: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ImplementationInfo {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ImplementationInfo")
                        .field("name", &self.name)
                        .field("version", &self.version)
                        .field("title", &self.title)
                        .finish()
                }
            }
            /// Root listing capability details
            #[repr(C)]
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub struct RootsCapability {
                /// Server will notify when roots list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for RootsCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RootsCapability")
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Capabilities that a client supports
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ClientCapabilities {
                /// Experimental/custom capabilities
                pub experimental: Option<MetaFields>,
                /// Support for roots (directory access)
                pub roots: Option<RootsCapability>,
                /// Support for LLM sampling
                pub sampling: Option<bool>,
                /// Support for user elicitation
                pub elicitation: Option<bool>,
            }
            impl ::core::fmt::Debug for ClientCapabilities {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ClientCapabilities")
                        .field("experimental", &self.experimental)
                        .field("roots", &self.roots)
                        .field("sampling", &self.sampling)
                        .field("elicitation", &self.elicitation)
                        .finish()
                }
            }
            /// Prompts capability details
            #[repr(C)]
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub struct PromptsCapability {
                /// Server will notify when prompts list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for PromptsCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PromptsCapability")
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Resources capability details
            #[repr(C)]
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub struct ResourcesCapability {
                /// Server supports resource subscriptions
                pub subscribe: Option<bool>,
                /// Server will notify when resource list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for ResourcesCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourcesCapability")
                        .field("subscribe", &self.subscribe)
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Tools capability details
            #[repr(C)]
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub struct ToolsCapability {
                /// Server will notify when tools list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for ToolsCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolsCapability")
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Capabilities that a server provides
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ServerCapabilities {
                /// Experimental/custom capabilities
                pub experimental: Option<MetaFields>,
                /// Server can send log messages
                pub logging: Option<bool>,
                /// Server supports argument autocompletion
                pub completions: Option<bool>,
                /// Server offers prompts
                pub prompts: Option<PromptsCapability>,
                /// Server offers resources
                pub resources: Option<ResourcesCapability>,
                /// Server offers tools
                pub tools: Option<ToolsCapability>,
            }
            impl ::core::fmt::Debug for ServerCapabilities {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ServerCapabilities")
                        .field("experimental", &self.experimental)
                        .field("logging", &self.logging)
                        .field("completions", &self.completions)
                        .field("prompts", &self.prompts)
                        .field("resources", &self.resources)
                        .field("tools", &self.tools)
                        .finish()
                }
            }
            /// Initialize request sent by client on connection
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct InitializeRequest {
                /// Protocol version the client supports
                pub protocol_version: ProtocolVersion,
                /// Client's capabilities
                pub capabilities: ClientCapabilities,
                /// Client implementation details
                pub client_info: ImplementationInfo,
                /// Optional metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for InitializeRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("InitializeRequest")
                        .field("protocol-version", &self.protocol_version)
                        .field("capabilities", &self.capabilities)
                        .field("client-info", &self.client_info)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Initialize response from server
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct InitializeResponse {
                /// Protocol version the server will use
                pub protocol_version: ProtocolVersion,
                /// Server's capabilities
                pub capabilities: ServerCapabilities,
                /// Server implementation details
                pub server_info: ImplementationInfo,
                /// Optional instructions for using the server
                pub instructions: Option<_rt::String>,
                /// Optional metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for InitializeResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("InitializeResponse")
                        .field("protocol-version", &self.protocol_version)
                        .field("capabilities", &self.capabilities)
                        .field("server-info", &self.server_info)
                        .field("instructions", &self.instructions)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Session lifecycle operations
            /// Initialize the MCP session
            pub fn initialize(
                request: &InitializeRequest,
            ) -> Result<InitializeResponse, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 16 + 18 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 16
                            + 18 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    let InitializeRequest {
                        protocol_version: protocol_version1,
                        capabilities: capabilities1,
                        client_info: client_info1,
                        meta: meta1,
                    } = request;
                    *ptr0.add(0).cast::<u8>() = (protocol_version1.clone() as i32) as u8;
                    let ClientCapabilities {
                        experimental: experimental2,
                        roots: roots2,
                        sampling: sampling2,
                        elicitation: elicitation2,
                    } = capabilities1;
                    match experimental2 {
                        Some(e) => {
                            *ptr0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec6 = e;
                            let len6 = vec6.len();
                            let layout6 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec6.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result6 = if layout6.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout6);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec6.into_iter().enumerate() {
                                let base = result6
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t3_0, t3_1) = e;
                                    let vec4 = t3_0;
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                                    let vec5 = t3_1;
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                            }
                            *ptr0
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result6;
                            cleanup_list.extend_from_slice(&[(result6, layout6)]);
                        }
                        None => {
                            *ptr0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match roots2 {
                        Some(e) => {
                            *ptr0
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let RootsCapability { list_changed: list_changed7 } = e;
                            match list_changed7 {
                                Some(e) => {
                                    *ptr0
                                        .add(1 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(2 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                None => {
                                    *ptr0
                                        .add(1 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        None => {
                            *ptr0
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match sampling2 {
                        Some(e) => {
                            *ptr0
                                .add(3 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            *ptr0
                                .add(4 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (match e {
                                true => 1,
                                false => 0,
                            }) as u8;
                        }
                        None => {
                            *ptr0
                                .add(3 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match elicitation2 {
                        Some(e) => {
                            *ptr0
                                .add(5 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            *ptr0
                                .add(6 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (match e {
                                true => 1,
                                false => 0,
                            }) as u8;
                        }
                        None => {
                            *ptr0
                                .add(5 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let ImplementationInfo {
                        name: name8,
                        version: version8,
                        title: title8,
                    } = client_info1;
                    let vec9 = name8;
                    let ptr9 = vec9.as_ptr().cast::<u8>();
                    let len9 = vec9.len();
                    *ptr0
                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len9;
                    *ptr0
                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr9.cast_mut();
                    let vec10 = version8;
                    let ptr10 = vec10.as_ptr().cast::<u8>();
                    let len10 = vec10.len();
                    *ptr0
                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len10;
                    *ptr0
                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr10.cast_mut();
                    match title8 {
                        Some(e) => {
                            *ptr0
                                .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec11 = e;
                            let ptr11 = vec11.as_ptr().cast::<u8>();
                            let len11 = vec11.len();
                            *ptr0
                                .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len11;
                            *ptr0
                                .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr11.cast_mut();
                        }
                        None => {
                            *ptr0
                                .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match meta1 {
                        Some(e) => {
                            *ptr0
                                .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec15 = e;
                            let len15 = vec15.len();
                            let layout15 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec15.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result15 = if layout15.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout15).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout15);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec15.into_iter().enumerate() {
                                let base = result15
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t12_0, t12_1) = e;
                                    let vec13 = t12_0;
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len13;
                                    *base.add(0).cast::<*mut u8>() = ptr13.cast_mut();
                                    let vec14 = t12_1;
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr14.cast_mut();
                                }
                            }
                            *ptr0
                                .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len15;
                            *ptr0
                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result15;
                            cleanup_list.extend_from_slice(&[(result15, layout15)]);
                        }
                        None => {
                            *ptr0
                                .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let ptr16 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fastertools:mcp/session@0.1.10")]
                    unsafe extern "C" {
                        #[link_name = "initialize"]
                        fn wit_import17(_: *mut u8, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import17(_: *mut u8, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import17(ptr0, ptr16) };
                    let l18 = i32::from(*ptr16.add(0).cast::<u8>());
                    let result79 = match l18 {
                        0 => {
                            let e = {
                                let l19 = i32::from(
                                    *ptr16.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                let l20 = i32::from(
                                    *ptr16
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l30 = i32::from(
                                    *ptr16
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l32 = i32::from(
                                    *ptr16
                                        .add(2 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l34 = i32::from(
                                    *ptr16
                                        .add(4 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l37 = i32::from(
                                    *ptr16
                                        .add(7 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l42 = i32::from(
                                    *ptr16
                                        .add(12 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l45 = *ptr16
                                    .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l46 = *ptr16
                                    .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len47 = l46;
                                let bytes47 = _rt::Vec::from_raw_parts(
                                    l45.cast(),
                                    len47,
                                    len47,
                                );
                                let l48 = *ptr16
                                    .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l49 = *ptr16
                                    .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len50 = l49;
                                let bytes50 = _rt::Vec::from_raw_parts(
                                    l48.cast(),
                                    len50,
                                    len50,
                                );
                                let l51 = i32::from(
                                    *ptr16
                                        .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l55 = i32::from(
                                    *ptr16
                                        .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l59 = i32::from(
                                    *ptr16
                                        .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                InitializeResponse {
                                    protocol_version: ProtocolVersion::_lift(l19 as u8),
                                    capabilities: ServerCapabilities {
                                        experimental: match l20 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l21 = *ptr16
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l22 = *ptr16
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base29 = l21;
                                                    let len29 = l22;
                                                    let mut result29 = _rt::Vec::with_capacity(len29);
                                                    for i in 0..len29 {
                                                        let base = base29
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        let e29 = {
                                                            let l23 = *base.add(0).cast::<*mut u8>();
                                                            let l24 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len25 = l24;
                                                            let bytes25 = _rt::Vec::from_raw_parts(
                                                                l23.cast(),
                                                                len25,
                                                                len25,
                                                            );
                                                            let l26 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l27 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len28 = l27;
                                                            let bytes28 = _rt::Vec::from_raw_parts(
                                                                l26.cast(),
                                                                len28,
                                                                len28,
                                                            );
                                                            (_rt::string_lift(bytes25), _rt::string_lift(bytes28))
                                                        };
                                                        result29.push(e29);
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base29,
                                                        len29 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    result29
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        logging: match l30 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l31 = i32::from(
                                                        *ptr16
                                                            .add(1 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    _rt::bool_lift(l31 as u8)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        completions: match l32 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l33 = i32::from(
                                                        *ptr16
                                                            .add(3 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    _rt::bool_lift(l33 as u8)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        prompts: match l34 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l35 = i32::from(
                                                        *ptr16
                                                            .add(5 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    PromptsCapability {
                                                        list_changed: match l35 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l36 = i32::from(
                                                                        *ptr16
                                                                            .add(6 + 5 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    _rt::bool_lift(l36 as u8)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        resources: match l37 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l38 = i32::from(
                                                        *ptr16
                                                            .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l40 = i32::from(
                                                        *ptr16
                                                            .add(10 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    ResourcesCapability {
                                                        subscribe: match l38 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l39 = i32::from(
                                                                        *ptr16
                                                                            .add(9 + 5 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    _rt::bool_lift(l39 as u8)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        list_changed: match l40 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l41 = i32::from(
                                                                        *ptr16
                                                                            .add(11 + 5 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    _rt::bool_lift(l41 as u8)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        tools: match l42 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l43 = i32::from(
                                                        *ptr16
                                                            .add(13 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    ToolsCapability {
                                                        list_changed: match l43 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l44 = i32::from(
                                                                        *ptr16
                                                                            .add(14 + 5 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    _rt::bool_lift(l44 as u8)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    },
                                    server_info: ImplementationInfo {
                                        name: _rt::string_lift(bytes47),
                                        version: _rt::string_lift(bytes50),
                                        title: match l51 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l52 = *ptr16
                                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l53 = *ptr16
                                                        .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len54 = l53;
                                                    let bytes54 = _rt::Vec::from_raw_parts(
                                                        l52.cast(),
                                                        len54,
                                                        len54,
                                                    );
                                                    _rt::string_lift(bytes54)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    },
                                    instructions: match l55 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l56 = *ptr16
                                                    .add(16 + 13 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l57 = *ptr16
                                                    .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len58 = l57;
                                                let bytes58 = _rt::Vec::from_raw_parts(
                                                    l56.cast(),
                                                    len58,
                                                    len58,
                                                );
                                                _rt::string_lift(bytes58)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    meta: match l59 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l60 = *ptr16
                                                    .add(16 + 16 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l61 = *ptr16
                                                    .add(16 + 17 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base68 = l60;
                                                let len68 = l61;
                                                let mut result68 = _rt::Vec::with_capacity(len68);
                                                for i in 0..len68 {
                                                    let base = base68
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e68 = {
                                                        let l62 = *base.add(0).cast::<*mut u8>();
                                                        let l63 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len64 = l63;
                                                        let bytes64 = _rt::Vec::from_raw_parts(
                                                            l62.cast(),
                                                            len64,
                                                            len64,
                                                        );
                                                        let l65 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l66 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len67 = l66;
                                                        let bytes67 = _rt::Vec::from_raw_parts(
                                                            l65.cast(),
                                                            len67,
                                                            len67,
                                                        );
                                                        (_rt::string_lift(bytes64), _rt::string_lift(bytes67))
                                                    };
                                                    result68.push(e68);
                                                }
                                                _rt::cabi_dealloc(
                                                    base68,
                                                    len68 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result68
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l69 = i32::from(
                                    *ptr16.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V71;
                                let v71 = match l69 {
                                    0 => V71::ParseError,
                                    1 => V71::InvalidRequest,
                                    2 => V71::MethodNotFound,
                                    3 => V71::InvalidParams,
                                    4 => V71::InternalError,
                                    5 => V71::ResourceNotFound,
                                    6 => V71::ToolNotFound,
                                    7 => V71::PromptNotFound,
                                    8 => V71::Unauthorized,
                                    9 => V71::RateLimited,
                                    10 => V71::Timeout,
                                    11 => V71::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e71 = {
                                            let l70 = *ptr16
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l70
                                        };
                                        V71::CustomCode(e71)
                                    }
                                };
                                let l72 = *ptr16
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l73 = *ptr16
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len74 = l73;
                                let bytes74 = _rt::Vec::from_raw_parts(
                                    l72.cast(),
                                    len74,
                                    len74,
                                );
                                let l75 = i32::from(
                                    *ptr16
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v71,
                                    message: _rt::string_lift(bytes74),
                                    data: match l75 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l76 = *ptr16
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l77 = *ptr16
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len78 = l77;
                                                let bytes78 = _rt::Vec::from_raw_parts(
                                                    l76.cast(),
                                                    len78,
                                                    len78,
                                                );
                                                _rt::string_lift(bytes78)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result79
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Notify server that initialization is complete
            pub fn initialized() -> Result<(), McpError> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fastertools:mcp/session@0.1.10")]
                    unsafe extern "C" {
                        #[link_name = "initialized"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result13 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = i32::from(
                                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V5;
                                let v5 = match l3 {
                                    0 => V5::ParseError,
                                    1 => V5::InvalidRequest,
                                    2 => V5::MethodNotFound,
                                    3 => V5::InvalidParams,
                                    4 => V5::InternalError,
                                    5 => V5::ResourceNotFound,
                                    6 => V5::ToolNotFound,
                                    7 => V5::PromptNotFound,
                                    8 => V5::Unauthorized,
                                    9 => V5::RateLimited,
                                    10 => V5::Timeout,
                                    11 => V5::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e5 = {
                                            let l4 = *ptr0
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l4
                                        };
                                        V5::CustomCode(e5)
                                    }
                                };
                                let l6 = *ptr0
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr0
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                let l9 = i32::from(
                                    *ptr0
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v5,
                                    message: _rt::string_lift(bytes8),
                                    data: match l9 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l10 = *ptr0
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l11 = *ptr0
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result13
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Ping to check if connection is alive
            pub fn ping() -> Result<(), McpError> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fastertools:mcp/session@0.1.10")]
                    unsafe extern "C" {
                        #[link_name = "ping"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result13 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = i32::from(
                                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V5;
                                let v5 = match l3 {
                                    0 => V5::ParseError,
                                    1 => V5::InvalidRequest,
                                    2 => V5::MethodNotFound,
                                    3 => V5::InvalidParams,
                                    4 => V5::InternalError,
                                    5 => V5::ResourceNotFound,
                                    6 => V5::ToolNotFound,
                                    7 => V5::PromptNotFound,
                                    8 => V5::Unauthorized,
                                    9 => V5::RateLimited,
                                    10 => V5::Timeout,
                                    11 => V5::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e5 = {
                                            let l4 = *ptr0
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l4
                                        };
                                        V5::CustomCode(e5)
                                    }
                                };
                                let l6 = *ptr0
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr0
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                let l9 = i32::from(
                                    *ptr0
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v5,
                                    message: _rt::string_lift(bytes8),
                                    data: match l9 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l10 = *ptr0
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l11 = *ptr0
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result13
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Shutdown the session gracefully
            pub fn shutdown() -> Result<(), McpError> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fastertools:mcp/session@0.1.10")]
                    unsafe extern "C" {
                        #[link_name = "shutdown"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result13 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = i32::from(
                                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V5;
                                let v5 = match l3 {
                                    0 => V5::ParseError,
                                    1 => V5::InvalidRequest,
                                    2 => V5::MethodNotFound,
                                    3 => V5::InvalidParams,
                                    4 => V5::InternalError,
                                    5 => V5::ResourceNotFound,
                                    6 => V5::ToolNotFound,
                                    7 => V5::PromptNotFound,
                                    8 => V5::Unauthorized,
                                    9 => V5::RateLimited,
                                    10 => V5::Timeout,
                                    11 => V5::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e5 = {
                                            let l4 = *ptr0
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l4
                                        };
                                        V5::CustomCode(e5)
                                    }
                                };
                                let l6 = *ptr0
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr0
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                let l9 = i32::from(
                                    *ptr0
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v5,
                                    message: _rt::string_lift(bytes8),
                                    data: match l9 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l10 = *ptr0
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l11 = *ptr0
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result13
                }
            }
        }
        /// Notification system for MCP events and updates
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod notifications {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type McpError = super::super::super::fastertools::mcp::types::McpError;
            pub type MetaFields = super::super::super::fastertools::mcp::types::MetaFields;
            pub type ProgressToken = super::super::super::fastertools::mcp::types::ProgressToken;
            pub type RequestId = super::super::super::fastertools::mcp::types::RequestId;
            /// Notification types that can be sent
            /// Notification that a long-running operation has progress
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ProgressNotification {
                /// Token identifying the operation
                pub progress_token: ProgressToken,
                /// Current progress value (can be fractional)
                pub progress: f64,
                /// Total expected progress (if known, can be fractional)
                pub total: Option<f64>,
                /// Optional progress message
                pub message: Option<_rt::String>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ProgressNotification {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ProgressNotification")
                        .field("progress-token", &self.progress_token)
                        .field("progress", &self.progress)
                        .field("total", &self.total)
                        .field("message", &self.message)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Notification that an operation was cancelled
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct CancelledNotification {
                /// ID of the cancelled request
                pub request_id: RequestId,
                /// Optional cancellation reason
                pub reason: Option<_rt::String>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for CancelledNotification {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CancelledNotification")
                        .field("request-id", &self.request_id)
                        .field("reason", &self.reason)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Notification that the tools list has changed
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ToolsListChanged {
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ToolsListChanged {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolsListChanged").field("meta", &self.meta).finish()
                }
            }
            /// Notification that the resources list has changed
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ResourcesListChanged {
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ResourcesListChanged {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourcesListChanged")
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Notification that the prompts list has changed
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct PromptsListChanged {
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for PromptsListChanged {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PromptsListChanged")
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Notification that a subscribed resource has been updated
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ResourceUpdated {
                /// URI of the updated resource
                pub uri: _rt::String,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ResourceUpdated {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourceUpdated")
                        .field("uri", &self.uri)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Notification that the roots list has changed
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct RootsListChanged {
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for RootsListChanged {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RootsListChanged").field("meta", &self.meta).finish()
                }
            }
            /// Log levels for logging notifications
            #[repr(u8)]
            #[derive(
                Clone,
                Copy,
                Eq,
                Ord,
                PartialEq,
                PartialOrd,
                serde::Deserialize,
                serde::Serialize
            )]
            pub enum LogLevel {
                Debug,
                Info,
                Notice,
                Warning,
                Error,
                Critical,
                Alert,
                Emergency,
            }
            impl ::core::fmt::Debug for LogLevel {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        LogLevel::Debug => f.debug_tuple("LogLevel::Debug").finish(),
                        LogLevel::Info => f.debug_tuple("LogLevel::Info").finish(),
                        LogLevel::Notice => f.debug_tuple("LogLevel::Notice").finish(),
                        LogLevel::Warning => f.debug_tuple("LogLevel::Warning").finish(),
                        LogLevel::Error => f.debug_tuple("LogLevel::Error").finish(),
                        LogLevel::Critical => {
                            f.debug_tuple("LogLevel::Critical").finish()
                        }
                        LogLevel::Alert => f.debug_tuple("LogLevel::Alert").finish(),
                        LogLevel::Emergency => {
                            f.debug_tuple("LogLevel::Emergency").finish()
                        }
                    }
                }
            }
            impl LogLevel {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> LogLevel {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => LogLevel::Debug,
                        1 => LogLevel::Info,
                        2 => LogLevel::Notice,
                        3 => LogLevel::Warning,
                        4 => LogLevel::Error,
                        5 => LogLevel::Critical,
                        6 => LogLevel::Alert,
                        7 => LogLevel::Emergency,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Log message notification
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct LogMessage {
                /// Severity level
                pub level: LogLevel,
                /// Optional logger name
                pub logger: Option<_rt::String>,
                /// Log message or data
                pub message: _rt::String,
                /// Additional structured data
                pub data: Option<_rt::Vec<(_rt::String, _rt::String)>>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for LogMessage {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("LogMessage")
                        .field("level", &self.level)
                        .field("logger", &self.logger)
                        .field("message", &self.message)
                        .field("data", &self.data)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// All possible notification types
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub enum Notification {
                /// Progress update for long-running operation
                Progress(ProgressNotification),
                /// Operation was cancelled
                Cancelled(CancelledNotification),
                /// Tools list changed
                ToolsListChanged(ToolsListChanged),
                /// Resources list changed
                ResourcesListChanged(ResourcesListChanged),
                /// Prompts list changed
                PromptsListChanged(PromptsListChanged),
                /// Subscribed resource was updated
                ResourceUpdated(ResourceUpdated),
                /// Roots list changed
                RootsListChanged(RootsListChanged),
                /// Log message from server
                LogMessage(LogMessage),
            }
            impl ::core::fmt::Debug for Notification {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Notification::Progress(e) => {
                            f.debug_tuple("Notification::Progress").field(e).finish()
                        }
                        Notification::Cancelled(e) => {
                            f.debug_tuple("Notification::Cancelled").field(e).finish()
                        }
                        Notification::ToolsListChanged(e) => {
                            f.debug_tuple("Notification::ToolsListChanged")
                                .field(e)
                                .finish()
                        }
                        Notification::ResourcesListChanged(e) => {
                            f.debug_tuple("Notification::ResourcesListChanged")
                                .field(e)
                                .finish()
                        }
                        Notification::PromptsListChanged(e) => {
                            f.debug_tuple("Notification::PromptsListChanged")
                                .field(e)
                                .finish()
                        }
                        Notification::ResourceUpdated(e) => {
                            f.debug_tuple("Notification::ResourceUpdated")
                                .field(e)
                                .finish()
                        }
                        Notification::RootsListChanged(e) => {
                            f.debug_tuple("Notification::RootsListChanged")
                                .field(e)
                                .finish()
                        }
                        Notification::LogMessage(e) => {
                            f.debug_tuple("Notification::LogMessage").field(e).finish()
                        }
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Notification operations
            /// Send a notification to the client
            pub fn send_notification(
                notification: &Notification,
            ) -> Result<(), McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let (
                        result66_0,
                        result66_1,
                        result66_2,
                        result66_3,
                        result66_4,
                        result66_5,
                        result66_6,
                        result66_7,
                        result66_8,
                        result66_9,
                        result66_10,
                        result66_11,
                        result66_12,
                    ) = match notification {
                        Notification::Progress(e) => {
                            let ProgressNotification {
                                progress_token: progress_token0,
                                progress: progress0,
                                total: total0,
                                message: message0,
                                meta: meta0,
                            } = e;
                            let vec1 = progress_token0;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            let (result2_0, result2_1) = match total0 {
                                Some(e) => (1i32, _rt::as_f64(e)),
                                None => (0i32, 0.0f64),
                            };
                            let (result4_0, result4_1, result4_2) = match message0 {
                                Some(e) => {
                                    let vec3 = e;
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    (1i32, ptr3.cast_mut(), len3)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            let (result9_0, result9_1, result9_2) = match meta0 {
                                Some(e) => {
                                    let vec8 = e;
                                    let len8 = vec8.len();
                                    let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec8.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result8 = if layout8.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout8);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec8.into_iter().enumerate() {
                                        let base = result8
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t5_0, t5_1) = e;
                                            let vec6 = t5_0;
                                            let ptr6 = vec6.as_ptr().cast::<u8>();
                                            let len6 = vec6.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len6;
                                            *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                                            let vec7 = t5_1;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len7;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr7.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result8, layout8)]);
                                    (1i32, result8, len8)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                0i32,
                                ptr1.cast_mut(),
                                ::core::mem::MaybeUninit::new(len1 as i64 as u64),
                                ::core::mem::MaybeUninit::new(
                                    (_rt::as_f64(progress0)).to_bits() as i64 as u64,
                                ),
                                result2_0 as *mut u8,
                                ::core::mem::MaybeUninit::new(
                                    (result2_1).to_bits() as i64 as u64,
                                ),
                                result4_0 as usize,
                                result4_1,
                                result4_2 as *mut u8,
                                result9_0 as usize,
                                result9_1,
                                result9_2 as *mut u8,
                                0usize,
                            )
                        }
                        Notification::Cancelled(e) => {
                            let CancelledNotification {
                                request_id: request_id10,
                                reason: reason10,
                                meta: meta10,
                            } = e;
                            use super::super::super::fastertools::mcp::types::RequestId as V12;
                            let (result13_0, result13_1, result13_2) = match request_id10 {
                                V12::Str(e) => {
                                    let vec11 = e;
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    (
                                        0i32,
                                        {
                                            let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                            t.as_mut_ptr().cast::<*mut u8>().write(ptr11.cast_mut());
                                            t
                                        },
                                        len11,
                                    )
                                }
                                V12::Num(e) => {
                                    (
                                        1i32,
                                        ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                        0usize,
                                    )
                                }
                            };
                            let (result15_0, result15_1, result15_2) = match reason10 {
                                Some(e) => {
                                    let vec14 = e;
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    (1i32, ptr14.cast_mut(), len14)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            let (result20_0, result20_1, result20_2) = match meta10 {
                                Some(e) => {
                                    let vec19 = e;
                                    let len19 = vec19.len();
                                    let layout19 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec19.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result19 = if layout19.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout19).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout19);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec19.into_iter().enumerate() {
                                        let base = result19
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t16_0, t16_1) = e;
                                            let vec17 = t16_0;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len17;
                                            *base.add(0).cast::<*mut u8>() = ptr17.cast_mut();
                                            let vec18 = t16_1;
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len18;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr18.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result19, layout19)]);
                                    (1i32, result19, len19)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                1i32,
                                result13_0 as *mut u8,
                                result13_1,
                                ::core::mem::MaybeUninit::new(result13_2 as i64 as u64),
                                result15_0 as *mut u8,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(result15_1);
                                    t
                                },
                                result15_2,
                                result20_0 as *mut u8,
                                result20_1,
                                result20_2,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                        Notification::ToolsListChanged(e) => {
                            let ToolsListChanged { meta: meta21 } = e;
                            let (result26_0, result26_1, result26_2) = match meta21 {
                                Some(e) => {
                                    let vec25 = e;
                                    let len25 = vec25.len();
                                    let layout25 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec25.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result25 = if layout25.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout25).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout25);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec25.into_iter().enumerate() {
                                        let base = result25
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t22_0, t22_1) = e;
                                            let vec23 = t22_0;
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len23;
                                            *base.add(0).cast::<*mut u8>() = ptr23.cast_mut();
                                            let vec24 = t22_1;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len24;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr24.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result25, layout25)]);
                                    (1i32, result25, len25)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                2i32,
                                result26_0 as *mut u8,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(result26_1);
                                    t
                                },
                                ::core::mem::MaybeUninit::new(result26_2 as i64 as u64),
                                ::core::ptr::null_mut(),
                                ::core::mem::MaybeUninit::<u64>::zeroed(),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                        Notification::ResourcesListChanged(e) => {
                            let ResourcesListChanged { meta: meta27 } = e;
                            let (result32_0, result32_1, result32_2) = match meta27 {
                                Some(e) => {
                                    let vec31 = e;
                                    let len31 = vec31.len();
                                    let layout31 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec31.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result31 = if layout31.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout31).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout31);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec31.into_iter().enumerate() {
                                        let base = result31
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t28_0, t28_1) = e;
                                            let vec29 = t28_0;
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len29;
                                            *base.add(0).cast::<*mut u8>() = ptr29.cast_mut();
                                            let vec30 = t28_1;
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len30;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr30.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result31, layout31)]);
                                    (1i32, result31, len31)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                3i32,
                                result32_0 as *mut u8,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(result32_1);
                                    t
                                },
                                ::core::mem::MaybeUninit::new(result32_2 as i64 as u64),
                                ::core::ptr::null_mut(),
                                ::core::mem::MaybeUninit::<u64>::zeroed(),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                        Notification::PromptsListChanged(e) => {
                            let PromptsListChanged { meta: meta33 } = e;
                            let (result38_0, result38_1, result38_2) = match meta33 {
                                Some(e) => {
                                    let vec37 = e;
                                    let len37 = vec37.len();
                                    let layout37 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec37.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result37 = if layout37.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout37).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout37);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec37.into_iter().enumerate() {
                                        let base = result37
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t34_0, t34_1) = e;
                                            let vec35 = t34_0;
                                            let ptr35 = vec35.as_ptr().cast::<u8>();
                                            let len35 = vec35.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len35;
                                            *base.add(0).cast::<*mut u8>() = ptr35.cast_mut();
                                            let vec36 = t34_1;
                                            let ptr36 = vec36.as_ptr().cast::<u8>();
                                            let len36 = vec36.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len36;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr36.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result37, layout37)]);
                                    (1i32, result37, len37)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                4i32,
                                result38_0 as *mut u8,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(result38_1);
                                    t
                                },
                                ::core::mem::MaybeUninit::new(result38_2 as i64 as u64),
                                ::core::ptr::null_mut(),
                                ::core::mem::MaybeUninit::<u64>::zeroed(),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                        Notification::ResourceUpdated(e) => {
                            let ResourceUpdated { uri: uri39, meta: meta39 } = e;
                            let vec40 = uri39;
                            let ptr40 = vec40.as_ptr().cast::<u8>();
                            let len40 = vec40.len();
                            let (result45_0, result45_1, result45_2) = match meta39 {
                                Some(e) => {
                                    let vec44 = e;
                                    let len44 = vec44.len();
                                    let layout44 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec44.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result44 = if layout44.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout44).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout44);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec44.into_iter().enumerate() {
                                        let base = result44
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t41_0, t41_1) = e;
                                            let vec42 = t41_0;
                                            let ptr42 = vec42.as_ptr().cast::<u8>();
                                            let len42 = vec42.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len42;
                                            *base.add(0).cast::<*mut u8>() = ptr42.cast_mut();
                                            let vec43 = t41_1;
                                            let ptr43 = vec43.as_ptr().cast::<u8>();
                                            let len43 = vec43.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len43;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr43.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result44, layout44)]);
                                    (1i32, result44, len44)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                5i32,
                                ptr40.cast_mut(),
                                ::core::mem::MaybeUninit::new(len40 as i64 as u64),
                                ::core::mem::MaybeUninit::new(i64::from(result45_0) as u64),
                                result45_1,
                                ::core::mem::MaybeUninit::new(result45_2 as i64 as u64),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                        Notification::RootsListChanged(e) => {
                            let RootsListChanged { meta: meta46 } = e;
                            let (result51_0, result51_1, result51_2) = match meta46 {
                                Some(e) => {
                                    let vec50 = e;
                                    let len50 = vec50.len();
                                    let layout50 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec50.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result50 = if layout50.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout50).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout50);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec50.into_iter().enumerate() {
                                        let base = result50
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t47_0, t47_1) = e;
                                            let vec48 = t47_0;
                                            let ptr48 = vec48.as_ptr().cast::<u8>();
                                            let len48 = vec48.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len48;
                                            *base.add(0).cast::<*mut u8>() = ptr48.cast_mut();
                                            let vec49 = t47_1;
                                            let ptr49 = vec49.as_ptr().cast::<u8>();
                                            let len49 = vec49.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len49;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr49.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result50, layout50)]);
                                    (1i32, result50, len50)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                6i32,
                                result51_0 as *mut u8,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(result51_1);
                                    t
                                },
                                ::core::mem::MaybeUninit::new(result51_2 as i64 as u64),
                                ::core::ptr::null_mut(),
                                ::core::mem::MaybeUninit::<u64>::zeroed(),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                        Notification::LogMessage(e) => {
                            let LogMessage {
                                level: level52,
                                logger: logger52,
                                message: message52,
                                data: data52,
                                meta: meta52,
                            } = e;
                            let (result54_0, result54_1, result54_2) = match logger52 {
                                Some(e) => {
                                    let vec53 = e;
                                    let ptr53 = vec53.as_ptr().cast::<u8>();
                                    let len53 = vec53.len();
                                    (1i32, ptr53.cast_mut(), len53)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            let vec55 = message52;
                            let ptr55 = vec55.as_ptr().cast::<u8>();
                            let len55 = vec55.len();
                            let (result60_0, result60_1, result60_2) = match data52 {
                                Some(e) => {
                                    let vec59 = e;
                                    let len59 = vec59.len();
                                    let layout59 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec59.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result59 = if layout59.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout59).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout59);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec59.into_iter().enumerate() {
                                        let base = result59
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t56_0, t56_1) = e;
                                            let vec57 = t56_0;
                                            let ptr57 = vec57.as_ptr().cast::<u8>();
                                            let len57 = vec57.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len57;
                                            *base.add(0).cast::<*mut u8>() = ptr57.cast_mut();
                                            let vec58 = t56_1;
                                            let ptr58 = vec58.as_ptr().cast::<u8>();
                                            let len58 = vec58.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len58;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr58.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result59, layout59)]);
                                    (1i32, result59, len59)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            let (result65_0, result65_1, result65_2) = match meta52 {
                                Some(e) => {
                                    let vec64 = e;
                                    let len64 = vec64.len();
                                    let layout64 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec64.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result64 = if layout64.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout64).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout64);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec64.into_iter().enumerate() {
                                        let base = result64
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t61_0, t61_1) = e;
                                            let vec62 = t61_0;
                                            let ptr62 = vec62.as_ptr().cast::<u8>();
                                            let len62 = vec62.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len62;
                                            *base.add(0).cast::<*mut u8>() = ptr62.cast_mut();
                                            let vec63 = t61_1;
                                            let ptr63 = vec63.as_ptr().cast::<u8>();
                                            let len63 = vec63.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len63;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr63.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result64, layout64)]);
                                    (1i32, result64, len64)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                7i32,
                                level52.clone() as i32 as *mut u8,
                                ::core::mem::MaybeUninit::new(i64::from(result54_0) as u64),
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(result54_1);
                                    t
                                },
                                result54_2 as *mut u8,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(ptr55.cast_mut());
                                    t
                                },
                                len55,
                                result60_0 as *mut u8,
                                result60_1,
                                result60_2,
                                result65_0 as *mut u8,
                                result65_1,
                                result65_2,
                            )
                        }
                    };
                    let ptr67 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fastertools:mcp/notifications@0.1.10")]
                    unsafe extern "C" {
                        #[link_name = "send-notification"]
                        fn wit_import68(
                            _: i32,
                            _: *mut u8,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: *mut u8,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: *mut u8,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import68(
                        _: i32,
                        _: *mut u8,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: *mut u8,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: usize,
                        _: *mut u8,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import68(
                            result66_0,
                            result66_1,
                            result66_2,
                            result66_3,
                            result66_4,
                            result66_5,
                            result66_6,
                            result66_7,
                            result66_8,
                            result66_9,
                            result66_10,
                            result66_11,
                            result66_12,
                            ptr67,
                        )
                    };
                    let l69 = i32::from(*ptr67.add(0).cast::<u8>());
                    let result80 = match l69 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l70 = i32::from(
                                    *ptr67.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V72;
                                let v72 = match l70 {
                                    0 => V72::ParseError,
                                    1 => V72::InvalidRequest,
                                    2 => V72::MethodNotFound,
                                    3 => V72::InvalidParams,
                                    4 => V72::InternalError,
                                    5 => V72::ResourceNotFound,
                                    6 => V72::ToolNotFound,
                                    7 => V72::PromptNotFound,
                                    8 => V72::Unauthorized,
                                    9 => V72::RateLimited,
                                    10 => V72::Timeout,
                                    11 => V72::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e72 = {
                                            let l71 = *ptr67
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l71
                                        };
                                        V72::CustomCode(e72)
                                    }
                                };
                                let l73 = *ptr67
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l74 = *ptr67
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len75 = l74;
                                let bytes75 = _rt::Vec::from_raw_parts(
                                    l73.cast(),
                                    len75,
                                    len75,
                                );
                                let l76 = i32::from(
                                    *ptr67
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v72,
                                    message: _rt::string_lift(bytes75),
                                    data: match l76 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l77 = *ptr67
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l78 = *ptr67
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len79 = l78;
                                                let bytes79 = _rt::Vec::from_raw_parts(
                                                    l77.cast(),
                                                    len79,
                                                    len79,
                                                );
                                                _rt::string_lift(bytes79)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result80
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Set the minimum log level for log notifications
            pub fn set_log_level(level: LogLevel) -> Result<(), McpError> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fastertools:mcp/notifications@0.1.10")]
                    unsafe extern "C" {
                        #[link_name = "set-log-level"]
                        fn wit_import1(_: i32, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(level.clone() as i32, ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result13 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = i32::from(
                                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V5;
                                let v5 = match l3 {
                                    0 => V5::ParseError,
                                    1 => V5::InvalidRequest,
                                    2 => V5::MethodNotFound,
                                    3 => V5::InvalidParams,
                                    4 => V5::InternalError,
                                    5 => V5::ResourceNotFound,
                                    6 => V5::ToolNotFound,
                                    7 => V5::PromptNotFound,
                                    8 => V5::Unauthorized,
                                    9 => V5::RateLimited,
                                    10 => V5::Timeout,
                                    11 => V5::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e5 = {
                                            let l4 = *ptr0
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l4
                                        };
                                        V5::CustomCode(e5)
                                    }
                                };
                                let l6 = *ptr0
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr0
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                let l9 = i32::from(
                                    *ptr0
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v5,
                                    message: _rt::string_lift(bytes8),
                                    data: match l9 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l10 = *ptr0
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l11 = *ptr0
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result13
                }
            }
        }
        /// Tool discovery and execution for MCP
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod tools {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type ContentBlock = super::super::super::fastertools::mcp::types::ContentBlock;
            pub type JsonValue = super::super::super::fastertools::mcp::types::JsonValue;
            pub type JsonSchema = super::super::super::fastertools::mcp::types::JsonSchema;
            pub type BaseMetadata = super::super::super::fastertools::mcp::types::BaseMetadata;
            pub type MetaFields = super::super::super::fastertools::mcp::types::MetaFields;
            pub type Cursor = super::super::super::fastertools::mcp::types::Cursor;
            pub type ProgressToken = super::super::super::fastertools::mcp::types::ProgressToken;
            /// Behavioral hints about tool operations
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ToolAnnotations {
                /// Human-readable title for display
                pub title: Option<_rt::String>,
                /// Tool does not modify environment
                pub read_only_hint: Option<bool>,
                /// Tool may perform destructive updates (meaningful when not read-only)
                pub destructive_hint: Option<bool>,
                /// Repeated calls with same args have no additional effect
                pub idempotent_hint: Option<bool>,
                /// Tool interacts with external entities
                pub open_world_hint: Option<bool>,
            }
            impl ::core::fmt::Debug for ToolAnnotations {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolAnnotations")
                        .field("title", &self.title)
                        .field("read-only-hint", &self.read_only_hint)
                        .field("destructive-hint", &self.destructive_hint)
                        .field("idempotent-hint", &self.idempotent_hint)
                        .field("open-world-hint", &self.open_world_hint)
                        .finish()
                }
            }
            /// Tool definition with metadata and schema
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct Tool {
                /// Base metadata (name and optional title)
                pub base: BaseMetadata,
                /// Human-readable description of what the tool does
                pub description: Option<_rt::String>,
                /// JSON Schema for input parameters
                pub input_schema: JsonSchema,
                /// Optional schema for structured output
                pub output_schema: Option<JsonSchema>,
                /// Behavioral hints for clients
                pub annotations: Option<ToolAnnotations>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for Tool {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Tool")
                        .field("base", &self.base)
                        .field("description", &self.description)
                        .field("input-schema", &self.input_schema)
                        .field("output-schema", &self.output_schema)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Result from executing a tool
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ToolResult {
                /// Unstructured content blocks (text, images, etc.)
                pub content: _rt::Vec<ContentBlock>,
                /// Optional structured JSON output
                pub structured_content: Option<JsonValue>,
                /// Whether the tool execution resulted in an error
                /// If true, content should contain error details
                pub is_error: Option<bool>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ToolResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolResult")
                        .field("content", &self.content)
                        .field("structured-content", &self.structured_content)
                        .field("is-error", &self.is_error)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Request to list available tools
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ListToolsRequest {
                /// Pagination cursor from previous response
                pub cursor: Option<Cursor>,
                /// Optional progress tracking token
                pub progress_token: Option<ProgressToken>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ListToolsRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListToolsRequest")
                        .field("cursor", &self.cursor)
                        .field("progress-token", &self.progress_token)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Response with list of available tools
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ListToolsResponse {
                /// Available tools
                pub tools: _rt::Vec<Tool>,
                /// Cursor for next page if more tools exist
                pub next_cursor: Option<Cursor>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ListToolsResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListToolsResponse")
                        .field("tools", &self.tools)
                        .field("next-cursor", &self.next_cursor)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Request to execute a tool
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct CallToolRequest {
                /// Name of the tool to execute
                pub name: _rt::String,
                /// Arguments as JSON object
                pub arguments: Option<JsonValue>,
                /// Optional progress tracking token
                pub progress_token: Option<ProgressToken>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for CallToolRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CallToolRequest")
                        .field("name", &self.name)
                        .field("arguments", &self.arguments)
                        .field("progress-token", &self.progress_token)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
        }
        /// Resource discovery, reading, and subscription for MCP
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod resources {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type BaseMetadata = super::super::super::fastertools::mcp::types::BaseMetadata;
            pub type Annotations = super::super::super::fastertools::mcp::types::Annotations;
            pub type MetaFields = super::super::super::fastertools::mcp::types::MetaFields;
            pub type Cursor = super::super::super::fastertools::mcp::types::Cursor;
            pub type ResourceContents = super::super::super::fastertools::mcp::types::ResourceContents;
            pub type ProgressToken = super::super::super::fastertools::mcp::types::ProgressToken;
            pub type ResourceTemplate = super::super::super::fastertools::mcp::types::ResourceTemplate;
            /// A resource that can be read by the client
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct McpResource {
                /// Base metadata (name and optional title)
                pub base: BaseMetadata,
                /// URI identifying the resource
                pub uri: _rt::String,
                /// Human-readable description
                pub description: Option<_rt::String>,
                /// MIME type if known
                pub mime_type: Option<_rt::String>,
                /// Size in bytes (before encoding)
                pub size: Option<u64>,
                /// Client hints
                pub annotations: Option<Annotations>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for McpResource {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("McpResource")
                        .field("base", &self.base)
                        .field("uri", &self.uri)
                        .field("description", &self.description)
                        .field("mime-type", &self.mime_type)
                        .field("size", &self.size)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Request to list available resources
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ListResourcesRequest {
                /// Pagination cursor
                pub cursor: Option<Cursor>,
                /// Progress tracking token
                pub progress_token: Option<ProgressToken>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ListResourcesRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListResourcesRequest")
                        .field("cursor", &self.cursor)
                        .field("progress-token", &self.progress_token)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Response with list of resources
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ListResourcesResponse {
                /// Available resources
                pub resources: _rt::Vec<McpResource>,
                /// Cursor for next page
                pub next_cursor: Option<Cursor>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ListResourcesResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListResourcesResponse")
                        .field("resources", &self.resources)
                        .field("next-cursor", &self.next_cursor)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Request to list resource templates
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ListTemplatesRequest {
                /// Pagination cursor
                pub cursor: Option<Cursor>,
                /// Progress tracking token
                pub progress_token: Option<ProgressToken>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ListTemplatesRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListTemplatesRequest")
                        .field("cursor", &self.cursor)
                        .field("progress-token", &self.progress_token)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Response with list of resource templates
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ListTemplatesResponse {
                /// Available templates
                pub templates: _rt::Vec<ResourceTemplate>,
                /// Cursor for next page
                pub next_cursor: Option<Cursor>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ListTemplatesResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListTemplatesResponse")
                        .field("templates", &self.templates)
                        .field("next-cursor", &self.next_cursor)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Request to read a specific resource
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ReadResourceRequest {
                /// URI of the resource to read
                pub uri: _rt::String,
                /// Progress tracking token
                pub progress_token: Option<ProgressToken>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ReadResourceRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ReadResourceRequest")
                        .field("uri", &self.uri)
                        .field("progress-token", &self.progress_token)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Response with resource contents
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ReadResourceResponse {
                /// Resource contents (may be multiple for sub-resources)
                pub contents: _rt::Vec<ResourceContents>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ReadResourceResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ReadResourceResponse")
                        .field("contents", &self.contents)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Request to subscribe to resource updates
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct SubscribeRequest {
                /// URI of the resource to monitor
                pub uri: _rt::String,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for SubscribeRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("SubscribeRequest")
                        .field("uri", &self.uri)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Request to unsubscribe from resource updates
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct UnsubscribeRequest {
                /// URI of the resource to stop monitoring
                pub uri: _rt::String,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for UnsubscribeRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("UnsubscribeRequest")
                        .field("uri", &self.uri)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
        }
        /// Prompt template discovery and rendering for MCP
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod prompts {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type MessageRole = super::super::super::fastertools::mcp::types::MessageRole;
            pub type ContentBlock = super::super::super::fastertools::mcp::types::ContentBlock;
            pub type BaseMetadata = super::super::super::fastertools::mcp::types::BaseMetadata;
            pub type MetaFields = super::super::super::fastertools::mcp::types::MetaFields;
            pub type Cursor = super::super::super::fastertools::mcp::types::Cursor;
            pub type ProgressToken = super::super::super::fastertools::mcp::types::ProgressToken;
            /// Argument definition for a prompt template
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct PromptArgument {
                /// Base metadata (name and optional title)
                pub base: BaseMetadata,
                /// Human-readable description
                pub description: Option<_rt::String>,
                /// Whether this argument is required
                pub required: Option<bool>,
            }
            impl ::core::fmt::Debug for PromptArgument {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PromptArgument")
                        .field("base", &self.base)
                        .field("description", &self.description)
                        .field("required", &self.required)
                        .finish()
                }
            }
            /// Prompt template definition
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct Prompt {
                /// Base metadata (name and optional title)
                pub base: BaseMetadata,
                /// Description of what this prompt does
                pub description: Option<_rt::String>,
                /// Arguments that can be passed to the prompt
                pub arguments: Option<_rt::Vec<PromptArgument>>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for Prompt {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Prompt")
                        .field("base", &self.base)
                        .field("description", &self.description)
                        .field("arguments", &self.arguments)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Message in a prompt conversation
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct PromptMessage {
                /// Who is speaking (user, assistant, or system)
                pub role: MessageRole,
                /// Message content
                pub content: ContentBlock,
            }
            impl ::core::fmt::Debug for PromptMessage {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PromptMessage")
                        .field("role", &self.role)
                        .field("content", &self.content)
                        .finish()
                }
            }
            /// Request to list available prompts
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ListPromptsRequest {
                /// Pagination cursor
                pub cursor: Option<Cursor>,
                /// Progress tracking token
                pub progress_token: Option<ProgressToken>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ListPromptsRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListPromptsRequest")
                        .field("cursor", &self.cursor)
                        .field("progress-token", &self.progress_token)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Response with list of prompts
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ListPromptsResponse {
                /// Available prompts
                pub prompts: _rt::Vec<Prompt>,
                /// Cursor for next page
                pub next_cursor: Option<Cursor>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ListPromptsResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListPromptsResponse")
                        .field("prompts", &self.prompts)
                        .field("next-cursor", &self.next_cursor)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Request to get a specific prompt
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct GetPromptRequest {
                /// Name of the prompt to retrieve
                pub name: _rt::String,
                /// Arguments for template substitution
                pub arguments: Option<_rt::Vec<(_rt::String, _rt::String)>>,
                /// Progress tracking token
                pub progress_token: Option<ProgressToken>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for GetPromptRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("GetPromptRequest")
                        .field("name", &self.name)
                        .field("arguments", &self.arguments)
                        .field("progress-token", &self.progress_token)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Response with rendered prompt messages
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct GetPromptResponse {
                /// Optional description of the rendered prompt
                pub description: Option<_rt::String>,
                /// Messages that make up the prompt
                pub messages: _rt::Vec<PromptMessage>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for GetPromptResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("GetPromptResponse")
                        .field("description", &self.description)
                        .field("messages", &self.messages)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
        }
        /// LLM sampling interface - allows servers to request AI assistance from clients
        /// This enables powerful agent workflows where servers can leverage client LLM access
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod sampling {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type McpError = super::super::super::fastertools::mcp::types::McpError;
            pub type ContentBlock = super::super::super::fastertools::mcp::types::ContentBlock;
            pub type MessageRole = super::super::super::fastertools::mcp::types::MessageRole;
            pub type ModelPreferences = super::super::super::fastertools::mcp::types::ModelPreferences;
            pub type MetaFields = super::super::super::fastertools::mcp::types::MetaFields;
            /// Message in a conversation with the LLM
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct SamplingMessage {
                /// Role of the message sender
                pub role: MessageRole,
                /// Content of the message
                pub content: ContentBlock,
            }
            impl ::core::fmt::Debug for SamplingMessage {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("SamplingMessage")
                        .field("role", &self.role)
                        .field("content", &self.content)
                        .finish()
                }
            }
            /// Request to create/sample a message from an LLM
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct CreateMessageRequest {
                /// Conversation messages to send to the LLM
                pub messages: _rt::Vec<SamplingMessage>,
                /// Optional model selection preferences
                pub model_preferences: Option<ModelPreferences>,
                /// System prompt to guide the LLM
                pub system_prompt: Option<_rt::String>,
                /// Request to include MCP context from servers
                pub include_context: Option<_rt::String>,
                /// Sampling temperature (0.0-2.0, higher = more creative)
                pub temperature: Option<f64>,
                /// Maximum tokens to generate
                pub max_tokens: i32,
                /// Sequences that stop generation
                pub stop_sequences: Option<_rt::Vec<_rt::String>>,
                /// Provider-specific metadata
                pub metadata: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for CreateMessageRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CreateMessageRequest")
                        .field("messages", &self.messages)
                        .field("model-preferences", &self.model_preferences)
                        .field("system-prompt", &self.system_prompt)
                        .field("include-context", &self.include_context)
                        .field("temperature", &self.temperature)
                        .field("max-tokens", &self.max_tokens)
                        .field("stop-sequences", &self.stop_sequences)
                        .field("metadata", &self.metadata)
                        .finish()
                }
            }
            /// Response from LLM sampling
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct CreateMessageResult {
                /// Role of the generated message (usually assistant)
                pub role: MessageRole,
                /// Generated content
                pub content: ContentBlock,
                /// Model that was used
                pub model: _rt::String,
                /// Reason generation stopped (e.g., "stop", "max_tokens")
                pub stop_reason: Option<_rt::String>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for CreateMessageResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CreateMessageResult")
                        .field("role", &self.role)
                        .field("content", &self.content)
                        .field("model", &self.model)
                        .field("stop-reason", &self.stop_reason)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Request LLM sampling from the client
            /// The client has full discretion over model selection and may
            /// inform the user before sampling (human in the loop)
            pub fn create_message(
                request: &CreateMessageRequest,
            ) -> Result<CreateMessageResult, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 96 + 26 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 96
                            + 26 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    let CreateMessageRequest {
                        messages: messages1,
                        model_preferences: model_preferences1,
                        system_prompt: system_prompt1,
                        include_context: include_context1,
                        temperature: temperature1,
                        max_tokens: max_tokens1,
                        stop_sequences: stop_sequences1,
                        metadata: metadata1,
                    } = request;
                    let vec71 = messages1;
                    let len71 = vec71.len();
                    let layout71 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec71.len() * (88 + 18 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result71 = if layout71.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout71).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout71);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec71.into_iter().enumerate() {
                        let base = result71
                            .add(i * (88 + 18 * ::core::mem::size_of::<*const u8>()));
                        {
                            let SamplingMessage { role: role2, content: content2 } = e;
                            *base.add(0).cast::<u8>() = (role2.clone() as i32) as u8;
                            use super::super::super::fastertools::mcp::types::ContentBlock as V70;
                            match content2 {
                                V70::Text(e) => {
                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                    let super::super::super::fastertools::mcp::types::TextContent {
                                        text: text3,
                                        annotations: annotations3,
                                        meta: meta3,
                                    } = e;
                                    let vec4 = text3;
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    *base
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *base.add(16).cast::<*mut u8>() = ptr4.cast_mut();
                                    match annotations3 {
                                        Some(e) => {
                                            *base
                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::fastertools::mcp::types::Annotations {
                                                audience: audience5,
                                                priority: priority5,
                                                last_modified: last_modified5,
                                            } = e;
                                            match audience5 {
                                                Some(e) => {
                                                    *base
                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec6 = e;
                                                    let len6 = vec6.len();
                                                    let layout6 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec6.len() * 1,
                                                        1,
                                                    );
                                                    let result6 = if layout6.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout6);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec6.into_iter().enumerate() {
                                                        let base = result6.add(i * 1);
                                                        {
                                                            *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                        }
                                                    }
                                                    *base
                                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len6;
                                                    *base
                                                        .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result6;
                                                    cleanup_list.extend_from_slice(&[(result6, layout6)]);
                                                }
                                                None => {
                                                    *base
                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match priority5 {
                                                Some(e) => {
                                                    *base
                                                        .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(e);
                                                }
                                                None => {
                                                    *base
                                                        .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match last_modified5 {
                                                Some(e) => {
                                                    *base
                                                        .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec7 = e;
                                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                                    let len7 = vec7.len();
                                                    *base
                                                        .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len7;
                                                    *base
                                                        .add(48 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr7.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        None => {
                                            *base
                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match meta3 {
                                        Some(e) => {
                                            *base
                                                .add(56 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec11 = e;
                                            let len11 = vec11.len();
                                            let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec11.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result11 = if layout11.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout11);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec11.into_iter().enumerate() {
                                                let base = result11
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t8_0, t8_1) = e;
                                                    let vec9 = t8_0;
                                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                                    let len9 = vec9.len();
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len9;
                                                    *base.add(0).cast::<*mut u8>() = ptr9.cast_mut();
                                                    let vec10 = t8_1;
                                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                                    let len10 = vec10.len();
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len10;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr10.cast_mut();
                                                }
                                            }
                                            *base
                                                .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len11;
                                            *base
                                                .add(56 + 7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result11;
                                            cleanup_list.extend_from_slice(&[(result11, layout11)]);
                                        }
                                        None => {
                                            *base
                                                .add(56 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                V70::Image(e) => {
                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                    let super::super::super::fastertools::mcp::types::ImageContent {
                                        data: data12,
                                        mime_type: mime_type12,
                                        annotations: annotations12,
                                        meta: meta12,
                                    } = e;
                                    let vec13 = data12;
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    *base
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len13;
                                    *base.add(16).cast::<*mut u8>() = ptr13.cast_mut();
                                    let vec14 = mime_type12;
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    *base
                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *base
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr14.cast_mut();
                                    match annotations12 {
                                        Some(e) => {
                                            *base
                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::fastertools::mcp::types::Annotations {
                                                audience: audience15,
                                                priority: priority15,
                                                last_modified: last_modified15,
                                            } = e;
                                            match audience15 {
                                                Some(e) => {
                                                    *base
                                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec16 = e;
                                                    let len16 = vec16.len();
                                                    let layout16 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec16.len() * 1,
                                                        1,
                                                    );
                                                    let result16 = if layout16.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout16).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout16);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec16.into_iter().enumerate() {
                                                        let base = result16.add(i * 1);
                                                        {
                                                            *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                        }
                                                    }
                                                    *base
                                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len16;
                                                    *base
                                                        .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result16;
                                                    cleanup_list.extend_from_slice(&[(result16, layout16)]);
                                                }
                                                None => {
                                                    *base
                                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match priority15 {
                                                Some(e) => {
                                                    *base
                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(e);
                                                }
                                                None => {
                                                    *base
                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match last_modified15 {
                                                Some(e) => {
                                                    *base
                                                        .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec17 = e;
                                                    let ptr17 = vec17.as_ptr().cast::<u8>();
                                                    let len17 = vec17.len();
                                                    *base
                                                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len17;
                                                    *base
                                                        .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr17.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        None => {
                                            *base
                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match meta12 {
                                        Some(e) => {
                                            *base
                                                .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec21 = e;
                                            let len21 = vec21.len();
                                            let layout21 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec21.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result21 = if layout21.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout21).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout21);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec21.into_iter().enumerate() {
                                                let base = result21
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t18_0, t18_1) = e;
                                                    let vec19 = t18_0;
                                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                                    let len19 = vec19.len();
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len19;
                                                    *base.add(0).cast::<*mut u8>() = ptr19.cast_mut();
                                                    let vec20 = t18_1;
                                                    let ptr20 = vec20.as_ptr().cast::<u8>();
                                                    let len20 = vec20.len();
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len20;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr20.cast_mut();
                                                }
                                            }
                                            *base
                                                .add(56 + 10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len21;
                                            *base
                                                .add(56 + 9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result21;
                                            cleanup_list.extend_from_slice(&[(result21, layout21)]);
                                        }
                                        None => {
                                            *base
                                                .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                V70::Audio(e) => {
                                    *base.add(8).cast::<u8>() = (2i32) as u8;
                                    let super::super::super::fastertools::mcp::types::AudioContent {
                                        data: data22,
                                        mime_type: mime_type22,
                                        annotations: annotations22,
                                        meta: meta22,
                                    } = e;
                                    let vec23 = data22;
                                    let ptr23 = vec23.as_ptr().cast::<u8>();
                                    let len23 = vec23.len();
                                    *base
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len23;
                                    *base.add(16).cast::<*mut u8>() = ptr23.cast_mut();
                                    let vec24 = mime_type22;
                                    let ptr24 = vec24.as_ptr().cast::<u8>();
                                    let len24 = vec24.len();
                                    *base
                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len24;
                                    *base
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr24.cast_mut();
                                    match annotations22 {
                                        Some(e) => {
                                            *base
                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::fastertools::mcp::types::Annotations {
                                                audience: audience25,
                                                priority: priority25,
                                                last_modified: last_modified25,
                                            } = e;
                                            match audience25 {
                                                Some(e) => {
                                                    *base
                                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec26 = e;
                                                    let len26 = vec26.len();
                                                    let layout26 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec26.len() * 1,
                                                        1,
                                                    );
                                                    let result26 = if layout26.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout26).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout26);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec26.into_iter().enumerate() {
                                                        let base = result26.add(i * 1);
                                                        {
                                                            *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                        }
                                                    }
                                                    *base
                                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len26;
                                                    *base
                                                        .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result26;
                                                    cleanup_list.extend_from_slice(&[(result26, layout26)]);
                                                }
                                                None => {
                                                    *base
                                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match priority25 {
                                                Some(e) => {
                                                    *base
                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(e);
                                                }
                                                None => {
                                                    *base
                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match last_modified25 {
                                                Some(e) => {
                                                    *base
                                                        .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec27 = e;
                                                    let ptr27 = vec27.as_ptr().cast::<u8>();
                                                    let len27 = vec27.len();
                                                    *base
                                                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len27;
                                                    *base
                                                        .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr27.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        None => {
                                            *base
                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match meta22 {
                                        Some(e) => {
                                            *base
                                                .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec31 = e;
                                            let len31 = vec31.len();
                                            let layout31 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec31.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result31 = if layout31.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout31).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout31);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec31.into_iter().enumerate() {
                                                let base = result31
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t28_0, t28_1) = e;
                                                    let vec29 = t28_0;
                                                    let ptr29 = vec29.as_ptr().cast::<u8>();
                                                    let len29 = vec29.len();
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len29;
                                                    *base.add(0).cast::<*mut u8>() = ptr29.cast_mut();
                                                    let vec30 = t28_1;
                                                    let ptr30 = vec30.as_ptr().cast::<u8>();
                                                    let len30 = vec30.len();
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len30;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr30.cast_mut();
                                                }
                                            }
                                            *base
                                                .add(56 + 10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len31;
                                            *base
                                                .add(56 + 9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result31;
                                            cleanup_list.extend_from_slice(&[(result31, layout31)]);
                                        }
                                        None => {
                                            *base
                                                .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                V70::ResourceLink(e) => {
                                    *base.add(8).cast::<u8>() = (3i32) as u8;
                                    let super::super::super::fastertools::mcp::types::ResourceLink {
                                        uri: uri32,
                                        name: name32,
                                        title: title32,
                                        description: description32,
                                        mime_type: mime_type32,
                                        size: size32,
                                        annotations: annotations32,
                                        meta: meta32,
                                    } = e;
                                    let vec33 = uri32;
                                    let ptr33 = vec33.as_ptr().cast::<u8>();
                                    let len33 = vec33.len();
                                    *base
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len33;
                                    *base.add(16).cast::<*mut u8>() = ptr33.cast_mut();
                                    let vec34 = name32;
                                    let ptr34 = vec34.as_ptr().cast::<u8>();
                                    let len34 = vec34.len();
                                    *base
                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len34;
                                    *base
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr34.cast_mut();
                                    match title32 {
                                        Some(e) => {
                                            *base
                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec35 = e;
                                            let ptr35 = vec35.as_ptr().cast::<u8>();
                                            let len35 = vec35.len();
                                            *base
                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len35;
                                            *base
                                                .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr35.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match description32 {
                                        Some(e) => {
                                            *base
                                                .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec36 = e;
                                            let ptr36 = vec36.as_ptr().cast::<u8>();
                                            let len36 = vec36.len();
                                            *base
                                                .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len36;
                                            *base
                                                .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr36.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match mime_type32 {
                                        Some(e) => {
                                            *base
                                                .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec37 = e;
                                            let ptr37 = vec37.as_ptr().cast::<u8>();
                                            let len37 = vec37.len();
                                            *base
                                                .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len37;
                                            *base
                                                .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr37.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match size32 {
                                        Some(e) => {
                                            *base
                                                .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *base
                                                .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i64>() = _rt::as_i64(e);
                                        }
                                        None => {
                                            *base
                                                .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match annotations32 {
                                        Some(e) => {
                                            *base
                                                .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::fastertools::mcp::types::Annotations {
                                                audience: audience38,
                                                priority: priority38,
                                                last_modified: last_modified38,
                                            } = e;
                                            match audience38 {
                                                Some(e) => {
                                                    *base
                                                        .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec39 = e;
                                                    let len39 = vec39.len();
                                                    let layout39 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec39.len() * 1,
                                                        1,
                                                    );
                                                    let result39 = if layout39.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout39).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout39);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec39.into_iter().enumerate() {
                                                        let base = result39.add(i * 1);
                                                        {
                                                            *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                        }
                                                    }
                                                    *base
                                                        .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len39;
                                                    *base
                                                        .add(48 + 13 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result39;
                                                    cleanup_list.extend_from_slice(&[(result39, layout39)]);
                                                }
                                                None => {
                                                    *base
                                                        .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match priority38 {
                                                Some(e) => {
                                                    *base
                                                        .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(e);
                                                }
                                                None => {
                                                    *base
                                                        .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match last_modified38 {
                                                Some(e) => {
                                                    *base
                                                        .add(72 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec40 = e;
                                                    let ptr40 = vec40.as_ptr().cast::<u8>();
                                                    let len40 = vec40.len();
                                                    *base
                                                        .add(72 + 16 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len40;
                                                    *base
                                                        .add(72 + 15 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr40.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(72 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        None => {
                                            *base
                                                .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match meta32 {
                                        Some(e) => {
                                            *base
                                                .add(80 + 16 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec44 = e;
                                            let len44 = vec44.len();
                                            let layout44 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec44.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result44 = if layout44.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout44).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout44);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec44.into_iter().enumerate() {
                                                let base = result44
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t41_0, t41_1) = e;
                                                    let vec42 = t41_0;
                                                    let ptr42 = vec42.as_ptr().cast::<u8>();
                                                    let len42 = vec42.len();
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len42;
                                                    *base.add(0).cast::<*mut u8>() = ptr42.cast_mut();
                                                    let vec43 = t41_1;
                                                    let ptr43 = vec43.as_ptr().cast::<u8>();
                                                    let len43 = vec43.len();
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len43;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr43.cast_mut();
                                                }
                                            }
                                            *base
                                                .add(80 + 18 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len44;
                                            *base
                                                .add(80 + 17 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result44;
                                            cleanup_list.extend_from_slice(&[(result44, layout44)]);
                                        }
                                        None => {
                                            *base
                                                .add(80 + 16 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                V70::EmbeddedResource(e) => {
                                    *base.add(8).cast::<u8>() = (4i32) as u8;
                                    let super::super::super::fastertools::mcp::types::EmbeddedResource {
                                        contents: contents45,
                                        annotations: annotations45,
                                        meta: meta45,
                                    } = e;
                                    use super::super::super::fastertools::mcp::types::ResourceContents as V62;
                                    match contents45 {
                                        V62::Text(e) => {
                                            *base.add(16).cast::<u8>() = (0i32) as u8;
                                            let super::super::super::fastertools::mcp::types::TextResourceContents {
                                                uri: uri46,
                                                mime_type: mime_type46,
                                                text: text46,
                                                meta: meta46,
                                            } = e;
                                            let vec47 = uri46;
                                            let ptr47 = vec47.as_ptr().cast::<u8>();
                                            let len47 = vec47.len();
                                            *base
                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len47;
                                            *base
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr47.cast_mut();
                                            match mime_type46 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec48 = e;
                                                    let ptr48 = vec48.as_ptr().cast::<u8>();
                                                    let len48 = vec48.len();
                                                    *base
                                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len48;
                                                    *base
                                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr48.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            let vec49 = text46;
                                            let ptr49 = vec49.as_ptr().cast::<u8>();
                                            let len49 = vec49.len();
                                            *base
                                                .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len49;
                                            *base
                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr49.cast_mut();
                                            match meta46 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec53 = e;
                                                    let len53 = vec53.len();
                                                    let layout53 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec53.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result53 = if layout53.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout53).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout53);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec53.into_iter().enumerate() {
                                                        let base = result53
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t50_0, t50_1) = e;
                                                            let vec51 = t50_0;
                                                            let ptr51 = vec51.as_ptr().cast::<u8>();
                                                            let len51 = vec51.len();
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len51;
                                                            *base.add(0).cast::<*mut u8>() = ptr51.cast_mut();
                                                            let vec52 = t50_1;
                                                            let ptr52 = vec52.as_ptr().cast::<u8>();
                                                            let len52 = vec52.len();
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len52;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr52.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len53;
                                                    *base
                                                        .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result53;
                                                    cleanup_list.extend_from_slice(&[(result53, layout53)]);
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        V62::Blob(e) => {
                                            *base.add(16).cast::<u8>() = (1i32) as u8;
                                            let super::super::super::fastertools::mcp::types::BlobResourceContents {
                                                uri: uri54,
                                                mime_type: mime_type54,
                                                blob: blob54,
                                                meta: meta54,
                                            } = e;
                                            let vec55 = uri54;
                                            let ptr55 = vec55.as_ptr().cast::<u8>();
                                            let len55 = vec55.len();
                                            *base
                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len55;
                                            *base
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr55.cast_mut();
                                            match mime_type54 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec56 = e;
                                                    let ptr56 = vec56.as_ptr().cast::<u8>();
                                                    let len56 = vec56.len();
                                                    *base
                                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len56;
                                                    *base
                                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr56.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            let vec57 = blob54;
                                            let ptr57 = vec57.as_ptr().cast::<u8>();
                                            let len57 = vec57.len();
                                            *base
                                                .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len57;
                                            *base
                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr57.cast_mut();
                                            match meta54 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec61 = e;
                                                    let len61 = vec61.len();
                                                    let layout61 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec61.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result61 = if layout61.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout61).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout61);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec61.into_iter().enumerate() {
                                                        let base = result61
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t58_0, t58_1) = e;
                                                            let vec59 = t58_0;
                                                            let ptr59 = vec59.as_ptr().cast::<u8>();
                                                            let len59 = vec59.len();
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len59;
                                                            *base.add(0).cast::<*mut u8>() = ptr59.cast_mut();
                                                            let vec60 = t58_1;
                                                            let ptr60 = vec60.as_ptr().cast::<u8>();
                                                            let len60 = vec60.len();
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len60;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr60.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len61;
                                                    *base
                                                        .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result61;
                                                    cleanup_list.extend_from_slice(&[(result61, layout61)]);
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                    match annotations45 {
                                        Some(e) => {
                                            *base
                                                .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::fastertools::mcp::types::Annotations {
                                                audience: audience63,
                                                priority: priority63,
                                                last_modified: last_modified63,
                                            } = e;
                                            match audience63 {
                                                Some(e) => {
                                                    *base
                                                        .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec64 = e;
                                                    let len64 = vec64.len();
                                                    let layout64 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec64.len() * 1,
                                                        1,
                                                    );
                                                    let result64 = if layout64.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout64).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout64);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec64.into_iter().enumerate() {
                                                        let base = result64.add(i * 1);
                                                        {
                                                            *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                        }
                                                    }
                                                    *base
                                                        .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len64;
                                                    *base
                                                        .add(32 + 11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result64;
                                                    cleanup_list.extend_from_slice(&[(result64, layout64)]);
                                                }
                                                None => {
                                                    *base
                                                        .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match priority63 {
                                                Some(e) => {
                                                    *base
                                                        .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(e);
                                                }
                                                None => {
                                                    *base
                                                        .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match last_modified63 {
                                                Some(e) => {
                                                    *base
                                                        .add(56 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec65 = e;
                                                    let ptr65 = vec65.as_ptr().cast::<u8>();
                                                    let len65 = vec65.len();
                                                    *base
                                                        .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len65;
                                                    *base
                                                        .add(56 + 13 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr65.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(56 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        None => {
                                            *base
                                                .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match meta45 {
                                        Some(e) => {
                                            *base
                                                .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec69 = e;
                                            let len69 = vec69.len();
                                            let layout69 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec69.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result69 = if layout69.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout69).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout69);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec69.into_iter().enumerate() {
                                                let base = result69
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t66_0, t66_1) = e;
                                                    let vec67 = t66_0;
                                                    let ptr67 = vec67.as_ptr().cast::<u8>();
                                                    let len67 = vec67.len();
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len67;
                                                    *base.add(0).cast::<*mut u8>() = ptr67.cast_mut();
                                                    let vec68 = t66_1;
                                                    let ptr68 = vec68.as_ptr().cast::<u8>();
                                                    let len68 = vec68.len();
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len68;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr68.cast_mut();
                                                }
                                            }
                                            *base
                                                .add(64 + 16 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len69;
                                            *base
                                                .add(64 + 15 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result69;
                                            cleanup_list.extend_from_slice(&[(result69, layout69)]);
                                        }
                                        None => {
                                            *base
                                                .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                        }
                    }
                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len71;
                    *ptr0.add(0).cast::<*mut u8>() = result71;
                    match model_preferences1 {
                        Some(e) => {
                            *ptr0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let super::super::super::fastertools::mcp::types::ModelPreferences {
                                hints: hints72,
                                cost_priority: cost_priority72,
                                speed_priority: speed_priority72,
                                intelligence_priority: intelligence_priority72,
                            } = e;
                            match hints72 {
                                Some(e) => {
                                    *ptr0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec75 = e;
                                    let len75 = vec75.len();
                                    let layout75 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec75.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result75 = if layout75.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout75).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout75);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec75.into_iter().enumerate() {
                                        let base = result75
                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let super::super::super::fastertools::mcp::types::ModelHint {
                                                name: name73,
                                            } = e;
                                            match name73 {
                                                Some(e) => {
                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                    let vec74 = e;
                                                    let ptr74 = vec74.as_ptr().cast::<u8>();
                                                    let len74 = vec74.len();
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len74;
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr74.cast_mut();
                                                }
                                                None => {
                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                    *ptr0
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len75;
                                    *ptr0
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result75;
                                    cleanup_list.extend_from_slice(&[(result75, layout75)]);
                                }
                                None => {
                                    *ptr0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match cost_priority72 {
                                Some(e) => {
                                    *ptr0
                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f64>() = _rt::as_f64(e);
                                }
                                None => {
                                    *ptr0
                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match speed_priority72 {
                                Some(e) => {
                                    *ptr0
                                        .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f64>() = _rt::as_f64(e);
                                }
                                None => {
                                    *ptr0
                                        .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match intelligence_priority72 {
                                Some(e) => {
                                    *ptr0
                                        .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(56 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f64>() = _rt::as_f64(e);
                                }
                                None => {
                                    *ptr0
                                        .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        None => {
                            *ptr0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match system_prompt1 {
                        Some(e) => {
                            *ptr0
                                .add(64 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec76 = e;
                            let ptr76 = vec76.as_ptr().cast::<u8>();
                            let len76 = vec76.len();
                            *ptr0
                                .add(64 + 6 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len76;
                            *ptr0
                                .add(64 + 5 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr76.cast_mut();
                        }
                        None => {
                            *ptr0
                                .add(64 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match include_context1 {
                        Some(e) => {
                            *ptr0
                                .add(64 + 7 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec77 = e;
                            let ptr77 = vec77.as_ptr().cast::<u8>();
                            let len77 = vec77.len();
                            *ptr0
                                .add(64 + 9 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len77;
                            *ptr0
                                .add(64 + 8 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr77.cast_mut();
                        }
                        None => {
                            *ptr0
                                .add(64 + 7 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match temperature1 {
                        Some(e) => {
                            *ptr0
                                .add(64 + 10 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            *ptr0
                                .add(72 + 10 * ::core::mem::size_of::<*const u8>())
                                .cast::<f64>() = _rt::as_f64(e);
                        }
                        None => {
                            *ptr0
                                .add(64 + 10 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    *ptr0
                        .add(80 + 10 * ::core::mem::size_of::<*const u8>())
                        .cast::<i32>() = _rt::as_i32(max_tokens1);
                    match stop_sequences1 {
                        Some(e) => {
                            *ptr0
                                .add(80 + 11 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec79 = e;
                            let len79 = vec79.len();
                            let layout79 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec79.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result79 = if layout79.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout79).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout79);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec79.into_iter().enumerate() {
                                let base = result79
                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let vec78 = e;
                                    let ptr78 = vec78.as_ptr().cast::<u8>();
                                    let len78 = vec78.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len78;
                                    *base.add(0).cast::<*mut u8>() = ptr78.cast_mut();
                                }
                            }
                            *ptr0
                                .add(80 + 13 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len79;
                            *ptr0
                                .add(80 + 12 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result79;
                            cleanup_list.extend_from_slice(&[(result79, layout79)]);
                        }
                        None => {
                            *ptr0
                                .add(80 + 11 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match metadata1 {
                        Some(e) => {
                            *ptr0
                                .add(80 + 14 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec83 = e;
                            let len83 = vec83.len();
                            let layout83 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec83.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result83 = if layout83.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout83).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout83);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec83.into_iter().enumerate() {
                                let base = result83
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t80_0, t80_1) = e;
                                    let vec81 = t80_0;
                                    let ptr81 = vec81.as_ptr().cast::<u8>();
                                    let len81 = vec81.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len81;
                                    *base.add(0).cast::<*mut u8>() = ptr81.cast_mut();
                                    let vec82 = t80_1;
                                    let ptr82 = vec82.as_ptr().cast::<u8>();
                                    let len82 = vec82.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len82;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr82.cast_mut();
                                }
                            }
                            *ptr0
                                .add(80 + 16 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len83;
                            *ptr0
                                .add(80 + 15 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result83;
                            cleanup_list.extend_from_slice(&[(result83, layout83)]);
                        }
                        None => {
                            *ptr0
                                .add(80 + 14 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let ptr84 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fastertools:mcp/sampling@0.1.10")]
                    unsafe extern "C" {
                        #[link_name = "create-message"]
                        fn wit_import85(_: *mut u8, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import85(_: *mut u8, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import85(ptr0, ptr84) };
                    let l86 = i32::from(*ptr84.add(0).cast::<u8>());
                    let result304 = match l86 {
                        0 => {
                            let e = {
                                let l87 = i32::from(*ptr84.add(8).cast::<u8>());
                                let l88 = i32::from(*ptr84.add(16).cast::<u8>());
                                use super::super::super::fastertools::mcp::types::ContentBlock as V276;
                                let v276 = match l88 {
                                    0 => {
                                        let e276 = {
                                            let l89 = *ptr84.add(24).cast::<*mut u8>();
                                            let l90 = *ptr84
                                                .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len91 = l90;
                                            let bytes91 = _rt::Vec::from_raw_parts(
                                                l89.cast(),
                                                len91,
                                                len91,
                                            );
                                            let l92 = i32::from(
                                                *ptr84
                                                    .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l104 = i32::from(
                                                *ptr84
                                                    .add(64 + 6 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            super::super::super::fastertools::mcp::types::TextContent {
                                                text: _rt::string_lift(bytes91),
                                                annotations: match l92 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l93 = i32::from(
                                                                *ptr84
                                                                    .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l98 = i32::from(
                                                                *ptr84
                                                                    .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l100 = i32::from(
                                                                *ptr84
                                                                    .add(56 + 4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            super::super::super::fastertools::mcp::types::Annotations {
                                                                audience: match l93 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l94 = *ptr84
                                                                                .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l95 = *ptr84
                                                                                .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base97 = l94;
                                                                            let len97 = l95;
                                                                            let mut result97 = _rt::Vec::with_capacity(len97);
                                                                            for i in 0..len97 {
                                                                                let base = base97.add(i * 1);
                                                                                let e97 = {
                                                                                    let l96 = i32::from(*base.add(0).cast::<u8>());
                                                                                    super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                        l96 as u8,
                                                                                    )
                                                                                };
                                                                                result97.push(e97);
                                                                            }
                                                                            _rt::cabi_dealloc(base97, len97 * 1, 1);
                                                                            result97
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                priority: match l98 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l99 = *ptr84
                                                                                .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            l99
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                last_modified: match l100 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l101 = *ptr84
                                                                                .add(56 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l102 = *ptr84
                                                                                .add(56 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len103 = l102;
                                                                            let bytes103 = _rt::Vec::from_raw_parts(
                                                                                l101.cast(),
                                                                                len103,
                                                                                len103,
                                                                            );
                                                                            _rt::string_lift(bytes103)
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                meta: match l104 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l105 = *ptr84
                                                                .add(64 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l106 = *ptr84
                                                                .add(64 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base113 = l105;
                                                            let len113 = l106;
                                                            let mut result113 = _rt::Vec::with_capacity(len113);
                                                            for i in 0..len113 {
                                                                let base = base113
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                let e113 = {
                                                                    let l107 = *base.add(0).cast::<*mut u8>();
                                                                    let l108 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len109 = l108;
                                                                    let bytes109 = _rt::Vec::from_raw_parts(
                                                                        l107.cast(),
                                                                        len109,
                                                                        len109,
                                                                    );
                                                                    let l110 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l111 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len112 = l111;
                                                                    let bytes112 = _rt::Vec::from_raw_parts(
                                                                        l110.cast(),
                                                                        len112,
                                                                        len112,
                                                                    );
                                                                    (_rt::string_lift(bytes109), _rt::string_lift(bytes112))
                                                                };
                                                                result113.push(e113);
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base113,
                                                                len113 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            result113
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        V276::Text(e276)
                                    }
                                    1 => {
                                        let e276 = {
                                            let l114 = *ptr84.add(24).cast::<*mut u8>();
                                            let l115 = *ptr84
                                                .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len116 = l115;
                                            let l117 = *ptr84
                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l118 = *ptr84
                                                .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len119 = l118;
                                            let bytes119 = _rt::Vec::from_raw_parts(
                                                l117.cast(),
                                                len119,
                                                len119,
                                            );
                                            let l120 = i32::from(
                                                *ptr84
                                                    .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l132 = i32::from(
                                                *ptr84
                                                    .add(64 + 8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            super::super::super::fastertools::mcp::types::ImageContent {
                                                data: _rt::Vec::from_raw_parts(l114.cast(), len116, len116),
                                                mime_type: _rt::string_lift(bytes119),
                                                annotations: match l120 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l121 = i32::from(
                                                                *ptr84
                                                                    .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l126 = i32::from(
                                                                *ptr84
                                                                    .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l128 = i32::from(
                                                                *ptr84
                                                                    .add(56 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            super::super::super::fastertools::mcp::types::Annotations {
                                                                audience: match l121 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l122 = *ptr84
                                                                                .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l123 = *ptr84
                                                                                .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base125 = l122;
                                                                            let len125 = l123;
                                                                            let mut result125 = _rt::Vec::with_capacity(len125);
                                                                            for i in 0..len125 {
                                                                                let base = base125.add(i * 1);
                                                                                let e125 = {
                                                                                    let l124 = i32::from(*base.add(0).cast::<u8>());
                                                                                    super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                        l124 as u8,
                                                                                    )
                                                                                };
                                                                                result125.push(e125);
                                                                            }
                                                                            _rt::cabi_dealloc(base125, len125 * 1, 1);
                                                                            result125
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                priority: match l126 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l127 = *ptr84
                                                                                .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            l127
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                last_modified: match l128 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l129 = *ptr84
                                                                                .add(56 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l130 = *ptr84
                                                                                .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len131 = l130;
                                                                            let bytes131 = _rt::Vec::from_raw_parts(
                                                                                l129.cast(),
                                                                                len131,
                                                                                len131,
                                                                            );
                                                                            _rt::string_lift(bytes131)
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                meta: match l132 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l133 = *ptr84
                                                                .add(64 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l134 = *ptr84
                                                                .add(64 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base141 = l133;
                                                            let len141 = l134;
                                                            let mut result141 = _rt::Vec::with_capacity(len141);
                                                            for i in 0..len141 {
                                                                let base = base141
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                let e141 = {
                                                                    let l135 = *base.add(0).cast::<*mut u8>();
                                                                    let l136 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len137 = l136;
                                                                    let bytes137 = _rt::Vec::from_raw_parts(
                                                                        l135.cast(),
                                                                        len137,
                                                                        len137,
                                                                    );
                                                                    let l138 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l139 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len140 = l139;
                                                                    let bytes140 = _rt::Vec::from_raw_parts(
                                                                        l138.cast(),
                                                                        len140,
                                                                        len140,
                                                                    );
                                                                    (_rt::string_lift(bytes137), _rt::string_lift(bytes140))
                                                                };
                                                                result141.push(e141);
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base141,
                                                                len141 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            result141
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        V276::Image(e276)
                                    }
                                    2 => {
                                        let e276 = {
                                            let l142 = *ptr84.add(24).cast::<*mut u8>();
                                            let l143 = *ptr84
                                                .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len144 = l143;
                                            let l145 = *ptr84
                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l146 = *ptr84
                                                .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len147 = l146;
                                            let bytes147 = _rt::Vec::from_raw_parts(
                                                l145.cast(),
                                                len147,
                                                len147,
                                            );
                                            let l148 = i32::from(
                                                *ptr84
                                                    .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l160 = i32::from(
                                                *ptr84
                                                    .add(64 + 8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            super::super::super::fastertools::mcp::types::AudioContent {
                                                data: _rt::Vec::from_raw_parts(l142.cast(), len144, len144),
                                                mime_type: _rt::string_lift(bytes147),
                                                annotations: match l148 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l149 = i32::from(
                                                                *ptr84
                                                                    .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l154 = i32::from(
                                                                *ptr84
                                                                    .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l156 = i32::from(
                                                                *ptr84
                                                                    .add(56 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            super::super::super::fastertools::mcp::types::Annotations {
                                                                audience: match l149 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l150 = *ptr84
                                                                                .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l151 = *ptr84
                                                                                .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base153 = l150;
                                                                            let len153 = l151;
                                                                            let mut result153 = _rt::Vec::with_capacity(len153);
                                                                            for i in 0..len153 {
                                                                                let base = base153.add(i * 1);
                                                                                let e153 = {
                                                                                    let l152 = i32::from(*base.add(0).cast::<u8>());
                                                                                    super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                        l152 as u8,
                                                                                    )
                                                                                };
                                                                                result153.push(e153);
                                                                            }
                                                                            _rt::cabi_dealloc(base153, len153 * 1, 1);
                                                                            result153
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                priority: match l154 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l155 = *ptr84
                                                                                .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            l155
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                last_modified: match l156 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l157 = *ptr84
                                                                                .add(56 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l158 = *ptr84
                                                                                .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len159 = l158;
                                                                            let bytes159 = _rt::Vec::from_raw_parts(
                                                                                l157.cast(),
                                                                                len159,
                                                                                len159,
                                                                            );
                                                                            _rt::string_lift(bytes159)
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                meta: match l160 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l161 = *ptr84
                                                                .add(64 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l162 = *ptr84
                                                                .add(64 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base169 = l161;
                                                            let len169 = l162;
                                                            let mut result169 = _rt::Vec::with_capacity(len169);
                                                            for i in 0..len169 {
                                                                let base = base169
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                let e169 = {
                                                                    let l163 = *base.add(0).cast::<*mut u8>();
                                                                    let l164 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len165 = l164;
                                                                    let bytes165 = _rt::Vec::from_raw_parts(
                                                                        l163.cast(),
                                                                        len165,
                                                                        len165,
                                                                    );
                                                                    let l166 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l167 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len168 = l167;
                                                                    let bytes168 = _rt::Vec::from_raw_parts(
                                                                        l166.cast(),
                                                                        len168,
                                                                        len168,
                                                                    );
                                                                    (_rt::string_lift(bytes165), _rt::string_lift(bytes168))
                                                                };
                                                                result169.push(e169);
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base169,
                                                                len169 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            result169
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        V276::Audio(e276)
                                    }
                                    3 => {
                                        let e276 = {
                                            let l170 = *ptr84.add(24).cast::<*mut u8>();
                                            let l171 = *ptr84
                                                .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len172 = l171;
                                            let bytes172 = _rt::Vec::from_raw_parts(
                                                l170.cast(),
                                                len172,
                                                len172,
                                            );
                                            let l173 = *ptr84
                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l174 = *ptr84
                                                .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len175 = l174;
                                            let bytes175 = _rt::Vec::from_raw_parts(
                                                l173.cast(),
                                                len175,
                                                len175,
                                            );
                                            let l176 = i32::from(
                                                *ptr84
                                                    .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l180 = i32::from(
                                                *ptr84
                                                    .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l184 = i32::from(
                                                *ptr84
                                                    .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l188 = i32::from(
                                                *ptr84
                                                    .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l190 = i32::from(
                                                *ptr84
                                                    .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l202 = i32::from(
                                                *ptr84
                                                    .add(88 + 16 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            super::super::super::fastertools::mcp::types::ResourceLink {
                                                uri: _rt::string_lift(bytes172),
                                                name: _rt::string_lift(bytes175),
                                                title: match l176 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l177 = *ptr84
                                                                .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l178 = *ptr84
                                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len179 = l178;
                                                            let bytes179 = _rt::Vec::from_raw_parts(
                                                                l177.cast(),
                                                                len179,
                                                                len179,
                                                            );
                                                            _rt::string_lift(bytes179)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                description: match l180 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l181 = *ptr84
                                                                .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l182 = *ptr84
                                                                .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len183 = l182;
                                                            let bytes183 = _rt::Vec::from_raw_parts(
                                                                l181.cast(),
                                                                len183,
                                                                len183,
                                                            );
                                                            _rt::string_lift(bytes183)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                mime_type: match l184 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l185 = *ptr84
                                                                .add(24 + 11 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l186 = *ptr84
                                                                .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len187 = l186;
                                                            let bytes187 = _rt::Vec::from_raw_parts(
                                                                l185.cast(),
                                                                len187,
                                                                len187,
                                                            );
                                                            _rt::string_lift(bytes187)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                size: match l188 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l189 = *ptr84
                                                                .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i64>();
                                                            l189 as u64
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                annotations: match l190 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l191 = i32::from(
                                                                *ptr84
                                                                    .add(56 + 12 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l196 = i32::from(
                                                                *ptr84
                                                                    .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l198 = i32::from(
                                                                *ptr84
                                                                    .add(80 + 14 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            super::super::super::fastertools::mcp::types::Annotations {
                                                                audience: match l191 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l192 = *ptr84
                                                                                .add(56 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l193 = *ptr84
                                                                                .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base195 = l192;
                                                                            let len195 = l193;
                                                                            let mut result195 = _rt::Vec::with_capacity(len195);
                                                                            for i in 0..len195 {
                                                                                let base = base195.add(i * 1);
                                                                                let e195 = {
                                                                                    let l194 = i32::from(*base.add(0).cast::<u8>());
                                                                                    super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                        l194 as u8,
                                                                                    )
                                                                                };
                                                                                result195.push(e195);
                                                                            }
                                                                            _rt::cabi_dealloc(base195, len195 * 1, 1);
                                                                            result195
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                priority: match l196 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l197 = *ptr84
                                                                                .add(72 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            l197
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                last_modified: match l198 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l199 = *ptr84
                                                                                .add(80 + 15 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l200 = *ptr84
                                                                                .add(80 + 16 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len201 = l200;
                                                                            let bytes201 = _rt::Vec::from_raw_parts(
                                                                                l199.cast(),
                                                                                len201,
                                                                                len201,
                                                                            );
                                                                            _rt::string_lift(bytes201)
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                meta: match l202 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l203 = *ptr84
                                                                .add(88 + 17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l204 = *ptr84
                                                                .add(88 + 18 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base211 = l203;
                                                            let len211 = l204;
                                                            let mut result211 = _rt::Vec::with_capacity(len211);
                                                            for i in 0..len211 {
                                                                let base = base211
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                let e211 = {
                                                                    let l205 = *base.add(0).cast::<*mut u8>();
                                                                    let l206 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len207 = l206;
                                                                    let bytes207 = _rt::Vec::from_raw_parts(
                                                                        l205.cast(),
                                                                        len207,
                                                                        len207,
                                                                    );
                                                                    let l208 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l209 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len210 = l209;
                                                                    let bytes210 = _rt::Vec::from_raw_parts(
                                                                        l208.cast(),
                                                                        len210,
                                                                        len210,
                                                                    );
                                                                    (_rt::string_lift(bytes207), _rt::string_lift(bytes210))
                                                                };
                                                                result211.push(e211);
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base211,
                                                                len211 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            result211
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        V276::ResourceLink(e276)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 4, "invalid enum discriminant");
                                        let e276 = {
                                            let l212 = i32::from(*ptr84.add(24).cast::<u8>());
                                            use super::super::super::fastertools::mcp::types::ResourceContents as V253;
                                            let v253 = match l212 {
                                                0 => {
                                                    let e253 = {
                                                        let l213 = *ptr84
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l214 = *ptr84
                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len215 = l214;
                                                        let bytes215 = _rt::Vec::from_raw_parts(
                                                            l213.cast(),
                                                            len215,
                                                            len215,
                                                        );
                                                        let l216 = i32::from(
                                                            *ptr84
                                                                .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l220 = *ptr84
                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l221 = *ptr84
                                                            .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len222 = l221;
                                                        let bytes222 = _rt::Vec::from_raw_parts(
                                                            l220.cast(),
                                                            len222,
                                                            len222,
                                                        );
                                                        let l223 = i32::from(
                                                            *ptr84
                                                                .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        super::super::super::fastertools::mcp::types::TextResourceContents {
                                                            uri: _rt::string_lift(bytes215),
                                                            mime_type: match l216 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l217 = *ptr84
                                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l218 = *ptr84
                                                                            .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len219 = l218;
                                                                        let bytes219 = _rt::Vec::from_raw_parts(
                                                                            l217.cast(),
                                                                            len219,
                                                                            len219,
                                                                        );
                                                                        _rt::string_lift(bytes219)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            text: _rt::string_lift(bytes222),
                                                            meta: match l223 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l224 = *ptr84
                                                                            .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l225 = *ptr84
                                                                            .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base232 = l224;
                                                                        let len232 = l225;
                                                                        let mut result232 = _rt::Vec::with_capacity(len232);
                                                                        for i in 0..len232 {
                                                                            let base = base232
                                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                            let e232 = {
                                                                                let l226 = *base.add(0).cast::<*mut u8>();
                                                                                let l227 = *base
                                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len228 = l227;
                                                                                let bytes228 = _rt::Vec::from_raw_parts(
                                                                                    l226.cast(),
                                                                                    len228,
                                                                                    len228,
                                                                                );
                                                                                let l229 = *base
                                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l230 = *base
                                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len231 = l230;
                                                                                let bytes231 = _rt::Vec::from_raw_parts(
                                                                                    l229.cast(),
                                                                                    len231,
                                                                                    len231,
                                                                                );
                                                                                (_rt::string_lift(bytes228), _rt::string_lift(bytes231))
                                                                            };
                                                                            result232.push(e232);
                                                                        }
                                                                        _rt::cabi_dealloc(
                                                                            base232,
                                                                            len232 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                            ::core::mem::size_of::<*const u8>(),
                                                                        );
                                                                        result232
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V253::Text(e253)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                    let e253 = {
                                                        let l233 = *ptr84
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l234 = *ptr84
                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len235 = l234;
                                                        let bytes235 = _rt::Vec::from_raw_parts(
                                                            l233.cast(),
                                                            len235,
                                                            len235,
                                                        );
                                                        let l236 = i32::from(
                                                            *ptr84
                                                                .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l240 = *ptr84
                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l241 = *ptr84
                                                            .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len242 = l241;
                                                        let l243 = i32::from(
                                                            *ptr84
                                                                .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        super::super::super::fastertools::mcp::types::BlobResourceContents {
                                                            uri: _rt::string_lift(bytes235),
                                                            mime_type: match l236 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l237 = *ptr84
                                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l238 = *ptr84
                                                                            .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len239 = l238;
                                                                        let bytes239 = _rt::Vec::from_raw_parts(
                                                                            l237.cast(),
                                                                            len239,
                                                                            len239,
                                                                        );
                                                                        _rt::string_lift(bytes239)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            blob: _rt::Vec::from_raw_parts(l240.cast(), len242, len242),
                                                            meta: match l243 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l244 = *ptr84
                                                                            .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l245 = *ptr84
                                                                            .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base252 = l244;
                                                                        let len252 = l245;
                                                                        let mut result252 = _rt::Vec::with_capacity(len252);
                                                                        for i in 0..len252 {
                                                                            let base = base252
                                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                            let e252 = {
                                                                                let l246 = *base.add(0).cast::<*mut u8>();
                                                                                let l247 = *base
                                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len248 = l247;
                                                                                let bytes248 = _rt::Vec::from_raw_parts(
                                                                                    l246.cast(),
                                                                                    len248,
                                                                                    len248,
                                                                                );
                                                                                let l249 = *base
                                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l250 = *base
                                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len251 = l250;
                                                                                let bytes251 = _rt::Vec::from_raw_parts(
                                                                                    l249.cast(),
                                                                                    len251,
                                                                                    len251,
                                                                                );
                                                                                (_rt::string_lift(bytes248), _rt::string_lift(bytes251))
                                                                            };
                                                                            result252.push(e252);
                                                                        }
                                                                        _rt::cabi_dealloc(
                                                                            base252,
                                                                            len252 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                            ::core::mem::size_of::<*const u8>(),
                                                                        );
                                                                        result252
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V253::Blob(e253)
                                                }
                                            };
                                            let l254 = i32::from(
                                                *ptr84
                                                    .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l266 = i32::from(
                                                *ptr84
                                                    .add(72 + 14 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            super::super::super::fastertools::mcp::types::EmbeddedResource {
                                                contents: v253,
                                                annotations: match l254 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l255 = i32::from(
                                                                *ptr84
                                                                    .add(40 + 10 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l260 = i32::from(
                                                                *ptr84
                                                                    .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l262 = i32::from(
                                                                *ptr84
                                                                    .add(64 + 12 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            super::super::super::fastertools::mcp::types::Annotations {
                                                                audience: match l255 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l256 = *ptr84
                                                                                .add(40 + 11 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l257 = *ptr84
                                                                                .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base259 = l256;
                                                                            let len259 = l257;
                                                                            let mut result259 = _rt::Vec::with_capacity(len259);
                                                                            for i in 0..len259 {
                                                                                let base = base259.add(i * 1);
                                                                                let e259 = {
                                                                                    let l258 = i32::from(*base.add(0).cast::<u8>());
                                                                                    super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                        l258 as u8,
                                                                                    )
                                                                                };
                                                                                result259.push(e259);
                                                                            }
                                                                            _rt::cabi_dealloc(base259, len259 * 1, 1);
                                                                            result259
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                priority: match l260 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l261 = *ptr84
                                                                                .add(56 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            l261
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                last_modified: match l262 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l263 = *ptr84
                                                                                .add(64 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l264 = *ptr84
                                                                                .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len265 = l264;
                                                                            let bytes265 = _rt::Vec::from_raw_parts(
                                                                                l263.cast(),
                                                                                len265,
                                                                                len265,
                                                                            );
                                                                            _rt::string_lift(bytes265)
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                meta: match l266 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l267 = *ptr84
                                                                .add(72 + 15 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l268 = *ptr84
                                                                .add(72 + 16 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base275 = l267;
                                                            let len275 = l268;
                                                            let mut result275 = _rt::Vec::with_capacity(len275);
                                                            for i in 0..len275 {
                                                                let base = base275
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                let e275 = {
                                                                    let l269 = *base.add(0).cast::<*mut u8>();
                                                                    let l270 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len271 = l270;
                                                                    let bytes271 = _rt::Vec::from_raw_parts(
                                                                        l269.cast(),
                                                                        len271,
                                                                        len271,
                                                                    );
                                                                    let l272 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l273 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len274 = l273;
                                                                    let bytes274 = _rt::Vec::from_raw_parts(
                                                                        l272.cast(),
                                                                        len274,
                                                                        len274,
                                                                    );
                                                                    (_rt::string_lift(bytes271), _rt::string_lift(bytes274))
                                                                };
                                                                result275.push(e275);
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base275,
                                                                len275 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            result275
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        V276::EmbeddedResource(e276)
                                    }
                                };
                                let l277 = *ptr84
                                    .add(96 + 18 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l278 = *ptr84
                                    .add(96 + 19 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len279 = l278;
                                let bytes279 = _rt::Vec::from_raw_parts(
                                    l277.cast(),
                                    len279,
                                    len279,
                                );
                                let l280 = i32::from(
                                    *ptr84
                                        .add(96 + 20 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l284 = i32::from(
                                    *ptr84
                                        .add(96 + 23 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                CreateMessageResult {
                                    role: super::super::super::fastertools::mcp::types::MessageRole::_lift(
                                        l87 as u8,
                                    ),
                                    content: v276,
                                    model: _rt::string_lift(bytes279),
                                    stop_reason: match l280 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l281 = *ptr84
                                                    .add(96 + 21 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l282 = *ptr84
                                                    .add(96 + 22 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len283 = l282;
                                                let bytes283 = _rt::Vec::from_raw_parts(
                                                    l281.cast(),
                                                    len283,
                                                    len283,
                                                );
                                                _rt::string_lift(bytes283)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    meta: match l284 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l285 = *ptr84
                                                    .add(96 + 24 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l286 = *ptr84
                                                    .add(96 + 25 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base293 = l285;
                                                let len293 = l286;
                                                let mut result293 = _rt::Vec::with_capacity(len293);
                                                for i in 0..len293 {
                                                    let base = base293
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e293 = {
                                                        let l287 = *base.add(0).cast::<*mut u8>();
                                                        let l288 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len289 = l288;
                                                        let bytes289 = _rt::Vec::from_raw_parts(
                                                            l287.cast(),
                                                            len289,
                                                            len289,
                                                        );
                                                        let l290 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l291 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len292 = l291;
                                                        let bytes292 = _rt::Vec::from_raw_parts(
                                                            l290.cast(),
                                                            len292,
                                                            len292,
                                                        );
                                                        (_rt::string_lift(bytes289), _rt::string_lift(bytes292))
                                                    };
                                                    result293.push(e293);
                                                }
                                                _rt::cabi_dealloc(
                                                    base293,
                                                    len293 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result293
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l294 = i32::from(*ptr84.add(8).cast::<u8>());
                                use super::super::super::fastertools::mcp::types::ErrorCode as V296;
                                let v296 = match l294 {
                                    0 => V296::ParseError,
                                    1 => V296::InvalidRequest,
                                    2 => V296::MethodNotFound,
                                    3 => V296::InvalidParams,
                                    4 => V296::InternalError,
                                    5 => V296::ResourceNotFound,
                                    6 => V296::ToolNotFound,
                                    7 => V296::PromptNotFound,
                                    8 => V296::Unauthorized,
                                    9 => V296::RateLimited,
                                    10 => V296::Timeout,
                                    11 => V296::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e296 = {
                                            let l295 = *ptr84.add(12).cast::<i32>();
                                            l295
                                        };
                                        V296::CustomCode(e296)
                                    }
                                };
                                let l297 = *ptr84.add(16).cast::<*mut u8>();
                                let l298 = *ptr84
                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len299 = l298;
                                let bytes299 = _rt::Vec::from_raw_parts(
                                    l297.cast(),
                                    len299,
                                    len299,
                                );
                                let l300 = i32::from(
                                    *ptr84
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v296,
                                    message: _rt::string_lift(bytes299),
                                    data: match l300 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l301 = *ptr84
                                                    .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l302 = *ptr84
                                                    .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len303 = l302;
                                                let bytes303 = _rt::Vec::from_raw_parts(
                                                    l301.cast(),
                                                    len303,
                                                    len303,
                                                );
                                                _rt::string_lift(bytes303)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    if layout71.size() != 0 {
                        _rt::alloc::dealloc(result71.cast(), layout71);
                    }
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result304
                }
            }
        }
        /// Interactive elicitation - request structured input from users
        /// Enables servers to collect configuration, preferences, or other data interactively
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod elicitation {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type McpError = super::super::super::fastertools::mcp::types::McpError;
            pub type JsonSchema = super::super::super::fastertools::mcp::types::JsonSchema;
            pub type JsonValue = super::super::super::fastertools::mcp::types::JsonValue;
            pub type MetaFields = super::super::super::fastertools::mcp::types::MetaFields;
            /// Request for structured user input
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ElicitRequest {
                /// Message to display to the user
                pub message: _rt::String,
                /// JSON Schema defining the expected data structure
                /// Properties should use primitive types only (no nesting)
                pub schema: JsonSchema,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ElicitRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ElicitRequest")
                        .field("message", &self.message)
                        .field("schema", &self.schema)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Possible user actions in response to elicitation
            #[repr(u8)]
            #[derive(
                Clone,
                Copy,
                Eq,
                Ord,
                PartialEq,
                PartialOrd,
                serde::Deserialize,
                serde::Serialize
            )]
            pub enum ElicitAction {
                /// User submitted the form with data
                Accept,
                /// User explicitly declined to provide data
                Decline,
                /// User cancelled without making a choice
                Cancel,
            }
            impl ::core::fmt::Debug for ElicitAction {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ElicitAction::Accept => {
                            f.debug_tuple("ElicitAction::Accept").finish()
                        }
                        ElicitAction::Decline => {
                            f.debug_tuple("ElicitAction::Decline").finish()
                        }
                        ElicitAction::Cancel => {
                            f.debug_tuple("ElicitAction::Cancel").finish()
                        }
                    }
                }
            }
            impl ElicitAction {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ElicitAction {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ElicitAction::Accept,
                        1 => ElicitAction::Decline,
                        2 => ElicitAction::Cancel,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// User's response to an elicitation request
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ElicitResult {
                /// Action the user took
                pub action: ElicitAction,
                /// Data provided by the user (if action was accept)
                pub data: Option<JsonValue>,
                /// Optional message from the user
                pub message: Option<_rt::String>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ElicitResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ElicitResult")
                        .field("action", &self.action)
                        .field("data", &self.data)
                        .field("message", &self.message)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Request structured input from the user
            /// The client should present an appropriate UI for data collection
            pub fn elicit(request: &ElicitRequest) -> Result<ElicitResult, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 11 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 11
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ElicitRequest {
                        message: message0,
                        schema: schema0,
                        meta: meta0,
                    } = request;
                    let vec1 = message0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let vec2 = schema0;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    let (result7_0, result7_1, result7_2) = match meta0 {
                        Some(e) => {
                            let vec6 = e;
                            let len6 = vec6.len();
                            let layout6 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec6.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result6 = if layout6.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout6);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec6.into_iter().enumerate() {
                                let base = result6
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t3_0, t3_1) = e;
                                    let vec4 = t3_0;
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                                    let vec5 = t3_1;
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result6, layout6)]);
                            (1i32, result6, len6)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr8 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fastertools:mcp/elicitation@0.1.10")]
                    unsafe extern "C" {
                        #[link_name = "elicit"]
                        fn wit_import9(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import9(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import9(
                            ptr1.cast_mut(),
                            len1,
                            ptr2.cast_mut(),
                            len2,
                            result7_0,
                            result7_1,
                            result7_2,
                            ptr8,
                        )
                    };
                    let l10 = i32::from(*ptr8.add(0).cast::<u8>());
                    let result40 = match l10 {
                        0 => {
                            let e = {
                                let l11 = i32::from(
                                    *ptr8.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                let l12 = i32::from(
                                    *ptr8
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l16 = i32::from(
                                    *ptr8
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l20 = i32::from(
                                    *ptr8
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                ElicitResult {
                                    action: ElicitAction::_lift(l11 as u8),
                                    data: match l12 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l13 = *ptr8
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l14 = *ptr8
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len15 = l14;
                                                let bytes15 = _rt::Vec::from_raw_parts(
                                                    l13.cast(),
                                                    len15,
                                                    len15,
                                                );
                                                _rt::string_lift(bytes15)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    message: match l16 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l17 = *ptr8
                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l18 = *ptr8
                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );
                                                _rt::string_lift(bytes19)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    meta: match l20 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l21 = *ptr8
                                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l22 = *ptr8
                                                    .add(10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base29 = l21;
                                                let len29 = l22;
                                                let mut result29 = _rt::Vec::with_capacity(len29);
                                                for i in 0..len29 {
                                                    let base = base29
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e29 = {
                                                        let l23 = *base.add(0).cast::<*mut u8>();
                                                        let l24 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len25 = l24;
                                                        let bytes25 = _rt::Vec::from_raw_parts(
                                                            l23.cast(),
                                                            len25,
                                                            len25,
                                                        );
                                                        let l26 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l27 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len28 = l27;
                                                        let bytes28 = _rt::Vec::from_raw_parts(
                                                            l26.cast(),
                                                            len28,
                                                            len28,
                                                        );
                                                        (_rt::string_lift(bytes25), _rt::string_lift(bytes28))
                                                    };
                                                    result29.push(e29);
                                                }
                                                _rt::cabi_dealloc(
                                                    base29,
                                                    len29 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result29
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l30 = i32::from(
                                    *ptr8.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V32;
                                let v32 = match l30 {
                                    0 => V32::ParseError,
                                    1 => V32::InvalidRequest,
                                    2 => V32::MethodNotFound,
                                    3 => V32::InvalidParams,
                                    4 => V32::InternalError,
                                    5 => V32::ResourceNotFound,
                                    6 => V32::ToolNotFound,
                                    7 => V32::PromptNotFound,
                                    8 => V32::Unauthorized,
                                    9 => V32::RateLimited,
                                    10 => V32::Timeout,
                                    11 => V32::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e32 = {
                                            let l31 = *ptr8
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l31
                                        };
                                        V32::CustomCode(e32)
                                    }
                                };
                                let l33 = *ptr8
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l34 = *ptr8
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len35 = l34;
                                let bytes35 = _rt::Vec::from_raw_parts(
                                    l33.cast(),
                                    len35,
                                    len35,
                                );
                                let l36 = i32::from(
                                    *ptr8
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v32,
                                    message: _rt::string_lift(bytes35),
                                    data: match l36 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l37 = *ptr8
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l38 = *ptr8
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len39 = l38;
                                                let bytes39 = _rt::Vec::from_raw_parts(
                                                    l37.cast(),
                                                    len39,
                                                    len39,
                                                );
                                                _rt::string_lift(bytes39)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result40
                }
            }
        }
        /// File system roots - expose directories to servers
        /// Allows servers to understand and operate on client file systems with permission
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod roots {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type McpError = super::super::super::fastertools::mcp::types::McpError;
            pub type MetaFields = super::super::super::fastertools::mcp::types::MetaFields;
            /// A root directory or file that the server can operate on
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct Root {
                /// URI of the root (e.g., "file:///home/user/project")
                pub uri: _rt::String,
                /// Optional friendly name for the root
                pub name: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Root {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Root")
                        .field("uri", &self.uri)
                        .field("name", &self.name)
                        .finish()
                }
            }
            /// Request to list available roots
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ListRootsRequest {
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ListRootsRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListRootsRequest").field("meta", &self.meta).finish()
                }
            }
            /// Response with available roots
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ListRootsResult {
                /// Available file system roots
                pub roots: _rt::Vec<Root>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ListRootsResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListRootsResult")
                        .field("roots", &self.roots)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// List available file system roots
            /// Servers use this to understand what parts of the file system they can access
            pub fn list_roots(
                request: &ListRootsRequest,
            ) -> Result<ListRootsResult, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ListRootsRequest { meta: meta0 } = request;
                    let (result5_0, result5_1, result5_2) = match meta0 {
                        Some(e) => {
                            let vec4 = e;
                            let len4 = vec4.len();
                            let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec4.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result4 = if layout4.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout4);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec4.into_iter().enumerate() {
                                let base = result4
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t1_0, t1_1) = e;
                                    let vec2 = t1_0;
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len2;
                                    *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                                    let vec3 = t1_1;
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len3;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr3.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result4, layout4)]);
                            (1i32, result4, len4)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr6 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fastertools:mcp/roots@0.1.10")]
                    unsafe extern "C" {
                        #[link_name = "list-roots"]
                        fn wit_import7(_: i32, _: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import7(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import7(result5_0, result5_1, result5_2, ptr6) };
                    let l8 = i32::from(*ptr6.add(0).cast::<u8>());
                    let result39 = match l8 {
                        0 => {
                            let e = {
                                let l9 = *ptr6
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l10 = *ptr6
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base18 = l9;
                                let len18 = l10;
                                let mut result18 = _rt::Vec::with_capacity(len18);
                                for i in 0..len18 {
                                    let base = base18
                                        .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                    let e18 = {
                                        let l11 = *base.add(0).cast::<*mut u8>();
                                        let l12 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len13 = l12;
                                        let bytes13 = _rt::Vec::from_raw_parts(
                                            l11.cast(),
                                            len13,
                                            len13,
                                        );
                                        let l14 = i32::from(
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        Root {
                                            uri: _rt::string_lift(bytes13),
                                            name: match l14 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l15 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l16 = *base
                                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len17 = l16;
                                                        let bytes17 = _rt::Vec::from_raw_parts(
                                                            l15.cast(),
                                                            len17,
                                                            len17,
                                                        );
                                                        _rt::string_lift(bytes17)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    result18.push(e18);
                                }
                                _rt::cabi_dealloc(
                                    base18,
                                    len18 * (5 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l19 = i32::from(
                                    *ptr6
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                ListRootsResult {
                                    roots: result18,
                                    meta: match l19 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l20 = *ptr6
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l21 = *ptr6
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base28 = l20;
                                                let len28 = l21;
                                                let mut result28 = _rt::Vec::with_capacity(len28);
                                                for i in 0..len28 {
                                                    let base = base28
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e28 = {
                                                        let l22 = *base.add(0).cast::<*mut u8>();
                                                        let l23 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len24 = l23;
                                                        let bytes24 = _rt::Vec::from_raw_parts(
                                                            l22.cast(),
                                                            len24,
                                                            len24,
                                                        );
                                                        let l25 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l26 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len27 = l26;
                                                        let bytes27 = _rt::Vec::from_raw_parts(
                                                            l25.cast(),
                                                            len27,
                                                            len27,
                                                        );
                                                        (_rt::string_lift(bytes24), _rt::string_lift(bytes27))
                                                    };
                                                    result28.push(e28);
                                                }
                                                _rt::cabi_dealloc(
                                                    base28,
                                                    len28 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result28
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l29 = i32::from(
                                    *ptr6.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V31;
                                let v31 = match l29 {
                                    0 => V31::ParseError,
                                    1 => V31::InvalidRequest,
                                    2 => V31::MethodNotFound,
                                    3 => V31::InvalidParams,
                                    4 => V31::InternalError,
                                    5 => V31::ResourceNotFound,
                                    6 => V31::ToolNotFound,
                                    7 => V31::PromptNotFound,
                                    8 => V31::Unauthorized,
                                    9 => V31::RateLimited,
                                    10 => V31::Timeout,
                                    11 => V31::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e31 = {
                                            let l30 = *ptr6
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l30
                                        };
                                        V31::CustomCode(e31)
                                    }
                                };
                                let l32 = *ptr6
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l33 = *ptr6
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len34 = l33;
                                let bytes34 = _rt::Vec::from_raw_parts(
                                    l32.cast(),
                                    len34,
                                    len34,
                                );
                                let l35 = i32::from(
                                    *ptr6
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v31,
                                    message: _rt::string_lift(bytes34),
                                    data: match l35 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l36 = *ptr6
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l37 = *ptr6
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len38 = l37;
                                                let bytes38 = _rt::Vec::from_raw_parts(
                                                    l36.cast(),
                                                    len38,
                                                    len38,
                                                );
                                                _rt::string_lift(bytes38)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result39
                }
            }
        }
        /// Argument completion support for enhanced UX
        /// Provides context-aware suggestions for tool arguments and prompts
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod completion {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type McpError = super::super::super::fastertools::mcp::types::McpError;
            pub type MetaFields = super::super::super::fastertools::mcp::types::MetaFields;
            /// Reference to what we're completing
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub enum CompletionReference {
                /// Completing for a prompt
                Prompt(_rt::String),
                /// Completing for a resource template
                ResourceTemplate(_rt::String),
            }
            impl ::core::fmt::Debug for CompletionReference {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        CompletionReference::Prompt(e) => {
                            f.debug_tuple("CompletionReference::Prompt")
                                .field(e)
                                .finish()
                        }
                        CompletionReference::ResourceTemplate(e) => {
                            f.debug_tuple("CompletionReference::ResourceTemplate")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            /// Additional context for generating completions
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct CompletionContext {
                /// Previously resolved arguments
                pub arguments: Option<_rt::Vec<(_rt::String, _rt::String)>>,
            }
            impl ::core::fmt::Debug for CompletionContext {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CompletionContext")
                        .field("arguments", &self.arguments)
                        .finish()
                }
            }
            /// Request for completion suggestions
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct CompleteRequest {
                /// What we're completing for (prompt or resource)
                pub ref_: CompletionReference,
                /// Name of the argument being completed
                pub argument_name: _rt::String,
                /// Current partial value of the argument
                pub argument_value: _rt::String,
                /// Additional context for completion
                pub context: Option<CompletionContext>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for CompleteRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CompleteRequest")
                        .field("ref", &self.ref_)
                        .field("argument-name", &self.argument_name)
                        .field("argument-value", &self.argument_value)
                        .field("context", &self.context)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Completion suggestions
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct CompleteResult {
                /// Suggested completion values
                pub values: _rt::Vec<_rt::String>,
                /// Total number of possible completions (may exceed returned values)
                pub total: Option<i64>,
                /// Whether more completions are available
                pub has_more: Option<bool>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for CompleteResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CompleteResult")
                        .field("values", &self.values)
                        .field("total", &self.total)
                        .field("has-more", &self.has_more)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get completion suggestions for arguments
            /// Used to provide autocomplete and hints in user interfaces
            pub fn complete(
                request: &CompleteRequest,
            ) -> Result<CompleteResult, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 24 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 24
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let CompleteRequest {
                        ref_: ref_0,
                        argument_name: argument_name0,
                        argument_value: argument_value0,
                        context: context0,
                        meta: meta0,
                    } = request;
                    let (result3_0, result3_1, result3_2) = match ref_0 {
                        CompletionReference::Prompt(e) => {
                            let vec1 = e;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            (0i32, ptr1.cast_mut(), len1)
                        }
                        CompletionReference::ResourceTemplate(e) => {
                            let vec2 = e;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            (1i32, ptr2.cast_mut(), len2)
                        }
                    };
                    let vec4 = argument_name0;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    let vec5 = argument_value0;
                    let ptr5 = vec5.as_ptr().cast::<u8>();
                    let len5 = vec5.len();
                    let (result12_0, result12_1, result12_2, result12_3) = match context0 {
                        Some(e) => {
                            let CompletionContext { arguments: arguments6 } = e;
                            let (result11_0, result11_1, result11_2) = match arguments6 {
                                Some(e) => {
                                    let vec10 = e;
                                    let len10 = vec10.len();
                                    let layout10 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec10.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result10 = if layout10.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout10).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout10);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec10.into_iter().enumerate() {
                                        let base = result10
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t7_0, t7_1) = e;
                                            let vec8 = t7_0;
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len8;
                                            *base.add(0).cast::<*mut u8>() = ptr8.cast_mut();
                                            let vec9 = t7_1;
                                            let ptr9 = vec9.as_ptr().cast::<u8>();
                                            let len9 = vec9.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len9;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr9.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result10, layout10)]);
                                    (1i32, result10, len10)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (1i32, result11_0, result11_1, result11_2)
                        }
                        None => (0i32, 0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result17_0, result17_1, result17_2) = match meta0 {
                        Some(e) => {
                            let vec16 = e;
                            let len16 = vec16.len();
                            let layout16 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec16.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result16 = if layout16.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout16).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout16);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec16.into_iter().enumerate() {
                                let base = result16
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t13_0, t13_1) = e;
                                    let vec14 = t13_0;
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *base.add(0).cast::<*mut u8>() = ptr14.cast_mut();
                                    let vec15 = t13_1;
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len15;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr15.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result16, layout16)]);
                            (1i32, result16, len16)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr18 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fastertools:mcp/completion@0.1.10")]
                    unsafe extern "C" {
                        #[link_name = "complete"]
                        fn wit_import19(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import19(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import19(
                            result3_0,
                            result3_1,
                            result3_2,
                            ptr4.cast_mut(),
                            len4,
                            ptr5.cast_mut(),
                            len5,
                            result12_0,
                            result12_1,
                            result12_2,
                            result12_3,
                            result17_0,
                            result17_1,
                            result17_2,
                            ptr18,
                        )
                    };
                    let l20 = i32::from(*ptr18.add(0).cast::<u8>());
                    let result51 = match l20 {
                        0 => {
                            let e = {
                                let l21 = *ptr18.add(8).cast::<*mut u8>();
                                let l22 = *ptr18
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base26 = l21;
                                let len26 = l22;
                                let mut result26 = _rt::Vec::with_capacity(len26);
                                for i in 0..len26 {
                                    let base = base26
                                        .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                    let e26 = {
                                        let l23 = *base.add(0).cast::<*mut u8>();
                                        let l24 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len25 = l24;
                                        let bytes25 = _rt::Vec::from_raw_parts(
                                            l23.cast(),
                                            len25,
                                            len25,
                                        );
                                        _rt::string_lift(bytes25)
                                    };
                                    result26.push(e26);
                                }
                                _rt::cabi_dealloc(
                                    base26,
                                    len26 * (2 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l27 = i32::from(
                                    *ptr18
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l29 = i32::from(
                                    *ptr18
                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l31 = i32::from(
                                    *ptr18
                                        .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                CompleteResult {
                                    values: result26,
                                    total: match l27 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l28 = *ptr18
                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>();
                                                l28
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    has_more: match l29 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l30 = i32::from(
                                                    *ptr18
                                                        .add(25 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                _rt::bool_lift(l30 as u8)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    meta: match l31 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l32 = *ptr18
                                                    .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l33 = *ptr18
                                                    .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base40 = l32;
                                                let len40 = l33;
                                                let mut result40 = _rt::Vec::with_capacity(len40);
                                                for i in 0..len40 {
                                                    let base = base40
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e40 = {
                                                        let l34 = *base.add(0).cast::<*mut u8>();
                                                        let l35 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len36 = l35;
                                                        let bytes36 = _rt::Vec::from_raw_parts(
                                                            l34.cast(),
                                                            len36,
                                                            len36,
                                                        );
                                                        let l37 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l38 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len39 = l38;
                                                        let bytes39 = _rt::Vec::from_raw_parts(
                                                            l37.cast(),
                                                            len39,
                                                            len39,
                                                        );
                                                        (_rt::string_lift(bytes36), _rt::string_lift(bytes39))
                                                    };
                                                    result40.push(e40);
                                                }
                                                _rt::cabi_dealloc(
                                                    base40,
                                                    len40 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result40
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l41 = i32::from(*ptr18.add(8).cast::<u8>());
                                use super::super::super::fastertools::mcp::types::ErrorCode as V43;
                                let v43 = match l41 {
                                    0 => V43::ParseError,
                                    1 => V43::InvalidRequest,
                                    2 => V43::MethodNotFound,
                                    3 => V43::InvalidParams,
                                    4 => V43::InternalError,
                                    5 => V43::ResourceNotFound,
                                    6 => V43::ToolNotFound,
                                    7 => V43::PromptNotFound,
                                    8 => V43::Unauthorized,
                                    9 => V43::RateLimited,
                                    10 => V43::Timeout,
                                    11 => V43::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e43 = {
                                            let l42 = *ptr18.add(12).cast::<i32>();
                                            l42
                                        };
                                        V43::CustomCode(e43)
                                    }
                                };
                                let l44 = *ptr18.add(16).cast::<*mut u8>();
                                let l45 = *ptr18
                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len46 = l45;
                                let bytes46 = _rt::Vec::from_raw_parts(
                                    l44.cast(),
                                    len46,
                                    len46,
                                );
                                let l47 = i32::from(
                                    *ptr18
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v43,
                                    message: _rt::string_lift(bytes46),
                                    data: match l47 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l48 = *ptr18
                                                    .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l49 = *ptr18
                                                    .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len50 = l49;
                                                let bytes50 = _rt::Vec::from_raw_parts(
                                                    l48.cast(),
                                                    len50,
                                                    len50,
                                                );
                                                _rt::string_lift(bytes50)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result51
                }
            }
        }
        /// Tool capabilities - implement this to provide tools
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod tools_capabilities {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type McpError = super::super::super::fastertools::mcp::types::McpError;
            pub type ListToolsRequest = super::super::super::fastertools::mcp::tools::ListToolsRequest;
            pub type ListToolsResponse = super::super::super::fastertools::mcp::tools::ListToolsResponse;
            pub type CallToolRequest = super::super::super::fastertools::mcp::tools::CallToolRequest;
            pub type ToolResult = super::super::super::fastertools::mcp::tools::ToolResult;
            #[allow(unused_unsafe, clippy::all)]
            /// List available tools
            pub fn handle_list_tools(
                request: &ListToolsRequest,
            ) -> Result<ListToolsResponse, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 9 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 9
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::fastertools::mcp::tools::ListToolsRequest {
                        cursor: cursor0,
                        progress_token: progress_token0,
                        meta: meta0,
                    } = request;
                    let (result2_0, result2_1, result2_2) = match cursor0 {
                        Some(e) => {
                            let vec1 = e;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            (1i32, ptr1.cast_mut(), len1)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result4_0, result4_1, result4_2) = match progress_token0 {
                        Some(e) => {
                            let vec3 = e;
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            (1i32, ptr3.cast_mut(), len3)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result9_0, result9_1, result9_2) = match meta0 {
                        Some(e) => {
                            let vec8 = e;
                            let len8 = vec8.len();
                            let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec8.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result8 = if layout8.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout8);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec8.into_iter().enumerate() {
                                let base = result8
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t5_0, t5_1) = e;
                                    let vec6 = t5_0;
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                                    let vec7 = t5_1;
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr7.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result8, layout8)]);
                            (1i32, result8, len8)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr10 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "fastertools:mcp/tools-capabilities@0.1.10"
                    )]
                    unsafe extern "C" {
                        #[link_name = "handle-list-tools"]
                        fn wit_import11(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import11(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import11(
                            result2_0,
                            result2_1,
                            result2_2,
                            result4_0,
                            result4_1,
                            result4_2,
                            result9_0,
                            result9_1,
                            result9_2,
                            ptr10,
                        )
                    };
                    let l12 = i32::from(*ptr10.add(0).cast::<u8>());
                    let result81 = match l12 {
                        0 => {
                            let e = {
                                let l13 = *ptr10
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l14 = *ptr10
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base56 = l13;
                                let len56 = l14;
                                let mut result56 = _rt::Vec::with_capacity(len56);
                                for i in 0..len56 {
                                    let base = base56
                                        .add(i * (8 + 20 * ::core::mem::size_of::<*const u8>()));
                                    let e56 = {
                                        let l15 = *base.add(0).cast::<*mut u8>();
                                        let l16 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len17 = l16;
                                        let bytes17 = _rt::Vec::from_raw_parts(
                                            l15.cast(),
                                            len17,
                                            len17,
                                        );
                                        let l18 = i32::from(
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l22 = i32::from(
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l26 = *base
                                            .add(8 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l27 = *base
                                            .add(9 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len28 = l27;
                                        let bytes28 = _rt::Vec::from_raw_parts(
                                            l26.cast(),
                                            len28,
                                            len28,
                                        );
                                        let l29 = i32::from(
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l33 = i32::from(
                                            *base
                                                .add(13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l46 = i32::from(
                                            *base
                                                .add(8 + 17 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        super::super::super::fastertools::mcp::tools::Tool {
                                            base: super::super::super::fastertools::mcp::types::BaseMetadata {
                                                name: _rt::string_lift(bytes17),
                                                title: match l18 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l19 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l20 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len21 = l20;
                                                            let bytes21 = _rt::Vec::from_raw_parts(
                                                                l19.cast(),
                                                                len21,
                                                                len21,
                                                            );
                                                            _rt::string_lift(bytes21)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            },
                                            description: match l22 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l23 = *base
                                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l24 = *base
                                                            .add(7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len25 = l24;
                                                        let bytes25 = _rt::Vec::from_raw_parts(
                                                            l23.cast(),
                                                            len25,
                                                            len25,
                                                        );
                                                        _rt::string_lift(bytes25)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            input_schema: _rt::string_lift(bytes28),
                                            output_schema: match l29 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l30 = *base
                                                            .add(11 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l31 = *base
                                                            .add(12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len32 = l31;
                                                        let bytes32 = _rt::Vec::from_raw_parts(
                                                            l30.cast(),
                                                            len32,
                                                            len32,
                                                        );
                                                        _rt::string_lift(bytes32)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            annotations: match l33 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l34 = i32::from(
                                                            *base
                                                                .add(14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l38 = i32::from(
                                                            *base
                                                                .add(17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l40 = i32::from(
                                                            *base
                                                                .add(2 + 17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l42 = i32::from(
                                                            *base
                                                                .add(4 + 17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l44 = i32::from(
                                                            *base
                                                                .add(6 + 17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        super::super::super::fastertools::mcp::tools::ToolAnnotations {
                                                            title: match l34 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l35 = *base
                                                                            .add(15 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l36 = *base
                                                                            .add(16 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len37 = l36;
                                                                        let bytes37 = _rt::Vec::from_raw_parts(
                                                                            l35.cast(),
                                                                            len37,
                                                                            len37,
                                                                        );
                                                                        _rt::string_lift(bytes37)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            read_only_hint: match l38 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l39 = i32::from(
                                                                            *base
                                                                                .add(1 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l39 as u8)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            destructive_hint: match l40 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l41 = i32::from(
                                                                            *base
                                                                                .add(3 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l41 as u8)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            idempotent_hint: match l42 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l43 = i32::from(
                                                                            *base
                                                                                .add(5 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l43 as u8)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            open_world_hint: match l44 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l45 = i32::from(
                                                                            *base
                                                                                .add(7 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l45 as u8)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            meta: match l46 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l47 = *base
                                                            .add(8 + 18 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l48 = *base
                                                            .add(8 + 19 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base55 = l47;
                                                        let len55 = l48;
                                                        let mut result55 = _rt::Vec::with_capacity(len55);
                                                        for i in 0..len55 {
                                                            let base = base55
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e55 = {
                                                                let l49 = *base.add(0).cast::<*mut u8>();
                                                                let l50 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len51 = l50;
                                                                let bytes51 = _rt::Vec::from_raw_parts(
                                                                    l49.cast(),
                                                                    len51,
                                                                    len51,
                                                                );
                                                                let l52 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l53 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len54 = l53;
                                                                let bytes54 = _rt::Vec::from_raw_parts(
                                                                    l52.cast(),
                                                                    len54,
                                                                    len54,
                                                                );
                                                                (_rt::string_lift(bytes51), _rt::string_lift(bytes54))
                                                            };
                                                            result55.push(e55);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base55,
                                                            len55 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        result55
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    result56.push(e56);
                                }
                                _rt::cabi_dealloc(
                                    base56,
                                    len56 * (8 + 20 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l57 = i32::from(
                                    *ptr10
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l61 = i32::from(
                                    *ptr10
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::tools::ListToolsResponse {
                                    tools: result56,
                                    next_cursor: match l57 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l58 = *ptr10
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l59 = *ptr10
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len60 = l59;
                                                let bytes60 = _rt::Vec::from_raw_parts(
                                                    l58.cast(),
                                                    len60,
                                                    len60,
                                                );
                                                _rt::string_lift(bytes60)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    meta: match l61 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l62 = *ptr10
                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l63 = *ptr10
                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base70 = l62;
                                                let len70 = l63;
                                                let mut result70 = _rt::Vec::with_capacity(len70);
                                                for i in 0..len70 {
                                                    let base = base70
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e70 = {
                                                        let l64 = *base.add(0).cast::<*mut u8>();
                                                        let l65 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len66 = l65;
                                                        let bytes66 = _rt::Vec::from_raw_parts(
                                                            l64.cast(),
                                                            len66,
                                                            len66,
                                                        );
                                                        let l67 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l68 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len69 = l68;
                                                        let bytes69 = _rt::Vec::from_raw_parts(
                                                            l67.cast(),
                                                            len69,
                                                            len69,
                                                        );
                                                        (_rt::string_lift(bytes66), _rt::string_lift(bytes69))
                                                    };
                                                    result70.push(e70);
                                                }
                                                _rt::cabi_dealloc(
                                                    base70,
                                                    len70 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result70
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l71 = i32::from(
                                    *ptr10.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V73;
                                let v73 = match l71 {
                                    0 => V73::ParseError,
                                    1 => V73::InvalidRequest,
                                    2 => V73::MethodNotFound,
                                    3 => V73::InvalidParams,
                                    4 => V73::InternalError,
                                    5 => V73::ResourceNotFound,
                                    6 => V73::ToolNotFound,
                                    7 => V73::PromptNotFound,
                                    8 => V73::Unauthorized,
                                    9 => V73::RateLimited,
                                    10 => V73::Timeout,
                                    11 => V73::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e73 = {
                                            let l72 = *ptr10
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l72
                                        };
                                        V73::CustomCode(e73)
                                    }
                                };
                                let l74 = *ptr10
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l75 = *ptr10
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len76 = l75;
                                let bytes76 = _rt::Vec::from_raw_parts(
                                    l74.cast(),
                                    len76,
                                    len76,
                                );
                                let l77 = i32::from(
                                    *ptr10
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v73,
                                    message: _rt::string_lift(bytes76),
                                    data: match l77 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l78 = *ptr10
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l79 = *ptr10
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len80 = l79;
                                                let bytes80 = _rt::Vec::from_raw_parts(
                                                    l78.cast(),
                                                    len80,
                                                    len80,
                                                );
                                                _rt::string_lift(bytes80)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result81
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Execute a tool
            pub fn handle_call_tool(
                request: &CallToolRequest,
            ) -> Result<ToolResult, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 10 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 10
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::fastertools::mcp::tools::CallToolRequest {
                        name: name0,
                        arguments: arguments0,
                        progress_token: progress_token0,
                        meta: meta0,
                    } = request;
                    let vec1 = name0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let (result3_0, result3_1, result3_2) = match arguments0 {
                        Some(e) => {
                            let vec2 = e;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            (1i32, ptr2.cast_mut(), len2)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result5_0, result5_1, result5_2) = match progress_token0 {
                        Some(e) => {
                            let vec4 = e;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            (1i32, ptr4.cast_mut(), len4)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result10_0, result10_1, result10_2) = match meta0 {
                        Some(e) => {
                            let vec9 = e;
                            let len9 = vec9.len();
                            let layout9 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec9.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result9 = if layout9.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout9).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout9);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec9.into_iter().enumerate() {
                                let base = result9
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t6_0, t6_1) = e;
                                    let vec7 = t6_0;
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *base.add(0).cast::<*mut u8>() = ptr7.cast_mut();
                                    let vec8 = t6_1;
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr8.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result9, layout9)]);
                            (1i32, result9, len9)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr11 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "fastertools:mcp/tools-capabilities@0.1.10"
                    )]
                    unsafe extern "C" {
                        #[link_name = "handle-call-tool"]
                        fn wit_import12(
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import12(
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import12(
                            ptr1.cast_mut(),
                            len1,
                            result3_0,
                            result3_1,
                            result3_2,
                            result5_0,
                            result5_1,
                            result5_2,
                            result10_0,
                            result10_1,
                            result10_2,
                            ptr11,
                        )
                    };
                    let l13 = i32::from(*ptr11.add(0).cast::<u8>());
                    let result232 = match l13 {
                        0 => {
                            let e = {
                                let l14 = *ptr11
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l15 = *ptr11
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base205 = l14;
                                let len205 = l15;
                                let mut result205 = _rt::Vec::with_capacity(len205);
                                for i in 0..len205 {
                                    let base = base205
                                        .add(i * (80 + 18 * ::core::mem::size_of::<*const u8>()));
                                    let e205 = {
                                        let l16 = i32::from(*base.add(0).cast::<u8>());
                                        use super::super::super::fastertools::mcp::types::ContentBlock as V204;
                                        let v204 = match l16 {
                                            0 => {
                                                let e204 = {
                                                    let l17 = *base.add(8).cast::<*mut u8>();
                                                    let l18 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len19 = l18;
                                                    let bytes19 = _rt::Vec::from_raw_parts(
                                                        l17.cast(),
                                                        len19,
                                                        len19,
                                                    );
                                                    let l20 = i32::from(
                                                        *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l32 = i32::from(
                                                        *base
                                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::fastertools::mcp::types::TextContent {
                                                        text: _rt::string_lift(bytes19),
                                                        annotations: match l20 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l21 = i32::from(
                                                                        *base
                                                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l26 = i32::from(
                                                                        *base
                                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l28 = i32::from(
                                                                        *base
                                                                            .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::fastertools::mcp::types::Annotations {
                                                                        audience: match l21 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l22 = *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l23 = *base
                                                                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base25 = l22;
                                                                                    let len25 = l23;
                                                                                    let mut result25 = _rt::Vec::with_capacity(len25);
                                                                                    for i in 0..len25 {
                                                                                        let base = base25.add(i * 1);
                                                                                        let e25 = {
                                                                                            let l24 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                                l24 as u8,
                                                                                            )
                                                                                        };
                                                                                        result25.push(e25);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base25, len25 * 1, 1);
                                                                                    result25
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l26 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l27 = *base
                                                                                        .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l27
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l28 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l29 = *base
                                                                                        .add(40 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l30 = *base
                                                                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len31 = l30;
                                                                                    let bytes31 = _rt::Vec::from_raw_parts(
                                                                                        l29.cast(),
                                                                                        len31,
                                                                                        len31,
                                                                                    );
                                                                                    _rt::string_lift(bytes31)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l32 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l33 = *base
                                                                        .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l34 = *base
                                                                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base41 = l33;
                                                                    let len41 = l34;
                                                                    let mut result41 = _rt::Vec::with_capacity(len41);
                                                                    for i in 0..len41 {
                                                                        let base = base41
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e41 = {
                                                                            let l35 = *base.add(0).cast::<*mut u8>();
                                                                            let l36 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len37 = l36;
                                                                            let bytes37 = _rt::Vec::from_raw_parts(
                                                                                l35.cast(),
                                                                                len37,
                                                                                len37,
                                                                            );
                                                                            let l38 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l39 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len40 = l39;
                                                                            let bytes40 = _rt::Vec::from_raw_parts(
                                                                                l38.cast(),
                                                                                len40,
                                                                                len40,
                                                                            );
                                                                            (_rt::string_lift(bytes37), _rt::string_lift(bytes40))
                                                                        };
                                                                        result41.push(e41);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base41,
                                                                        len41 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result41
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V204::Text(e204)
                                            }
                                            1 => {
                                                let e204 = {
                                                    let l42 = *base.add(8).cast::<*mut u8>();
                                                    let l43 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len44 = l43;
                                                    let l45 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l46 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len47 = l46;
                                                    let bytes47 = _rt::Vec::from_raw_parts(
                                                        l45.cast(),
                                                        len47,
                                                        len47,
                                                    );
                                                    let l48 = i32::from(
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l60 = i32::from(
                                                        *base
                                                            .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::fastertools::mcp::types::ImageContent {
                                                        data: _rt::Vec::from_raw_parts(l42.cast(), len44, len44),
                                                        mime_type: _rt::string_lift(bytes47),
                                                        annotations: match l48 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l49 = i32::from(
                                                                        *base
                                                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l54 = i32::from(
                                                                        *base
                                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l56 = i32::from(
                                                                        *base
                                                                            .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::fastertools::mcp::types::Annotations {
                                                                        audience: match l49 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l50 = *base
                                                                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l51 = *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base53 = l50;
                                                                                    let len53 = l51;
                                                                                    let mut result53 = _rt::Vec::with_capacity(len53);
                                                                                    for i in 0..len53 {
                                                                                        let base = base53.add(i * 1);
                                                                                        let e53 = {
                                                                                            let l52 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                                l52 as u8,
                                                                                            )
                                                                                        };
                                                                                        result53.push(e53);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base53, len53 * 1, 1);
                                                                                    result53
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l54 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l55 = *base
                                                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l55
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l56 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l57 = *base
                                                                                        .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l58 = *base
                                                                                        .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len59 = l58;
                                                                                    let bytes59 = _rt::Vec::from_raw_parts(
                                                                                        l57.cast(),
                                                                                        len59,
                                                                                        len59,
                                                                                    );
                                                                                    _rt::string_lift(bytes59)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l60 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l61 = *base
                                                                        .add(48 + 9 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l62 = *base
                                                                        .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base69 = l61;
                                                                    let len69 = l62;
                                                                    let mut result69 = _rt::Vec::with_capacity(len69);
                                                                    for i in 0..len69 {
                                                                        let base = base69
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e69 = {
                                                                            let l63 = *base.add(0).cast::<*mut u8>();
                                                                            let l64 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len65 = l64;
                                                                            let bytes65 = _rt::Vec::from_raw_parts(
                                                                                l63.cast(),
                                                                                len65,
                                                                                len65,
                                                                            );
                                                                            let l66 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l67 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len68 = l67;
                                                                            let bytes68 = _rt::Vec::from_raw_parts(
                                                                                l66.cast(),
                                                                                len68,
                                                                                len68,
                                                                            );
                                                                            (_rt::string_lift(bytes65), _rt::string_lift(bytes68))
                                                                        };
                                                                        result69.push(e69);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base69,
                                                                        len69 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result69
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V204::Image(e204)
                                            }
                                            2 => {
                                                let e204 = {
                                                    let l70 = *base.add(8).cast::<*mut u8>();
                                                    let l71 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len72 = l71;
                                                    let l73 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l74 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len75 = l74;
                                                    let bytes75 = _rt::Vec::from_raw_parts(
                                                        l73.cast(),
                                                        len75,
                                                        len75,
                                                    );
                                                    let l76 = i32::from(
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l88 = i32::from(
                                                        *base
                                                            .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::fastertools::mcp::types::AudioContent {
                                                        data: _rt::Vec::from_raw_parts(l70.cast(), len72, len72),
                                                        mime_type: _rt::string_lift(bytes75),
                                                        annotations: match l76 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l77 = i32::from(
                                                                        *base
                                                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l82 = i32::from(
                                                                        *base
                                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l84 = i32::from(
                                                                        *base
                                                                            .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::fastertools::mcp::types::Annotations {
                                                                        audience: match l77 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l78 = *base
                                                                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l79 = *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base81 = l78;
                                                                                    let len81 = l79;
                                                                                    let mut result81 = _rt::Vec::with_capacity(len81);
                                                                                    for i in 0..len81 {
                                                                                        let base = base81.add(i * 1);
                                                                                        let e81 = {
                                                                                            let l80 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                                l80 as u8,
                                                                                            )
                                                                                        };
                                                                                        result81.push(e81);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base81, len81 * 1, 1);
                                                                                    result81
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l82 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l83 = *base
                                                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l83
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l84 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l85 = *base
                                                                                        .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l86 = *base
                                                                                        .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len87 = l86;
                                                                                    let bytes87 = _rt::Vec::from_raw_parts(
                                                                                        l85.cast(),
                                                                                        len87,
                                                                                        len87,
                                                                                    );
                                                                                    _rt::string_lift(bytes87)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l88 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l89 = *base
                                                                        .add(48 + 9 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l90 = *base
                                                                        .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base97 = l89;
                                                                    let len97 = l90;
                                                                    let mut result97 = _rt::Vec::with_capacity(len97);
                                                                    for i in 0..len97 {
                                                                        let base = base97
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e97 = {
                                                                            let l91 = *base.add(0).cast::<*mut u8>();
                                                                            let l92 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len93 = l92;
                                                                            let bytes93 = _rt::Vec::from_raw_parts(
                                                                                l91.cast(),
                                                                                len93,
                                                                                len93,
                                                                            );
                                                                            let l94 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l95 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len96 = l95;
                                                                            let bytes96 = _rt::Vec::from_raw_parts(
                                                                                l94.cast(),
                                                                                len96,
                                                                                len96,
                                                                            );
                                                                            (_rt::string_lift(bytes93), _rt::string_lift(bytes96))
                                                                        };
                                                                        result97.push(e97);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base97,
                                                                        len97 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result97
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V204::Audio(e204)
                                            }
                                            3 => {
                                                let e204 = {
                                                    let l98 = *base.add(8).cast::<*mut u8>();
                                                    let l99 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len100 = l99;
                                                    let bytes100 = _rt::Vec::from_raw_parts(
                                                        l98.cast(),
                                                        len100,
                                                        len100,
                                                    );
                                                    let l101 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l102 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len103 = l102;
                                                    let bytes103 = _rt::Vec::from_raw_parts(
                                                        l101.cast(),
                                                        len103,
                                                        len103,
                                                    );
                                                    let l104 = i32::from(
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l108 = i32::from(
                                                        *base
                                                            .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l112 = i32::from(
                                                        *base
                                                            .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l116 = i32::from(
                                                        *base
                                                            .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l118 = i32::from(
                                                        *base
                                                            .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l130 = i32::from(
                                                        *base
                                                            .add(72 + 16 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::fastertools::mcp::types::ResourceLink {
                                                        uri: _rt::string_lift(bytes100),
                                                        name: _rt::string_lift(bytes103),
                                                        title: match l104 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l105 = *base
                                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l106 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len107 = l106;
                                                                    let bytes107 = _rt::Vec::from_raw_parts(
                                                                        l105.cast(),
                                                                        len107,
                                                                        len107,
                                                                    );
                                                                    _rt::string_lift(bytes107)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        description: match l108 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l109 = *base
                                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l110 = *base
                                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len111 = l110;
                                                                    let bytes111 = _rt::Vec::from_raw_parts(
                                                                        l109.cast(),
                                                                        len111,
                                                                        len111,
                                                                    );
                                                                    _rt::string_lift(bytes111)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        mime_type: match l112 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l113 = *base
                                                                        .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l114 = *base
                                                                        .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len115 = l114;
                                                                    let bytes115 = _rt::Vec::from_raw_parts(
                                                                        l113.cast(),
                                                                        len115,
                                                                        len115,
                                                                    );
                                                                    _rt::string_lift(bytes115)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        size: match l116 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l117 = *base
                                                                        .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>();
                                                                    l117 as u64
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        annotations: match l118 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l119 = i32::from(
                                                                        *base
                                                                            .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l124 = i32::from(
                                                                        *base
                                                                            .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l126 = i32::from(
                                                                        *base
                                                                            .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::fastertools::mcp::types::Annotations {
                                                                        audience: match l119 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l120 = *base
                                                                                        .add(40 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l121 = *base
                                                                                        .add(40 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base123 = l120;
                                                                                    let len123 = l121;
                                                                                    let mut result123 = _rt::Vec::with_capacity(len123);
                                                                                    for i in 0..len123 {
                                                                                        let base = base123.add(i * 1);
                                                                                        let e123 = {
                                                                                            let l122 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                                l122 as u8,
                                                                                            )
                                                                                        };
                                                                                        result123.push(e123);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base123, len123 * 1, 1);
                                                                                    result123
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l124 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l125 = *base
                                                                                        .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l125
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l126 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l127 = *base
                                                                                        .add(64 + 15 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l128 = *base
                                                                                        .add(64 + 16 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len129 = l128;
                                                                                    let bytes129 = _rt::Vec::from_raw_parts(
                                                                                        l127.cast(),
                                                                                        len129,
                                                                                        len129,
                                                                                    );
                                                                                    _rt::string_lift(bytes129)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l130 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l131 = *base
                                                                        .add(72 + 17 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l132 = *base
                                                                        .add(72 + 18 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base139 = l131;
                                                                    let len139 = l132;
                                                                    let mut result139 = _rt::Vec::with_capacity(len139);
                                                                    for i in 0..len139 {
                                                                        let base = base139
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e139 = {
                                                                            let l133 = *base.add(0).cast::<*mut u8>();
                                                                            let l134 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len135 = l134;
                                                                            let bytes135 = _rt::Vec::from_raw_parts(
                                                                                l133.cast(),
                                                                                len135,
                                                                                len135,
                                                                            );
                                                                            let l136 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l137 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len138 = l137;
                                                                            let bytes138 = _rt::Vec::from_raw_parts(
                                                                                l136.cast(),
                                                                                len138,
                                                                                len138,
                                                                            );
                                                                            (_rt::string_lift(bytes135), _rt::string_lift(bytes138))
                                                                        };
                                                                        result139.push(e139);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base139,
                                                                        len139 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result139
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V204::ResourceLink(e204)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 4, "invalid enum discriminant");
                                                let e204 = {
                                                    let l140 = i32::from(*base.add(8).cast::<u8>());
                                                    use super::super::super::fastertools::mcp::types::ResourceContents as V181;
                                                    let v181 = match l140 {
                                                        0 => {
                                                            let e181 = {
                                                                let l141 = *base
                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l142 = *base
                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len143 = l142;
                                                                let bytes143 = _rt::Vec::from_raw_parts(
                                                                    l141.cast(),
                                                                    len143,
                                                                    len143,
                                                                );
                                                                let l144 = i32::from(
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l148 = *base
                                                                    .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l149 = *base
                                                                    .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len150 = l149;
                                                                let bytes150 = _rt::Vec::from_raw_parts(
                                                                    l148.cast(),
                                                                    len150,
                                                                    len150,
                                                                );
                                                                let l151 = i32::from(
                                                                    *base
                                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::fastertools::mcp::types::TextResourceContents {
                                                                    uri: _rt::string_lift(bytes143),
                                                                    mime_type: match l144 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l145 = *base
                                                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l146 = *base
                                                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len147 = l146;
                                                                                let bytes147 = _rt::Vec::from_raw_parts(
                                                                                    l145.cast(),
                                                                                    len147,
                                                                                    len147,
                                                                                );
                                                                                _rt::string_lift(bytes147)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    text: _rt::string_lift(bytes150),
                                                                    meta: match l151 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l152 = *base
                                                                                    .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l153 = *base
                                                                                    .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let base160 = l152;
                                                                                let len160 = l153;
                                                                                let mut result160 = _rt::Vec::with_capacity(len160);
                                                                                for i in 0..len160 {
                                                                                    let base = base160
                                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                                    let e160 = {
                                                                                        let l154 = *base.add(0).cast::<*mut u8>();
                                                                                        let l155 = *base
                                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len156 = l155;
                                                                                        let bytes156 = _rt::Vec::from_raw_parts(
                                                                                            l154.cast(),
                                                                                            len156,
                                                                                            len156,
                                                                                        );
                                                                                        let l157 = *base
                                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<*mut u8>();
                                                                                        let l158 = *base
                                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len159 = l158;
                                                                                        let bytes159 = _rt::Vec::from_raw_parts(
                                                                                            l157.cast(),
                                                                                            len159,
                                                                                            len159,
                                                                                        );
                                                                                        (_rt::string_lift(bytes156), _rt::string_lift(bytes159))
                                                                                    };
                                                                                    result160.push(e160);
                                                                                }
                                                                                _rt::cabi_dealloc(
                                                                                    base160,
                                                                                    len160 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                                    ::core::mem::size_of::<*const u8>(),
                                                                                );
                                                                                result160
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V181::Text(e181)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e181 = {
                                                                let l161 = *base
                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l162 = *base
                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len163 = l162;
                                                                let bytes163 = _rt::Vec::from_raw_parts(
                                                                    l161.cast(),
                                                                    len163,
                                                                    len163,
                                                                );
                                                                let l164 = i32::from(
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l168 = *base
                                                                    .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l169 = *base
                                                                    .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len170 = l169;
                                                                let l171 = i32::from(
                                                                    *base
                                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::fastertools::mcp::types::BlobResourceContents {
                                                                    uri: _rt::string_lift(bytes163),
                                                                    mime_type: match l164 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l165 = *base
                                                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l166 = *base
                                                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len167 = l166;
                                                                                let bytes167 = _rt::Vec::from_raw_parts(
                                                                                    l165.cast(),
                                                                                    len167,
                                                                                    len167,
                                                                                );
                                                                                _rt::string_lift(bytes167)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    blob: _rt::Vec::from_raw_parts(l168.cast(), len170, len170),
                                                                    meta: match l171 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l172 = *base
                                                                                    .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l173 = *base
                                                                                    .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let base180 = l172;
                                                                                let len180 = l173;
                                                                                let mut result180 = _rt::Vec::with_capacity(len180);
                                                                                for i in 0..len180 {
                                                                                    let base = base180
                                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                                    let e180 = {
                                                                                        let l174 = *base.add(0).cast::<*mut u8>();
                                                                                        let l175 = *base
                                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len176 = l175;
                                                                                        let bytes176 = _rt::Vec::from_raw_parts(
                                                                                            l174.cast(),
                                                                                            len176,
                                                                                            len176,
                                                                                        );
                                                                                        let l177 = *base
                                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<*mut u8>();
                                                                                        let l178 = *base
                                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len179 = l178;
                                                                                        let bytes179 = _rt::Vec::from_raw_parts(
                                                                                            l177.cast(),
                                                                                            len179,
                                                                                            len179,
                                                                                        );
                                                                                        (_rt::string_lift(bytes176), _rt::string_lift(bytes179))
                                                                                    };
                                                                                    result180.push(e180);
                                                                                }
                                                                                _rt::cabi_dealloc(
                                                                                    base180,
                                                                                    len180 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                                    ::core::mem::size_of::<*const u8>(),
                                                                                );
                                                                                result180
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V181::Blob(e181)
                                                        }
                                                    };
                                                    let l182 = i32::from(
                                                        *base
                                                            .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l194 = i32::from(
                                                        *base
                                                            .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::fastertools::mcp::types::EmbeddedResource {
                                                        contents: v181,
                                                        annotations: match l182 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l183 = i32::from(
                                                                        *base
                                                                            .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l188 = i32::from(
                                                                        *base
                                                                            .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l190 = i32::from(
                                                                        *base
                                                                            .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::fastertools::mcp::types::Annotations {
                                                                        audience: match l183 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l184 = *base
                                                                                        .add(24 + 11 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l185 = *base
                                                                                        .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base187 = l184;
                                                                                    let len187 = l185;
                                                                                    let mut result187 = _rt::Vec::with_capacity(len187);
                                                                                    for i in 0..len187 {
                                                                                        let base = base187.add(i * 1);
                                                                                        let e187 = {
                                                                                            let l186 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                                l186 as u8,
                                                                                            )
                                                                                        };
                                                                                        result187.push(e187);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base187, len187 * 1, 1);
                                                                                    result187
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l188 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l189 = *base
                                                                                        .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l189
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l190 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l191 = *base
                                                                                        .add(48 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l192 = *base
                                                                                        .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len193 = l192;
                                                                                    let bytes193 = _rt::Vec::from_raw_parts(
                                                                                        l191.cast(),
                                                                                        len193,
                                                                                        len193,
                                                                                    );
                                                                                    _rt::string_lift(bytes193)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l194 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l195 = *base
                                                                        .add(56 + 15 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l196 = *base
                                                                        .add(56 + 16 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base203 = l195;
                                                                    let len203 = l196;
                                                                    let mut result203 = _rt::Vec::with_capacity(len203);
                                                                    for i in 0..len203 {
                                                                        let base = base203
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e203 = {
                                                                            let l197 = *base.add(0).cast::<*mut u8>();
                                                                            let l198 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len199 = l198;
                                                                            let bytes199 = _rt::Vec::from_raw_parts(
                                                                                l197.cast(),
                                                                                len199,
                                                                                len199,
                                                                            );
                                                                            let l200 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l201 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len202 = l201;
                                                                            let bytes202 = _rt::Vec::from_raw_parts(
                                                                                l200.cast(),
                                                                                len202,
                                                                                len202,
                                                                            );
                                                                            (_rt::string_lift(bytes199), _rt::string_lift(bytes202))
                                                                        };
                                                                        result203.push(e203);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base203,
                                                                        len203 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result203
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V204::EmbeddedResource(e204)
                                            }
                                        };
                                        v204
                                    };
                                    result205.push(e205);
                                }
                                _rt::cabi_dealloc(
                                    base205,
                                    len205 * (80 + 18 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let l206 = i32::from(
                                    *ptr11
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l210 = i32::from(
                                    *ptr11
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l212 = i32::from(
                                    *ptr11
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::tools::ToolResult {
                                    content: result205,
                                    structured_content: match l206 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l207 = *ptr11
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l208 = *ptr11
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len209 = l208;
                                                let bytes209 = _rt::Vec::from_raw_parts(
                                                    l207.cast(),
                                                    len209,
                                                    len209,
                                                );
                                                _rt::string_lift(bytes209)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    is_error: match l210 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l211 = i32::from(
                                                    *ptr11
                                                        .add(1 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                _rt::bool_lift(l211 as u8)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    meta: match l212 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l213 = *ptr11
                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l214 = *ptr11
                                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base221 = l213;
                                                let len221 = l214;
                                                let mut result221 = _rt::Vec::with_capacity(len221);
                                                for i in 0..len221 {
                                                    let base = base221
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e221 = {
                                                        let l215 = *base.add(0).cast::<*mut u8>();
                                                        let l216 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len217 = l216;
                                                        let bytes217 = _rt::Vec::from_raw_parts(
                                                            l215.cast(),
                                                            len217,
                                                            len217,
                                                        );
                                                        let l218 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l219 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len220 = l219;
                                                        let bytes220 = _rt::Vec::from_raw_parts(
                                                            l218.cast(),
                                                            len220,
                                                            len220,
                                                        );
                                                        (_rt::string_lift(bytes217), _rt::string_lift(bytes220))
                                                    };
                                                    result221.push(e221);
                                                }
                                                _rt::cabi_dealloc(
                                                    base221,
                                                    len221 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result221
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l222 = i32::from(
                                    *ptr11.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V224;
                                let v224 = match l222 {
                                    0 => V224::ParseError,
                                    1 => V224::InvalidRequest,
                                    2 => V224::MethodNotFound,
                                    3 => V224::InvalidParams,
                                    4 => V224::InternalError,
                                    5 => V224::ResourceNotFound,
                                    6 => V224::ToolNotFound,
                                    7 => V224::PromptNotFound,
                                    8 => V224::Unauthorized,
                                    9 => V224::RateLimited,
                                    10 => V224::Timeout,
                                    11 => V224::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e224 = {
                                            let l223 = *ptr11
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l223
                                        };
                                        V224::CustomCode(e224)
                                    }
                                };
                                let l225 = *ptr11
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l226 = *ptr11
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len227 = l226;
                                let bytes227 = _rt::Vec::from_raw_parts(
                                    l225.cast(),
                                    len227,
                                    len227,
                                );
                                let l228 = i32::from(
                                    *ptr11
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v224,
                                    message: _rt::string_lift(bytes227),
                                    data: match l228 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l229 = *ptr11
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l230 = *ptr11
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len231 = l230;
                                                let bytes231 = _rt::Vec::from_raw_parts(
                                                    l229.cast(),
                                                    len231,
                                                    len231,
                                                );
                                                _rt::string_lift(bytes231)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result232
                }
            }
        }
        /// Resource capabilities - implement this to provide resources
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod resources_capabilities {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type McpError = super::super::super::fastertools::mcp::types::McpError;
            pub type ListResourcesRequest = super::super::super::fastertools::mcp::resources::ListResourcesRequest;
            pub type ListResourcesResponse = super::super::super::fastertools::mcp::resources::ListResourcesResponse;
            pub type ListTemplatesRequest = super::super::super::fastertools::mcp::resources::ListTemplatesRequest;
            pub type ListTemplatesResponse = super::super::super::fastertools::mcp::resources::ListTemplatesResponse;
            pub type ReadResourceRequest = super::super::super::fastertools::mcp::resources::ReadResourceRequest;
            pub type ReadResourceResponse = super::super::super::fastertools::mcp::resources::ReadResourceResponse;
            pub type SubscribeRequest = super::super::super::fastertools::mcp::resources::SubscribeRequest;
            pub type UnsubscribeRequest = super::super::super::fastertools::mcp::resources::UnsubscribeRequest;
            #[allow(unused_unsafe, clippy::all)]
            /// List available resources
            pub fn handle_list_resources(
                request: &ListResourcesRequest,
            ) -> Result<ListResourcesResponse, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 9 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 9
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::fastertools::mcp::resources::ListResourcesRequest {
                        cursor: cursor0,
                        progress_token: progress_token0,
                        meta: meta0,
                    } = request;
                    let (result2_0, result2_1, result2_2) = match cursor0 {
                        Some(e) => {
                            let vec1 = e;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            (1i32, ptr1.cast_mut(), len1)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result4_0, result4_1, result4_2) = match progress_token0 {
                        Some(e) => {
                            let vec3 = e;
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            (1i32, ptr3.cast_mut(), len3)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result9_0, result9_1, result9_2) = match meta0 {
                        Some(e) => {
                            let vec8 = e;
                            let len8 = vec8.len();
                            let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec8.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result8 = if layout8.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout8);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec8.into_iter().enumerate() {
                                let base = result8
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t5_0, t5_1) = e;
                                    let vec6 = t5_0;
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                                    let vec7 = t5_1;
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr7.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result8, layout8)]);
                            (1i32, result8, len8)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr10 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "fastertools:mcp/resources-capabilities@0.1.10"
                    )]
                    unsafe extern "C" {
                        #[link_name = "handle-list-resources"]
                        fn wit_import11(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import11(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import11(
                            result2_0,
                            result2_1,
                            result2_2,
                            result4_0,
                            result4_1,
                            result4_2,
                            result9_0,
                            result9_1,
                            result9_2,
                            ptr10,
                        )
                    };
                    let l12 = i32::from(*ptr10.add(0).cast::<u8>());
                    let result82 = match l12 {
                        0 => {
                            let e = {
                                let l13 = *ptr10
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l14 = *ptr10
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base57 = l13;
                                let len57 = l14;
                                let mut result57 = _rt::Vec::with_capacity(len57);
                                for i in 0..len57 {
                                    let base = base57
                                        .add(i * (72 + 18 * ::core::mem::size_of::<*const u8>()));
                                    let e57 = {
                                        let l15 = *base.add(0).cast::<*mut u8>();
                                        let l16 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len17 = l16;
                                        let bytes17 = _rt::Vec::from_raw_parts(
                                            l15.cast(),
                                            len17,
                                            len17,
                                        );
                                        let l18 = i32::from(
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l22 = *base
                                            .add(5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l23 = *base
                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len24 = l23;
                                        let bytes24 = _rt::Vec::from_raw_parts(
                                            l22.cast(),
                                            len24,
                                            len24,
                                        );
                                        let l25 = i32::from(
                                            *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l29 = i32::from(
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l33 = i32::from(
                                            *base
                                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l35 = i32::from(
                                            *base
                                                .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l47 = i32::from(
                                            *base
                                                .add(64 + 16 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        super::super::super::fastertools::mcp::resources::McpResource {
                                            base: super::super::super::fastertools::mcp::types::BaseMetadata {
                                                name: _rt::string_lift(bytes17),
                                                title: match l18 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l19 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l20 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len21 = l20;
                                                            let bytes21 = _rt::Vec::from_raw_parts(
                                                                l19.cast(),
                                                                len21,
                                                                len21,
                                                            );
                                                            _rt::string_lift(bytes21)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            },
                                            uri: _rt::string_lift(bytes24),
                                            description: match l25 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l26 = *base
                                                            .add(8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l27 = *base
                                                            .add(9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len28 = l27;
                                                        let bytes28 = _rt::Vec::from_raw_parts(
                                                            l26.cast(),
                                                            len28,
                                                            len28,
                                                        );
                                                        _rt::string_lift(bytes28)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            mime_type: match l29 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l30 = *base
                                                            .add(11 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l31 = *base
                                                            .add(12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len32 = l31;
                                                        let bytes32 = _rt::Vec::from_raw_parts(
                                                            l30.cast(),
                                                            len32,
                                                            len32,
                                                        );
                                                        _rt::string_lift(bytes32)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            size: match l33 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l34 = *base
                                                            .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        l34 as u64
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            annotations: match l35 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l36 = i32::from(
                                                            *base
                                                                .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l41 = i32::from(
                                                            *base
                                                                .add(40 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l43 = i32::from(
                                                            *base
                                                                .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        super::super::super::fastertools::mcp::types::Annotations {
                                                            audience: match l36 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l37 = *base
                                                                            .add(32 + 13 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l38 = *base
                                                                            .add(32 + 14 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base40 = l37;
                                                                        let len40 = l38;
                                                                        let mut result40 = _rt::Vec::with_capacity(len40);
                                                                        for i in 0..len40 {
                                                                            let base = base40.add(i * 1);
                                                                            let e40 = {
                                                                                let l39 = i32::from(*base.add(0).cast::<u8>());
                                                                                super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                    l39 as u8,
                                                                                )
                                                                            };
                                                                            result40.push(e40);
                                                                        }
                                                                        _rt::cabi_dealloc(base40, len40 * 1, 1);
                                                                        result40
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            priority: match l41 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l42 = *base
                                                                            .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        l42
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            last_modified: match l43 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l44 = *base
                                                                            .add(56 + 15 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l45 = *base
                                                                            .add(56 + 16 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len46 = l45;
                                                                        let bytes46 = _rt::Vec::from_raw_parts(
                                                                            l44.cast(),
                                                                            len46,
                                                                            len46,
                                                                        );
                                                                        _rt::string_lift(bytes46)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            meta: match l47 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l48 = *base
                                                            .add(64 + 17 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l49 = *base
                                                            .add(64 + 18 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base56 = l48;
                                                        let len56 = l49;
                                                        let mut result56 = _rt::Vec::with_capacity(len56);
                                                        for i in 0..len56 {
                                                            let base = base56
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e56 = {
                                                                let l50 = *base.add(0).cast::<*mut u8>();
                                                                let l51 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len52 = l51;
                                                                let bytes52 = _rt::Vec::from_raw_parts(
                                                                    l50.cast(),
                                                                    len52,
                                                                    len52,
                                                                );
                                                                let l53 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l54 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len55 = l54;
                                                                let bytes55 = _rt::Vec::from_raw_parts(
                                                                    l53.cast(),
                                                                    len55,
                                                                    len55,
                                                                );
                                                                (_rt::string_lift(bytes52), _rt::string_lift(bytes55))
                                                            };
                                                            result56.push(e56);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base56,
                                                            len56 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        result56
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    result57.push(e57);
                                }
                                _rt::cabi_dealloc(
                                    base57,
                                    len57 * (72 + 18 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let l58 = i32::from(
                                    *ptr10
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l62 = i32::from(
                                    *ptr10
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::resources::ListResourcesResponse {
                                    resources: result57,
                                    next_cursor: match l58 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l59 = *ptr10
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l60 = *ptr10
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len61 = l60;
                                                let bytes61 = _rt::Vec::from_raw_parts(
                                                    l59.cast(),
                                                    len61,
                                                    len61,
                                                );
                                                _rt::string_lift(bytes61)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    meta: match l62 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l63 = *ptr10
                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l64 = *ptr10
                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base71 = l63;
                                                let len71 = l64;
                                                let mut result71 = _rt::Vec::with_capacity(len71);
                                                for i in 0..len71 {
                                                    let base = base71
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e71 = {
                                                        let l65 = *base.add(0).cast::<*mut u8>();
                                                        let l66 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len67 = l66;
                                                        let bytes67 = _rt::Vec::from_raw_parts(
                                                            l65.cast(),
                                                            len67,
                                                            len67,
                                                        );
                                                        let l68 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l69 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len70 = l69;
                                                        let bytes70 = _rt::Vec::from_raw_parts(
                                                            l68.cast(),
                                                            len70,
                                                            len70,
                                                        );
                                                        (_rt::string_lift(bytes67), _rt::string_lift(bytes70))
                                                    };
                                                    result71.push(e71);
                                                }
                                                _rt::cabi_dealloc(
                                                    base71,
                                                    len71 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result71
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l72 = i32::from(
                                    *ptr10.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V74;
                                let v74 = match l72 {
                                    0 => V74::ParseError,
                                    1 => V74::InvalidRequest,
                                    2 => V74::MethodNotFound,
                                    3 => V74::InvalidParams,
                                    4 => V74::InternalError,
                                    5 => V74::ResourceNotFound,
                                    6 => V74::ToolNotFound,
                                    7 => V74::PromptNotFound,
                                    8 => V74::Unauthorized,
                                    9 => V74::RateLimited,
                                    10 => V74::Timeout,
                                    11 => V74::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e74 = {
                                            let l73 = *ptr10
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l73
                                        };
                                        V74::CustomCode(e74)
                                    }
                                };
                                let l75 = *ptr10
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l76 = *ptr10
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len77 = l76;
                                let bytes77 = _rt::Vec::from_raw_parts(
                                    l75.cast(),
                                    len77,
                                    len77,
                                );
                                let l78 = i32::from(
                                    *ptr10
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v74,
                                    message: _rt::string_lift(bytes77),
                                    data: match l78 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l79 = *ptr10
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l80 = *ptr10
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len81 = l80;
                                                let bytes81 = _rt::Vec::from_raw_parts(
                                                    l79.cast(),
                                                    len81,
                                                    len81,
                                                );
                                                _rt::string_lift(bytes81)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result82
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// List resource templates
            pub fn handle_list_resource_templates(
                request: &ListTemplatesRequest,
            ) -> Result<ListTemplatesResponse, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 9 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 9
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::fastertools::mcp::resources::ListTemplatesRequest {
                        cursor: cursor0,
                        progress_token: progress_token0,
                        meta: meta0,
                    } = request;
                    let (result2_0, result2_1, result2_2) = match cursor0 {
                        Some(e) => {
                            let vec1 = e;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            (1i32, ptr1.cast_mut(), len1)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result4_0, result4_1, result4_2) = match progress_token0 {
                        Some(e) => {
                            let vec3 = e;
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            (1i32, ptr3.cast_mut(), len3)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result9_0, result9_1, result9_2) = match meta0 {
                        Some(e) => {
                            let vec8 = e;
                            let len8 = vec8.len();
                            let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec8.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result8 = if layout8.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout8);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec8.into_iter().enumerate() {
                                let base = result8
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t5_0, t5_1) = e;
                                    let vec6 = t5_0;
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                                    let vec7 = t5_1;
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr7.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result8, layout8)]);
                            (1i32, result8, len8)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr10 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "fastertools:mcp/resources-capabilities@0.1.10"
                    )]
                    unsafe extern "C" {
                        #[link_name = "handle-list-resource-templates"]
                        fn wit_import11(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import11(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import11(
                            result2_0,
                            result2_1,
                            result2_2,
                            result4_0,
                            result4_1,
                            result4_2,
                            result9_0,
                            result9_1,
                            result9_2,
                            ptr10,
                        )
                    };
                    let l12 = i32::from(*ptr10.add(0).cast::<u8>());
                    let result54 = match l12 {
                        0 => {
                            let e = {
                                let l13 = *ptr10
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l14 = *ptr10
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base29 = l13;
                                let len29 = l14;
                                let mut result29 = _rt::Vec::with_capacity(len29);
                                for i in 0..len29 {
                                    let base = base29
                                        .add(i * (10 * ::core::mem::size_of::<*const u8>()));
                                    let e29 = {
                                        let l15 = *base.add(0).cast::<*mut u8>();
                                        let l16 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len17 = l16;
                                        let bytes17 = _rt::Vec::from_raw_parts(
                                            l15.cast(),
                                            len17,
                                            len17,
                                        );
                                        let l18 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l19 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len20 = l19;
                                        let bytes20 = _rt::Vec::from_raw_parts(
                                            l18.cast(),
                                            len20,
                                            len20,
                                        );
                                        let l21 = i32::from(
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l25 = i32::from(
                                            *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        super::super::super::fastertools::mcp::types::ResourceTemplate {
                                            uri_template: _rt::string_lift(bytes17),
                                            name: _rt::string_lift(bytes20),
                                            description: match l21 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l22 = *base
                                                            .add(5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l23 = *base
                                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len24 = l23;
                                                        let bytes24 = _rt::Vec::from_raw_parts(
                                                            l22.cast(),
                                                            len24,
                                                            len24,
                                                        );
                                                        _rt::string_lift(bytes24)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            mime_type: match l25 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l26 = *base
                                                            .add(8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l27 = *base
                                                            .add(9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len28 = l27;
                                                        let bytes28 = _rt::Vec::from_raw_parts(
                                                            l26.cast(),
                                                            len28,
                                                            len28,
                                                        );
                                                        _rt::string_lift(bytes28)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    result29.push(e29);
                                }
                                _rt::cabi_dealloc(
                                    base29,
                                    len29 * (10 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l30 = i32::from(
                                    *ptr10
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l34 = i32::from(
                                    *ptr10
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::resources::ListTemplatesResponse {
                                    templates: result29,
                                    next_cursor: match l30 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l31 = *ptr10
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l32 = *ptr10
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len33 = l32;
                                                let bytes33 = _rt::Vec::from_raw_parts(
                                                    l31.cast(),
                                                    len33,
                                                    len33,
                                                );
                                                _rt::string_lift(bytes33)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    meta: match l34 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l35 = *ptr10
                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l36 = *ptr10
                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base43 = l35;
                                                let len43 = l36;
                                                let mut result43 = _rt::Vec::with_capacity(len43);
                                                for i in 0..len43 {
                                                    let base = base43
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e43 = {
                                                        let l37 = *base.add(0).cast::<*mut u8>();
                                                        let l38 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len39 = l38;
                                                        let bytes39 = _rt::Vec::from_raw_parts(
                                                            l37.cast(),
                                                            len39,
                                                            len39,
                                                        );
                                                        let l40 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l41 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len42 = l41;
                                                        let bytes42 = _rt::Vec::from_raw_parts(
                                                            l40.cast(),
                                                            len42,
                                                            len42,
                                                        );
                                                        (_rt::string_lift(bytes39), _rt::string_lift(bytes42))
                                                    };
                                                    result43.push(e43);
                                                }
                                                _rt::cabi_dealloc(
                                                    base43,
                                                    len43 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result43
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l44 = i32::from(
                                    *ptr10.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V46;
                                let v46 = match l44 {
                                    0 => V46::ParseError,
                                    1 => V46::InvalidRequest,
                                    2 => V46::MethodNotFound,
                                    3 => V46::InvalidParams,
                                    4 => V46::InternalError,
                                    5 => V46::ResourceNotFound,
                                    6 => V46::ToolNotFound,
                                    7 => V46::PromptNotFound,
                                    8 => V46::Unauthorized,
                                    9 => V46::RateLimited,
                                    10 => V46::Timeout,
                                    11 => V46::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e46 = {
                                            let l45 = *ptr10
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l45
                                        };
                                        V46::CustomCode(e46)
                                    }
                                };
                                let l47 = *ptr10
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l48 = *ptr10
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len49 = l48;
                                let bytes49 = _rt::Vec::from_raw_parts(
                                    l47.cast(),
                                    len49,
                                    len49,
                                );
                                let l50 = i32::from(
                                    *ptr10
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v46,
                                    message: _rt::string_lift(bytes49),
                                    data: match l50 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l51 = *ptr10
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l52 = *ptr10
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len53 = l52;
                                                let bytes53 = _rt::Vec::from_raw_parts(
                                                    l51.cast(),
                                                    len53,
                                                    len53,
                                                );
                                                _rt::string_lift(bytes53)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result54
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Read a specific resource
            pub fn handle_read_resource(
                request: &ReadResourceRequest,
            ) -> Result<ReadResourceResponse, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::fastertools::mcp::resources::ReadResourceRequest {
                        uri: uri0,
                        progress_token: progress_token0,
                        meta: meta0,
                    } = request;
                    let vec1 = uri0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let (result3_0, result3_1, result3_2) = match progress_token0 {
                        Some(e) => {
                            let vec2 = e;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            (1i32, ptr2.cast_mut(), len2)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result8_0, result8_1, result8_2) = match meta0 {
                        Some(e) => {
                            let vec7 = e;
                            let len7 = vec7.len();
                            let layout7 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec7.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result7 = if layout7.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout7);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec7.into_iter().enumerate() {
                                let base = result7
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t4_0, t4_1) = e;
                                    let vec5 = t4_0;
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *base.add(0).cast::<*mut u8>() = ptr5.cast_mut();
                                    let vec6 = t4_1;
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result7, layout7)]);
                            (1i32, result7, len7)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr9 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "fastertools:mcp/resources-capabilities@0.1.10"
                    )]
                    unsafe extern "C" {
                        #[link_name = "handle-read-resource"]
                        fn wit_import10(
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import10(
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import10(
                            ptr1.cast_mut(),
                            len1,
                            result3_0,
                            result3_1,
                            result3_2,
                            result8_0,
                            result8_1,
                            result8_2,
                            ptr9,
                        )
                    };
                    let l11 = i32::from(*ptr9.add(0).cast::<u8>());
                    let result77 = match l11 {
                        0 => {
                            let e = {
                                let l12 = *ptr9
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l13 = *ptr9
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base56 = l12;
                                let len56 = l13;
                                let mut result56 = _rt::Vec::with_capacity(len56);
                                for i in 0..len56 {
                                    let base = base56
                                        .add(i * (11 * ::core::mem::size_of::<*const u8>()));
                                    let e56 = {
                                        let l14 = i32::from(*base.add(0).cast::<u8>());
                                        use super::super::super::fastertools::mcp::types::ResourceContents as V55;
                                        let v55 = match l14 {
                                            0 => {
                                                let e55 = {
                                                    let l15 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l16 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len17 = l16;
                                                    let bytes17 = _rt::Vec::from_raw_parts(
                                                        l15.cast(),
                                                        len17,
                                                        len17,
                                                    );
                                                    let l18 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l22 = *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l23 = *base
                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len24 = l23;
                                                    let bytes24 = _rt::Vec::from_raw_parts(
                                                        l22.cast(),
                                                        len24,
                                                        len24,
                                                    );
                                                    let l25 = i32::from(
                                                        *base
                                                            .add(8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::fastertools::mcp::types::TextResourceContents {
                                                        uri: _rt::string_lift(bytes17),
                                                        mime_type: match l18 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l19 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l20 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len21 = l20;
                                                                    let bytes21 = _rt::Vec::from_raw_parts(
                                                                        l19.cast(),
                                                                        len21,
                                                                        len21,
                                                                    );
                                                                    _rt::string_lift(bytes21)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        text: _rt::string_lift(bytes24),
                                                        meta: match l25 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l26 = *base
                                                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l27 = *base
                                                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base34 = l26;
                                                                    let len34 = l27;
                                                                    let mut result34 = _rt::Vec::with_capacity(len34);
                                                                    for i in 0..len34 {
                                                                        let base = base34
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e34 = {
                                                                            let l28 = *base.add(0).cast::<*mut u8>();
                                                                            let l29 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len30 = l29;
                                                                            let bytes30 = _rt::Vec::from_raw_parts(
                                                                                l28.cast(),
                                                                                len30,
                                                                                len30,
                                                                            );
                                                                            let l31 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l32 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len33 = l32;
                                                                            let bytes33 = _rt::Vec::from_raw_parts(
                                                                                l31.cast(),
                                                                                len33,
                                                                                len33,
                                                                            );
                                                                            (_rt::string_lift(bytes30), _rt::string_lift(bytes33))
                                                                        };
                                                                        result34.push(e34);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base34,
                                                                        len34 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result34
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V55::Text(e55)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                let e55 = {
                                                    let l35 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l36 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len37 = l36;
                                                    let bytes37 = _rt::Vec::from_raw_parts(
                                                        l35.cast(),
                                                        len37,
                                                        len37,
                                                    );
                                                    let l38 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l42 = *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l43 = *base
                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len44 = l43;
                                                    let l45 = i32::from(
                                                        *base
                                                            .add(8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::fastertools::mcp::types::BlobResourceContents {
                                                        uri: _rt::string_lift(bytes37),
                                                        mime_type: match l38 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l39 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l40 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len41 = l40;
                                                                    let bytes41 = _rt::Vec::from_raw_parts(
                                                                        l39.cast(),
                                                                        len41,
                                                                        len41,
                                                                    );
                                                                    _rt::string_lift(bytes41)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        blob: _rt::Vec::from_raw_parts(l42.cast(), len44, len44),
                                                        meta: match l45 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l46 = *base
                                                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l47 = *base
                                                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base54 = l46;
                                                                    let len54 = l47;
                                                                    let mut result54 = _rt::Vec::with_capacity(len54);
                                                                    for i in 0..len54 {
                                                                        let base = base54
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e54 = {
                                                                            let l48 = *base.add(0).cast::<*mut u8>();
                                                                            let l49 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len50 = l49;
                                                                            let bytes50 = _rt::Vec::from_raw_parts(
                                                                                l48.cast(),
                                                                                len50,
                                                                                len50,
                                                                            );
                                                                            let l51 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l52 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len53 = l52;
                                                                            let bytes53 = _rt::Vec::from_raw_parts(
                                                                                l51.cast(),
                                                                                len53,
                                                                                len53,
                                                                            );
                                                                            (_rt::string_lift(bytes50), _rt::string_lift(bytes53))
                                                                        };
                                                                        result54.push(e54);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base54,
                                                                        len54 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result54
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V55::Blob(e55)
                                            }
                                        };
                                        v55
                                    };
                                    result56.push(e56);
                                }
                                _rt::cabi_dealloc(
                                    base56,
                                    len56 * (11 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l57 = i32::from(
                                    *ptr9
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::resources::ReadResourceResponse {
                                    contents: result56,
                                    meta: match l57 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l58 = *ptr9
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l59 = *ptr9
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base66 = l58;
                                                let len66 = l59;
                                                let mut result66 = _rt::Vec::with_capacity(len66);
                                                for i in 0..len66 {
                                                    let base = base66
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e66 = {
                                                        let l60 = *base.add(0).cast::<*mut u8>();
                                                        let l61 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len62 = l61;
                                                        let bytes62 = _rt::Vec::from_raw_parts(
                                                            l60.cast(),
                                                            len62,
                                                            len62,
                                                        );
                                                        let l63 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l64 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len65 = l64;
                                                        let bytes65 = _rt::Vec::from_raw_parts(
                                                            l63.cast(),
                                                            len65,
                                                            len65,
                                                        );
                                                        (_rt::string_lift(bytes62), _rt::string_lift(bytes65))
                                                    };
                                                    result66.push(e66);
                                                }
                                                _rt::cabi_dealloc(
                                                    base66,
                                                    len66 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result66
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l67 = i32::from(
                                    *ptr9.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V69;
                                let v69 = match l67 {
                                    0 => V69::ParseError,
                                    1 => V69::InvalidRequest,
                                    2 => V69::MethodNotFound,
                                    3 => V69::InvalidParams,
                                    4 => V69::InternalError,
                                    5 => V69::ResourceNotFound,
                                    6 => V69::ToolNotFound,
                                    7 => V69::PromptNotFound,
                                    8 => V69::Unauthorized,
                                    9 => V69::RateLimited,
                                    10 => V69::Timeout,
                                    11 => V69::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e69 = {
                                            let l68 = *ptr9
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l68
                                        };
                                        V69::CustomCode(e69)
                                    }
                                };
                                let l70 = *ptr9
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l71 = *ptr9
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len72 = l71;
                                let bytes72 = _rt::Vec::from_raw_parts(
                                    l70.cast(),
                                    len72,
                                    len72,
                                );
                                let l73 = i32::from(
                                    *ptr9
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v69,
                                    message: _rt::string_lift(bytes72),
                                    data: match l73 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l74 = *ptr9
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l75 = *ptr9
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len76 = l75;
                                                let bytes76 = _rt::Vec::from_raw_parts(
                                                    l74.cast(),
                                                    len76,
                                                    len76,
                                                );
                                                _rt::string_lift(bytes76)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result77
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Subscribe to resource changes
            pub fn handle_subscribe_resource(
                request: &SubscribeRequest,
            ) -> Result<(), McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::fastertools::mcp::resources::SubscribeRequest {
                        uri: uri0,
                        meta: meta0,
                    } = request;
                    let vec1 = uri0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let (result6_0, result6_1, result6_2) = match meta0 {
                        Some(e) => {
                            let vec5 = e;
                            let len5 = vec5.len();
                            let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec5.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result5 = if layout5.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout5);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec5.into_iter().enumerate() {
                                let base = result5
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t2_0, t2_1) = e;
                                    let vec3 = t2_0;
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len3;
                                    *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                                    let vec4 = t2_1;
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr4.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result5, layout5)]);
                            (1i32, result5, len5)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr7 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "fastertools:mcp/resources-capabilities@0.1.10"
                    )]
                    unsafe extern "C" {
                        #[link_name = "handle-subscribe-resource"]
                        fn wit_import8(
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import8(
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import8(
                            ptr1.cast_mut(),
                            len1,
                            result6_0,
                            result6_1,
                            result6_2,
                            ptr7,
                        )
                    };
                    let l9 = i32::from(*ptr7.add(0).cast::<u8>());
                    let result20 = match l9 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l10 = i32::from(
                                    *ptr7.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V12;
                                let v12 = match l10 {
                                    0 => V12::ParseError,
                                    1 => V12::InvalidRequest,
                                    2 => V12::MethodNotFound,
                                    3 => V12::InvalidParams,
                                    4 => V12::InternalError,
                                    5 => V12::ResourceNotFound,
                                    6 => V12::ToolNotFound,
                                    7 => V12::PromptNotFound,
                                    8 => V12::Unauthorized,
                                    9 => V12::RateLimited,
                                    10 => V12::Timeout,
                                    11 => V12::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e12 = {
                                            let l11 = *ptr7
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l11
                                        };
                                        V12::CustomCode(e12)
                                    }
                                };
                                let l13 = *ptr7
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l14 = *ptr7
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len15 = l14;
                                let bytes15 = _rt::Vec::from_raw_parts(
                                    l13.cast(),
                                    len15,
                                    len15,
                                );
                                let l16 = i32::from(
                                    *ptr7
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v12,
                                    message: _rt::string_lift(bytes15),
                                    data: match l16 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l17 = *ptr7
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l18 = *ptr7
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );
                                                _rt::string_lift(bytes19)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result20
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Unsubscribe from resource changes
            pub fn handle_unsubscribe_resource(
                request: &UnsubscribeRequest,
            ) -> Result<(), McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::fastertools::mcp::resources::UnsubscribeRequest {
                        uri: uri0,
                        meta: meta0,
                    } = request;
                    let vec1 = uri0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let (result6_0, result6_1, result6_2) = match meta0 {
                        Some(e) => {
                            let vec5 = e;
                            let len5 = vec5.len();
                            let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec5.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result5 = if layout5.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout5);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec5.into_iter().enumerate() {
                                let base = result5
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t2_0, t2_1) = e;
                                    let vec3 = t2_0;
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len3;
                                    *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                                    let vec4 = t2_1;
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr4.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result5, layout5)]);
                            (1i32, result5, len5)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr7 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "fastertools:mcp/resources-capabilities@0.1.10"
                    )]
                    unsafe extern "C" {
                        #[link_name = "handle-unsubscribe-resource"]
                        fn wit_import8(
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import8(
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import8(
                            ptr1.cast_mut(),
                            len1,
                            result6_0,
                            result6_1,
                            result6_2,
                            ptr7,
                        )
                    };
                    let l9 = i32::from(*ptr7.add(0).cast::<u8>());
                    let result20 = match l9 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l10 = i32::from(
                                    *ptr7.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V12;
                                let v12 = match l10 {
                                    0 => V12::ParseError,
                                    1 => V12::InvalidRequest,
                                    2 => V12::MethodNotFound,
                                    3 => V12::InvalidParams,
                                    4 => V12::InternalError,
                                    5 => V12::ResourceNotFound,
                                    6 => V12::ToolNotFound,
                                    7 => V12::PromptNotFound,
                                    8 => V12::Unauthorized,
                                    9 => V12::RateLimited,
                                    10 => V12::Timeout,
                                    11 => V12::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e12 = {
                                            let l11 = *ptr7
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l11
                                        };
                                        V12::CustomCode(e12)
                                    }
                                };
                                let l13 = *ptr7
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l14 = *ptr7
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len15 = l14;
                                let bytes15 = _rt::Vec::from_raw_parts(
                                    l13.cast(),
                                    len15,
                                    len15,
                                );
                                let l16 = i32::from(
                                    *ptr7
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v12,
                                    message: _rt::string_lift(bytes15),
                                    data: match l16 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l17 = *ptr7
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l18 = *ptr7
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );
                                                _rt::string_lift(bytes19)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result20
                }
            }
        }
        /// Prompt capabilities - implement this to provide prompts
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod prompts_capabilities {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type McpError = super::super::super::fastertools::mcp::types::McpError;
            pub type ListPromptsRequest = super::super::super::fastertools::mcp::prompts::ListPromptsRequest;
            pub type ListPromptsResponse = super::super::super::fastertools::mcp::prompts::ListPromptsResponse;
            pub type GetPromptRequest = super::super::super::fastertools::mcp::prompts::GetPromptRequest;
            pub type GetPromptResponse = super::super::super::fastertools::mcp::prompts::GetPromptResponse;
            #[allow(unused_unsafe, clippy::all)]
            /// List available prompts
            pub fn handle_list_prompts(
                request: &ListPromptsRequest,
            ) -> Result<ListPromptsResponse, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 9 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 9
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::fastertools::mcp::prompts::ListPromptsRequest {
                        cursor: cursor0,
                        progress_token: progress_token0,
                        meta: meta0,
                    } = request;
                    let (result2_0, result2_1, result2_2) = match cursor0 {
                        Some(e) => {
                            let vec1 = e;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            (1i32, ptr1.cast_mut(), len1)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result4_0, result4_1, result4_2) = match progress_token0 {
                        Some(e) => {
                            let vec3 = e;
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            (1i32, ptr3.cast_mut(), len3)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result9_0, result9_1, result9_2) = match meta0 {
                        Some(e) => {
                            let vec8 = e;
                            let len8 = vec8.len();
                            let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec8.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result8 = if layout8.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout8);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec8.into_iter().enumerate() {
                                let base = result8
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t5_0, t5_1) = e;
                                    let vec6 = t5_0;
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                                    let vec7 = t5_1;
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr7.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result8, layout8)]);
                            (1i32, result8, len8)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr10 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "fastertools:mcp/prompts-capabilities@0.1.10"
                    )]
                    unsafe extern "C" {
                        #[link_name = "handle-list-prompts"]
                        fn wit_import11(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import11(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import11(
                            result2_0,
                            result2_1,
                            result2_2,
                            result4_0,
                            result4_1,
                            result4_2,
                            result9_0,
                            result9_1,
                            result9_2,
                            ptr10,
                        )
                    };
                    let l12 = i32::from(*ptr10.add(0).cast::<u8>());
                    let result78 = match l12 {
                        0 => {
                            let e = {
                                let l13 = *ptr10
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l14 = *ptr10
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base53 = l13;
                                let len53 = l14;
                                let mut result53 = _rt::Vec::with_capacity(len53);
                                for i in 0..len53 {
                                    let base = base53
                                        .add(i * (14 * ::core::mem::size_of::<*const u8>()));
                                    let e53 = {
                                        let l15 = *base.add(0).cast::<*mut u8>();
                                        let l16 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len17 = l16;
                                        let bytes17 = _rt::Vec::from_raw_parts(
                                            l15.cast(),
                                            len17,
                                            len17,
                                        );
                                        let l18 = i32::from(
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l22 = i32::from(
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l26 = i32::from(
                                            *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l43 = i32::from(
                                            *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        super::super::super::fastertools::mcp::prompts::Prompt {
                                            base: super::super::super::fastertools::mcp::types::BaseMetadata {
                                                name: _rt::string_lift(bytes17),
                                                title: match l18 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l19 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l20 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len21 = l20;
                                                            let bytes21 = _rt::Vec::from_raw_parts(
                                                                l19.cast(),
                                                                len21,
                                                                len21,
                                                            );
                                                            _rt::string_lift(bytes21)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            },
                                            description: match l22 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l23 = *base
                                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l24 = *base
                                                            .add(7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len25 = l24;
                                                        let bytes25 = _rt::Vec::from_raw_parts(
                                                            l23.cast(),
                                                            len25,
                                                            len25,
                                                        );
                                                        _rt::string_lift(bytes25)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            arguments: match l26 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l27 = *base
                                                            .add(9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l28 = *base
                                                            .add(10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base42 = l27;
                                                        let len42 = l28;
                                                        let mut result42 = _rt::Vec::with_capacity(len42);
                                                        for i in 0..len42 {
                                                            let base = base42
                                                                .add(i * (9 * ::core::mem::size_of::<*const u8>()));
                                                            let e42 = {
                                                                let l29 = *base.add(0).cast::<*mut u8>();
                                                                let l30 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len31 = l30;
                                                                let bytes31 = _rt::Vec::from_raw_parts(
                                                                    l29.cast(),
                                                                    len31,
                                                                    len31,
                                                                );
                                                                let l32 = i32::from(
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l36 = i32::from(
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l40 = i32::from(
                                                                    *base
                                                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::fastertools::mcp::prompts::PromptArgument {
                                                                    base: super::super::super::fastertools::mcp::types::BaseMetadata {
                                                                        name: _rt::string_lift(bytes31),
                                                                        title: match l32 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l33 = *base
                                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l34 = *base
                                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len35 = l34;
                                                                                    let bytes35 = _rt::Vec::from_raw_parts(
                                                                                        l33.cast(),
                                                                                        len35,
                                                                                        len35,
                                                                                    );
                                                                                    _rt::string_lift(bytes35)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    },
                                                                    description: match l36 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l37 = *base
                                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l38 = *base
                                                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len39 = l38;
                                                                                let bytes39 = _rt::Vec::from_raw_parts(
                                                                                    l37.cast(),
                                                                                    len39,
                                                                                    len39,
                                                                                );
                                                                                _rt::string_lift(bytes39)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    required: match l40 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l41 = i32::from(
                                                                                    *base
                                                                                        .add(1 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>(),
                                                                                );
                                                                                _rt::bool_lift(l41 as u8)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            result42.push(e42);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base42,
                                                            len42 * (9 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        result42
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            meta: match l43 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l44 = *base
                                                            .add(12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l45 = *base
                                                            .add(13 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base52 = l44;
                                                        let len52 = l45;
                                                        let mut result52 = _rt::Vec::with_capacity(len52);
                                                        for i in 0..len52 {
                                                            let base = base52
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e52 = {
                                                                let l46 = *base.add(0).cast::<*mut u8>();
                                                                let l47 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len48 = l47;
                                                                let bytes48 = _rt::Vec::from_raw_parts(
                                                                    l46.cast(),
                                                                    len48,
                                                                    len48,
                                                                );
                                                                let l49 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l50 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len51 = l50;
                                                                let bytes51 = _rt::Vec::from_raw_parts(
                                                                    l49.cast(),
                                                                    len51,
                                                                    len51,
                                                                );
                                                                (_rt::string_lift(bytes48), _rt::string_lift(bytes51))
                                                            };
                                                            result52.push(e52);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base52,
                                                            len52 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        result52
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    result53.push(e53);
                                }
                                _rt::cabi_dealloc(
                                    base53,
                                    len53 * (14 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l54 = i32::from(
                                    *ptr10
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l58 = i32::from(
                                    *ptr10
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::prompts::ListPromptsResponse {
                                    prompts: result53,
                                    next_cursor: match l54 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l55 = *ptr10
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l56 = *ptr10
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len57 = l56;
                                                let bytes57 = _rt::Vec::from_raw_parts(
                                                    l55.cast(),
                                                    len57,
                                                    len57,
                                                );
                                                _rt::string_lift(bytes57)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    meta: match l58 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l59 = *ptr10
                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l60 = *ptr10
                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base67 = l59;
                                                let len67 = l60;
                                                let mut result67 = _rt::Vec::with_capacity(len67);
                                                for i in 0..len67 {
                                                    let base = base67
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e67 = {
                                                        let l61 = *base.add(0).cast::<*mut u8>();
                                                        let l62 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len63 = l62;
                                                        let bytes63 = _rt::Vec::from_raw_parts(
                                                            l61.cast(),
                                                            len63,
                                                            len63,
                                                        );
                                                        let l64 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l65 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len66 = l65;
                                                        let bytes66 = _rt::Vec::from_raw_parts(
                                                            l64.cast(),
                                                            len66,
                                                            len66,
                                                        );
                                                        (_rt::string_lift(bytes63), _rt::string_lift(bytes66))
                                                    };
                                                    result67.push(e67);
                                                }
                                                _rt::cabi_dealloc(
                                                    base67,
                                                    len67 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result67
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l68 = i32::from(
                                    *ptr10.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V70;
                                let v70 = match l68 {
                                    0 => V70::ParseError,
                                    1 => V70::InvalidRequest,
                                    2 => V70::MethodNotFound,
                                    3 => V70::InvalidParams,
                                    4 => V70::InternalError,
                                    5 => V70::ResourceNotFound,
                                    6 => V70::ToolNotFound,
                                    7 => V70::PromptNotFound,
                                    8 => V70::Unauthorized,
                                    9 => V70::RateLimited,
                                    10 => V70::Timeout,
                                    11 => V70::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e70 = {
                                            let l69 = *ptr10
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l69
                                        };
                                        V70::CustomCode(e70)
                                    }
                                };
                                let l71 = *ptr10
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l72 = *ptr10
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len73 = l72;
                                let bytes73 = _rt::Vec::from_raw_parts(
                                    l71.cast(),
                                    len73,
                                    len73,
                                );
                                let l74 = i32::from(
                                    *ptr10
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v70,
                                    message: _rt::string_lift(bytes73),
                                    data: match l74 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l75 = *ptr10
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l76 = *ptr10
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len77 = l76;
                                                let bytes77 = _rt::Vec::from_raw_parts(
                                                    l75.cast(),
                                                    len77,
                                                    len77,
                                                );
                                                _rt::string_lift(bytes77)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result78
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get a specific prompt
            pub fn handle_get_prompt(
                request: &GetPromptRequest,
            ) -> Result<GetPromptResponse, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 9 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 9
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::fastertools::mcp::prompts::GetPromptRequest {
                        name: name0,
                        arguments: arguments0,
                        progress_token: progress_token0,
                        meta: meta0,
                    } = request;
                    let vec1 = name0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let (result6_0, result6_1, result6_2) = match arguments0 {
                        Some(e) => {
                            let vec5 = e;
                            let len5 = vec5.len();
                            let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec5.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result5 = if layout5.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout5);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec5.into_iter().enumerate() {
                                let base = result5
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t2_0, t2_1) = e;
                                    let vec3 = t2_0;
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len3;
                                    *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                                    let vec4 = t2_1;
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr4.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result5, layout5)]);
                            (1i32, result5, len5)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result8_0, result8_1, result8_2) = match progress_token0 {
                        Some(e) => {
                            let vec7 = e;
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            (1i32, ptr7.cast_mut(), len7)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result13_0, result13_1, result13_2) = match meta0 {
                        Some(e) => {
                            let vec12 = e;
                            let len12 = vec12.len();
                            let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec12.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result12 = if layout12.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout12);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec12.into_iter().enumerate() {
                                let base = result12
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t9_0, t9_1) = e;
                                    let vec10 = t9_0;
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *base.add(0).cast::<*mut u8>() = ptr10.cast_mut();
                                    let vec11 = t9_1;
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len11;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr11.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result12, layout12)]);
                            (1i32, result12, len12)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr14 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "fastertools:mcp/prompts-capabilities@0.1.10"
                    )]
                    unsafe extern "C" {
                        #[link_name = "handle-get-prompt"]
                        fn wit_import15(
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import15(
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import15(
                            ptr1.cast_mut(),
                            len1,
                            result6_0,
                            result6_1,
                            result6_2,
                            result8_0,
                            result8_1,
                            result8_2,
                            result13_0,
                            result13_1,
                            result13_2,
                            ptr14,
                        )
                    };
                    let l16 = i32::from(*ptr14.add(0).cast::<u8>());
                    let result234 = match l16 {
                        0 => {
                            let e = {
                                let l17 = i32::from(
                                    *ptr14.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                let l21 = *ptr14
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l22 = *ptr14
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base213 = l21;
                                let len213 = l22;
                                let mut result213 = _rt::Vec::with_capacity(len213);
                                for i in 0..len213 {
                                    let base = base213
                                        .add(i * (88 + 18 * ::core::mem::size_of::<*const u8>()));
                                    let e213 = {
                                        let l23 = i32::from(*base.add(0).cast::<u8>());
                                        let l24 = i32::from(*base.add(8).cast::<u8>());
                                        use super::super::super::fastertools::mcp::types::ContentBlock as V212;
                                        let v212 = match l24 {
                                            0 => {
                                                let e212 = {
                                                    let l25 = *base.add(16).cast::<*mut u8>();
                                                    let l26 = *base
                                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len27 = l26;
                                                    let bytes27 = _rt::Vec::from_raw_parts(
                                                        l25.cast(),
                                                        len27,
                                                        len27,
                                                    );
                                                    let l28 = i32::from(
                                                        *base
                                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l40 = i32::from(
                                                        *base
                                                            .add(56 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::fastertools::mcp::types::TextContent {
                                                        text: _rt::string_lift(bytes27),
                                                        annotations: match l28 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l29 = i32::from(
                                                                        *base
                                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l34 = i32::from(
                                                                        *base
                                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l36 = i32::from(
                                                                        *base
                                                                            .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::fastertools::mcp::types::Annotations {
                                                                        audience: match l29 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l30 = *base
                                                                                        .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l31 = *base
                                                                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base33 = l30;
                                                                                    let len33 = l31;
                                                                                    let mut result33 = _rt::Vec::with_capacity(len33);
                                                                                    for i in 0..len33 {
                                                                                        let base = base33.add(i * 1);
                                                                                        let e33 = {
                                                                                            let l32 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                                l32 as u8,
                                                                                            )
                                                                                        };
                                                                                        result33.push(e33);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base33, len33 * 1, 1);
                                                                                    result33
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l34 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l35 = *base
                                                                                        .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l35
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l36 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l37 = *base
                                                                                        .add(48 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l38 = *base
                                                                                        .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len39 = l38;
                                                                                    let bytes39 = _rt::Vec::from_raw_parts(
                                                                                        l37.cast(),
                                                                                        len39,
                                                                                        len39,
                                                                                    );
                                                                                    _rt::string_lift(bytes39)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l40 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l41 = *base
                                                                        .add(56 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l42 = *base
                                                                        .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base49 = l41;
                                                                    let len49 = l42;
                                                                    let mut result49 = _rt::Vec::with_capacity(len49);
                                                                    for i in 0..len49 {
                                                                        let base = base49
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e49 = {
                                                                            let l43 = *base.add(0).cast::<*mut u8>();
                                                                            let l44 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len45 = l44;
                                                                            let bytes45 = _rt::Vec::from_raw_parts(
                                                                                l43.cast(),
                                                                                len45,
                                                                                len45,
                                                                            );
                                                                            let l46 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l47 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len48 = l47;
                                                                            let bytes48 = _rt::Vec::from_raw_parts(
                                                                                l46.cast(),
                                                                                len48,
                                                                                len48,
                                                                            );
                                                                            (_rt::string_lift(bytes45), _rt::string_lift(bytes48))
                                                                        };
                                                                        result49.push(e49);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base49,
                                                                        len49 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result49
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V212::Text(e212)
                                            }
                                            1 => {
                                                let e212 = {
                                                    let l50 = *base.add(16).cast::<*mut u8>();
                                                    let l51 = *base
                                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len52 = l51;
                                                    let l53 = *base
                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l54 = *base
                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len55 = l54;
                                                    let bytes55 = _rt::Vec::from_raw_parts(
                                                        l53.cast(),
                                                        len55,
                                                        len55,
                                                    );
                                                    let l56 = i32::from(
                                                        *base
                                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l68 = i32::from(
                                                        *base
                                                            .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::fastertools::mcp::types::ImageContent {
                                                        data: _rt::Vec::from_raw_parts(l50.cast(), len52, len52),
                                                        mime_type: _rt::string_lift(bytes55),
                                                        annotations: match l56 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l57 = i32::from(
                                                                        *base
                                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l62 = i32::from(
                                                                        *base
                                                                            .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l64 = i32::from(
                                                                        *base
                                                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::fastertools::mcp::types::Annotations {
                                                                        audience: match l57 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l58 = *base
                                                                                        .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l59 = *base
                                                                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base61 = l58;
                                                                                    let len61 = l59;
                                                                                    let mut result61 = _rt::Vec::with_capacity(len61);
                                                                                    for i in 0..len61 {
                                                                                        let base = base61.add(i * 1);
                                                                                        let e61 = {
                                                                                            let l60 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                                l60 as u8,
                                                                                            )
                                                                                        };
                                                                                        result61.push(e61);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base61, len61 * 1, 1);
                                                                                    result61
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l62 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l63 = *base
                                                                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l63
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l64 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l65 = *base
                                                                                        .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l66 = *base
                                                                                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len67 = l66;
                                                                                    let bytes67 = _rt::Vec::from_raw_parts(
                                                                                        l65.cast(),
                                                                                        len67,
                                                                                        len67,
                                                                                    );
                                                                                    _rt::string_lift(bytes67)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l68 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l69 = *base
                                                                        .add(56 + 9 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l70 = *base
                                                                        .add(56 + 10 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base77 = l69;
                                                                    let len77 = l70;
                                                                    let mut result77 = _rt::Vec::with_capacity(len77);
                                                                    for i in 0..len77 {
                                                                        let base = base77
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e77 = {
                                                                            let l71 = *base.add(0).cast::<*mut u8>();
                                                                            let l72 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len73 = l72;
                                                                            let bytes73 = _rt::Vec::from_raw_parts(
                                                                                l71.cast(),
                                                                                len73,
                                                                                len73,
                                                                            );
                                                                            let l74 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l75 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len76 = l75;
                                                                            let bytes76 = _rt::Vec::from_raw_parts(
                                                                                l74.cast(),
                                                                                len76,
                                                                                len76,
                                                                            );
                                                                            (_rt::string_lift(bytes73), _rt::string_lift(bytes76))
                                                                        };
                                                                        result77.push(e77);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base77,
                                                                        len77 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result77
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V212::Image(e212)
                                            }
                                            2 => {
                                                let e212 = {
                                                    let l78 = *base.add(16).cast::<*mut u8>();
                                                    let l79 = *base
                                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len80 = l79;
                                                    let l81 = *base
                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l82 = *base
                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len83 = l82;
                                                    let bytes83 = _rt::Vec::from_raw_parts(
                                                        l81.cast(),
                                                        len83,
                                                        len83,
                                                    );
                                                    let l84 = i32::from(
                                                        *base
                                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l96 = i32::from(
                                                        *base
                                                            .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::fastertools::mcp::types::AudioContent {
                                                        data: _rt::Vec::from_raw_parts(l78.cast(), len80, len80),
                                                        mime_type: _rt::string_lift(bytes83),
                                                        annotations: match l84 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l85 = i32::from(
                                                                        *base
                                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l90 = i32::from(
                                                                        *base
                                                                            .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l92 = i32::from(
                                                                        *base
                                                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::fastertools::mcp::types::Annotations {
                                                                        audience: match l85 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l86 = *base
                                                                                        .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l87 = *base
                                                                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base89 = l86;
                                                                                    let len89 = l87;
                                                                                    let mut result89 = _rt::Vec::with_capacity(len89);
                                                                                    for i in 0..len89 {
                                                                                        let base = base89.add(i * 1);
                                                                                        let e89 = {
                                                                                            let l88 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                                l88 as u8,
                                                                                            )
                                                                                        };
                                                                                        result89.push(e89);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base89, len89 * 1, 1);
                                                                                    result89
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l90 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l91 = *base
                                                                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l91
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l92 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l93 = *base
                                                                                        .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l94 = *base
                                                                                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len95 = l94;
                                                                                    let bytes95 = _rt::Vec::from_raw_parts(
                                                                                        l93.cast(),
                                                                                        len95,
                                                                                        len95,
                                                                                    );
                                                                                    _rt::string_lift(bytes95)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l96 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l97 = *base
                                                                        .add(56 + 9 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l98 = *base
                                                                        .add(56 + 10 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base105 = l97;
                                                                    let len105 = l98;
                                                                    let mut result105 = _rt::Vec::with_capacity(len105);
                                                                    for i in 0..len105 {
                                                                        let base = base105
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e105 = {
                                                                            let l99 = *base.add(0).cast::<*mut u8>();
                                                                            let l100 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len101 = l100;
                                                                            let bytes101 = _rt::Vec::from_raw_parts(
                                                                                l99.cast(),
                                                                                len101,
                                                                                len101,
                                                                            );
                                                                            let l102 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l103 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len104 = l103;
                                                                            let bytes104 = _rt::Vec::from_raw_parts(
                                                                                l102.cast(),
                                                                                len104,
                                                                                len104,
                                                                            );
                                                                            (_rt::string_lift(bytes101), _rt::string_lift(bytes104))
                                                                        };
                                                                        result105.push(e105);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base105,
                                                                        len105 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result105
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V212::Audio(e212)
                                            }
                                            3 => {
                                                let e212 = {
                                                    let l106 = *base.add(16).cast::<*mut u8>();
                                                    let l107 = *base
                                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len108 = l107;
                                                    let bytes108 = _rt::Vec::from_raw_parts(
                                                        l106.cast(),
                                                        len108,
                                                        len108,
                                                    );
                                                    let l109 = *base
                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l110 = *base
                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len111 = l110;
                                                    let bytes111 = _rt::Vec::from_raw_parts(
                                                        l109.cast(),
                                                        len111,
                                                        len111,
                                                    );
                                                    let l112 = i32::from(
                                                        *base
                                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l116 = i32::from(
                                                        *base
                                                            .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l120 = i32::from(
                                                        *base
                                                            .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l124 = i32::from(
                                                        *base
                                                            .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l126 = i32::from(
                                                        *base
                                                            .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l138 = i32::from(
                                                        *base
                                                            .add(80 + 16 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::fastertools::mcp::types::ResourceLink {
                                                        uri: _rt::string_lift(bytes108),
                                                        name: _rt::string_lift(bytes111),
                                                        title: match l112 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l113 = *base
                                                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l114 = *base
                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len115 = l114;
                                                                    let bytes115 = _rt::Vec::from_raw_parts(
                                                                        l113.cast(),
                                                                        len115,
                                                                        len115,
                                                                    );
                                                                    _rt::string_lift(bytes115)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        description: match l116 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l117 = *base
                                                                        .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l118 = *base
                                                                        .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len119 = l118;
                                                                    let bytes119 = _rt::Vec::from_raw_parts(
                                                                        l117.cast(),
                                                                        len119,
                                                                        len119,
                                                                    );
                                                                    _rt::string_lift(bytes119)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        mime_type: match l120 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l121 = *base
                                                                        .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l122 = *base
                                                                        .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len123 = l122;
                                                                    let bytes123 = _rt::Vec::from_raw_parts(
                                                                        l121.cast(),
                                                                        len123,
                                                                        len123,
                                                                    );
                                                                    _rt::string_lift(bytes123)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        size: match l124 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l125 = *base
                                                                        .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>();
                                                                    l125 as u64
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        annotations: match l126 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l127 = i32::from(
                                                                        *base
                                                                            .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l132 = i32::from(
                                                                        *base
                                                                            .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l134 = i32::from(
                                                                        *base
                                                                            .add(72 + 14 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::fastertools::mcp::types::Annotations {
                                                                        audience: match l127 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l128 = *base
                                                                                        .add(48 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l129 = *base
                                                                                        .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base131 = l128;
                                                                                    let len131 = l129;
                                                                                    let mut result131 = _rt::Vec::with_capacity(len131);
                                                                                    for i in 0..len131 {
                                                                                        let base = base131.add(i * 1);
                                                                                        let e131 = {
                                                                                            let l130 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                                l130 as u8,
                                                                                            )
                                                                                        };
                                                                                        result131.push(e131);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base131, len131 * 1, 1);
                                                                                    result131
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l132 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l133 = *base
                                                                                        .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l133
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l134 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l135 = *base
                                                                                        .add(72 + 15 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l136 = *base
                                                                                        .add(72 + 16 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len137 = l136;
                                                                                    let bytes137 = _rt::Vec::from_raw_parts(
                                                                                        l135.cast(),
                                                                                        len137,
                                                                                        len137,
                                                                                    );
                                                                                    _rt::string_lift(bytes137)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l138 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l139 = *base
                                                                        .add(80 + 17 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l140 = *base
                                                                        .add(80 + 18 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base147 = l139;
                                                                    let len147 = l140;
                                                                    let mut result147 = _rt::Vec::with_capacity(len147);
                                                                    for i in 0..len147 {
                                                                        let base = base147
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e147 = {
                                                                            let l141 = *base.add(0).cast::<*mut u8>();
                                                                            let l142 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len143 = l142;
                                                                            let bytes143 = _rt::Vec::from_raw_parts(
                                                                                l141.cast(),
                                                                                len143,
                                                                                len143,
                                                                            );
                                                                            let l144 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l145 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len146 = l145;
                                                                            let bytes146 = _rt::Vec::from_raw_parts(
                                                                                l144.cast(),
                                                                                len146,
                                                                                len146,
                                                                            );
                                                                            (_rt::string_lift(bytes143), _rt::string_lift(bytes146))
                                                                        };
                                                                        result147.push(e147);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base147,
                                                                        len147 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result147
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V212::ResourceLink(e212)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 4, "invalid enum discriminant");
                                                let e212 = {
                                                    let l148 = i32::from(*base.add(16).cast::<u8>());
                                                    use super::super::super::fastertools::mcp::types::ResourceContents as V189;
                                                    let v189 = match l148 {
                                                        0 => {
                                                            let e189 = {
                                                                let l149 = *base
                                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l150 = *base
                                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len151 = l150;
                                                                let bytes151 = _rt::Vec::from_raw_parts(
                                                                    l149.cast(),
                                                                    len151,
                                                                    len151,
                                                                );
                                                                let l152 = i32::from(
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l156 = *base
                                                                    .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l157 = *base
                                                                    .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len158 = l157;
                                                                let bytes158 = _rt::Vec::from_raw_parts(
                                                                    l156.cast(),
                                                                    len158,
                                                                    len158,
                                                                );
                                                                let l159 = i32::from(
                                                                    *base
                                                                        .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::fastertools::mcp::types::TextResourceContents {
                                                                    uri: _rt::string_lift(bytes151),
                                                                    mime_type: match l152 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l153 = *base
                                                                                    .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l154 = *base
                                                                                    .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len155 = l154;
                                                                                let bytes155 = _rt::Vec::from_raw_parts(
                                                                                    l153.cast(),
                                                                                    len155,
                                                                                    len155,
                                                                                );
                                                                                _rt::string_lift(bytes155)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    text: _rt::string_lift(bytes158),
                                                                    meta: match l159 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l160 = *base
                                                                                    .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l161 = *base
                                                                                    .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let base168 = l160;
                                                                                let len168 = l161;
                                                                                let mut result168 = _rt::Vec::with_capacity(len168);
                                                                                for i in 0..len168 {
                                                                                    let base = base168
                                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                                    let e168 = {
                                                                                        let l162 = *base.add(0).cast::<*mut u8>();
                                                                                        let l163 = *base
                                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len164 = l163;
                                                                                        let bytes164 = _rt::Vec::from_raw_parts(
                                                                                            l162.cast(),
                                                                                            len164,
                                                                                            len164,
                                                                                        );
                                                                                        let l165 = *base
                                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<*mut u8>();
                                                                                        let l166 = *base
                                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len167 = l166;
                                                                                        let bytes167 = _rt::Vec::from_raw_parts(
                                                                                            l165.cast(),
                                                                                            len167,
                                                                                            len167,
                                                                                        );
                                                                                        (_rt::string_lift(bytes164), _rt::string_lift(bytes167))
                                                                                    };
                                                                                    result168.push(e168);
                                                                                }
                                                                                _rt::cabi_dealloc(
                                                                                    base168,
                                                                                    len168 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                                    ::core::mem::size_of::<*const u8>(),
                                                                                );
                                                                                result168
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V189::Text(e189)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e189 = {
                                                                let l169 = *base
                                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l170 = *base
                                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len171 = l170;
                                                                let bytes171 = _rt::Vec::from_raw_parts(
                                                                    l169.cast(),
                                                                    len171,
                                                                    len171,
                                                                );
                                                                let l172 = i32::from(
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l176 = *base
                                                                    .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l177 = *base
                                                                    .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len178 = l177;
                                                                let l179 = i32::from(
                                                                    *base
                                                                        .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::fastertools::mcp::types::BlobResourceContents {
                                                                    uri: _rt::string_lift(bytes171),
                                                                    mime_type: match l172 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l173 = *base
                                                                                    .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l174 = *base
                                                                                    .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len175 = l174;
                                                                                let bytes175 = _rt::Vec::from_raw_parts(
                                                                                    l173.cast(),
                                                                                    len175,
                                                                                    len175,
                                                                                );
                                                                                _rt::string_lift(bytes175)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    blob: _rt::Vec::from_raw_parts(l176.cast(), len178, len178),
                                                                    meta: match l179 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l180 = *base
                                                                                    .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l181 = *base
                                                                                    .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let base188 = l180;
                                                                                let len188 = l181;
                                                                                let mut result188 = _rt::Vec::with_capacity(len188);
                                                                                for i in 0..len188 {
                                                                                    let base = base188
                                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                                    let e188 = {
                                                                                        let l182 = *base.add(0).cast::<*mut u8>();
                                                                                        let l183 = *base
                                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len184 = l183;
                                                                                        let bytes184 = _rt::Vec::from_raw_parts(
                                                                                            l182.cast(),
                                                                                            len184,
                                                                                            len184,
                                                                                        );
                                                                                        let l185 = *base
                                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<*mut u8>();
                                                                                        let l186 = *base
                                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len187 = l186;
                                                                                        let bytes187 = _rt::Vec::from_raw_parts(
                                                                                            l185.cast(),
                                                                                            len187,
                                                                                            len187,
                                                                                        );
                                                                                        (_rt::string_lift(bytes184), _rt::string_lift(bytes187))
                                                                                    };
                                                                                    result188.push(e188);
                                                                                }
                                                                                _rt::cabi_dealloc(
                                                                                    base188,
                                                                                    len188 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                                    ::core::mem::size_of::<*const u8>(),
                                                                                );
                                                                                result188
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V189::Blob(e189)
                                                        }
                                                    };
                                                    let l190 = i32::from(
                                                        *base
                                                            .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l202 = i32::from(
                                                        *base
                                                            .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::fastertools::mcp::types::EmbeddedResource {
                                                        contents: v189,
                                                        annotations: match l190 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l191 = i32::from(
                                                                        *base
                                                                            .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l196 = i32::from(
                                                                        *base
                                                                            .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l198 = i32::from(
                                                                        *base
                                                                            .add(56 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::fastertools::mcp::types::Annotations {
                                                                        audience: match l191 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l192 = *base
                                                                                        .add(32 + 11 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l193 = *base
                                                                                        .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base195 = l192;
                                                                                    let len195 = l193;
                                                                                    let mut result195 = _rt::Vec::with_capacity(len195);
                                                                                    for i in 0..len195 {
                                                                                        let base = base195.add(i * 1);
                                                                                        let e195 = {
                                                                                            let l194 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                                l194 as u8,
                                                                                            )
                                                                                        };
                                                                                        result195.push(e195);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base195, len195 * 1, 1);
                                                                                    result195
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l196 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l197 = *base
                                                                                        .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l197
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l198 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l199 = *base
                                                                                        .add(56 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l200 = *base
                                                                                        .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len201 = l200;
                                                                                    let bytes201 = _rt::Vec::from_raw_parts(
                                                                                        l199.cast(),
                                                                                        len201,
                                                                                        len201,
                                                                                    );
                                                                                    _rt::string_lift(bytes201)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l202 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l203 = *base
                                                                        .add(64 + 15 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l204 = *base
                                                                        .add(64 + 16 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base211 = l203;
                                                                    let len211 = l204;
                                                                    let mut result211 = _rt::Vec::with_capacity(len211);
                                                                    for i in 0..len211 {
                                                                        let base = base211
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e211 = {
                                                                            let l205 = *base.add(0).cast::<*mut u8>();
                                                                            let l206 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len207 = l206;
                                                                            let bytes207 = _rt::Vec::from_raw_parts(
                                                                                l205.cast(),
                                                                                len207,
                                                                                len207,
                                                                            );
                                                                            let l208 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l209 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len210 = l209;
                                                                            let bytes210 = _rt::Vec::from_raw_parts(
                                                                                l208.cast(),
                                                                                len210,
                                                                                len210,
                                                                            );
                                                                            (_rt::string_lift(bytes207), _rt::string_lift(bytes210))
                                                                        };
                                                                        result211.push(e211);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base211,
                                                                        len211 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result211
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V212::EmbeddedResource(e212)
                                            }
                                        };
                                        super::super::super::fastertools::mcp::prompts::PromptMessage {
                                            role: super::super::super::fastertools::mcp::types::MessageRole::_lift(
                                                l23 as u8,
                                            ),
                                            content: v212,
                                        }
                                    };
                                    result213.push(e213);
                                }
                                _rt::cabi_dealloc(
                                    base213,
                                    len213 * (88 + 18 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let l214 = i32::from(
                                    *ptr14
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::prompts::GetPromptResponse {
                                    description: match l17 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l18 = *ptr14
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l19 = *ptr14
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len20 = l19;
                                                let bytes20 = _rt::Vec::from_raw_parts(
                                                    l18.cast(),
                                                    len20,
                                                    len20,
                                                );
                                                _rt::string_lift(bytes20)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    messages: result213,
                                    meta: match l214 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l215 = *ptr14
                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l216 = *ptr14
                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base223 = l215;
                                                let len223 = l216;
                                                let mut result223 = _rt::Vec::with_capacity(len223);
                                                for i in 0..len223 {
                                                    let base = base223
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e223 = {
                                                        let l217 = *base.add(0).cast::<*mut u8>();
                                                        let l218 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len219 = l218;
                                                        let bytes219 = _rt::Vec::from_raw_parts(
                                                            l217.cast(),
                                                            len219,
                                                            len219,
                                                        );
                                                        let l220 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l221 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len222 = l221;
                                                        let bytes222 = _rt::Vec::from_raw_parts(
                                                            l220.cast(),
                                                            len222,
                                                            len222,
                                                        );
                                                        (_rt::string_lift(bytes219), _rt::string_lift(bytes222))
                                                    };
                                                    result223.push(e223);
                                                }
                                                _rt::cabi_dealloc(
                                                    base223,
                                                    len223 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result223
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l224 = i32::from(
                                    *ptr14.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V226;
                                let v226 = match l224 {
                                    0 => V226::ParseError,
                                    1 => V226::InvalidRequest,
                                    2 => V226::MethodNotFound,
                                    3 => V226::InvalidParams,
                                    4 => V226::InternalError,
                                    5 => V226::ResourceNotFound,
                                    6 => V226::ToolNotFound,
                                    7 => V226::PromptNotFound,
                                    8 => V226::Unauthorized,
                                    9 => V226::RateLimited,
                                    10 => V226::Timeout,
                                    11 => V226::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e226 = {
                                            let l225 = *ptr14
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l225
                                        };
                                        V226::CustomCode(e226)
                                    }
                                };
                                let l227 = *ptr14
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l228 = *ptr14
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len229 = l228;
                                let bytes229 = _rt::Vec::from_raw_parts(
                                    l227.cast(),
                                    len229,
                                    len229,
                                );
                                let l230 = i32::from(
                                    *ptr14
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v226,
                                    message: _rt::string_lift(bytes229),
                                    data: match l230 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l231 = *ptr14
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l232 = *ptr14
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len233 = l232;
                                                let bytes233 = _rt::Vec::from_raw_parts(
                                                    l231.cast(),
                                                    len233,
                                                    len233,
                                                );
                                                _rt::string_lift(bytes233)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result234
                }
            }
        }
        /// Sampling capabilities - implement this to handle LLM requests
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod sampling_capabilities {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type McpError = super::super::super::fastertools::mcp::types::McpError;
            pub type CreateMessageRequest = super::super::super::fastertools::mcp::sampling::CreateMessageRequest;
            pub type CreateMessageResult = super::super::super::fastertools::mcp::sampling::CreateMessageResult;
            #[allow(unused_unsafe, clippy::all)]
            /// Handle request for LLM sampling
            pub fn handle_create_message(
                request: &CreateMessageRequest,
            ) -> Result<CreateMessageResult, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 96 + 26 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 96
                            + 26 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::fastertools::mcp::sampling::CreateMessageRequest {
                        messages: messages1,
                        model_preferences: model_preferences1,
                        system_prompt: system_prompt1,
                        include_context: include_context1,
                        temperature: temperature1,
                        max_tokens: max_tokens1,
                        stop_sequences: stop_sequences1,
                        metadata: metadata1,
                    } = request;
                    let vec71 = messages1;
                    let len71 = vec71.len();
                    let layout71 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec71.len() * (88 + 18 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result71 = if layout71.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout71).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout71);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec71.into_iter().enumerate() {
                        let base = result71
                            .add(i * (88 + 18 * ::core::mem::size_of::<*const u8>()));
                        {
                            let super::super::super::fastertools::mcp::sampling::SamplingMessage {
                                role: role2,
                                content: content2,
                            } = e;
                            *base.add(0).cast::<u8>() = (role2.clone() as i32) as u8;
                            use super::super::super::fastertools::mcp::types::ContentBlock as V70;
                            match content2 {
                                V70::Text(e) => {
                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                    let super::super::super::fastertools::mcp::types::TextContent {
                                        text: text3,
                                        annotations: annotations3,
                                        meta: meta3,
                                    } = e;
                                    let vec4 = text3;
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    *base
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *base.add(16).cast::<*mut u8>() = ptr4.cast_mut();
                                    match annotations3 {
                                        Some(e) => {
                                            *base
                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::fastertools::mcp::types::Annotations {
                                                audience: audience5,
                                                priority: priority5,
                                                last_modified: last_modified5,
                                            } = e;
                                            match audience5 {
                                                Some(e) => {
                                                    *base
                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec6 = e;
                                                    let len6 = vec6.len();
                                                    let layout6 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec6.len() * 1,
                                                        1,
                                                    );
                                                    let result6 = if layout6.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout6);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec6.into_iter().enumerate() {
                                                        let base = result6.add(i * 1);
                                                        {
                                                            *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                        }
                                                    }
                                                    *base
                                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len6;
                                                    *base
                                                        .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result6;
                                                    cleanup_list.extend_from_slice(&[(result6, layout6)]);
                                                }
                                                None => {
                                                    *base
                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match priority5 {
                                                Some(e) => {
                                                    *base
                                                        .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(e);
                                                }
                                                None => {
                                                    *base
                                                        .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match last_modified5 {
                                                Some(e) => {
                                                    *base
                                                        .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec7 = e;
                                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                                    let len7 = vec7.len();
                                                    *base
                                                        .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len7;
                                                    *base
                                                        .add(48 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr7.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        None => {
                                            *base
                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match meta3 {
                                        Some(e) => {
                                            *base
                                                .add(56 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec11 = e;
                                            let len11 = vec11.len();
                                            let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec11.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result11 = if layout11.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout11);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec11.into_iter().enumerate() {
                                                let base = result11
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t8_0, t8_1) = e;
                                                    let vec9 = t8_0;
                                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                                    let len9 = vec9.len();
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len9;
                                                    *base.add(0).cast::<*mut u8>() = ptr9.cast_mut();
                                                    let vec10 = t8_1;
                                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                                    let len10 = vec10.len();
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len10;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr10.cast_mut();
                                                }
                                            }
                                            *base
                                                .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len11;
                                            *base
                                                .add(56 + 7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result11;
                                            cleanup_list.extend_from_slice(&[(result11, layout11)]);
                                        }
                                        None => {
                                            *base
                                                .add(56 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                V70::Image(e) => {
                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                    let super::super::super::fastertools::mcp::types::ImageContent {
                                        data: data12,
                                        mime_type: mime_type12,
                                        annotations: annotations12,
                                        meta: meta12,
                                    } = e;
                                    let vec13 = data12;
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    *base
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len13;
                                    *base.add(16).cast::<*mut u8>() = ptr13.cast_mut();
                                    let vec14 = mime_type12;
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    *base
                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *base
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr14.cast_mut();
                                    match annotations12 {
                                        Some(e) => {
                                            *base
                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::fastertools::mcp::types::Annotations {
                                                audience: audience15,
                                                priority: priority15,
                                                last_modified: last_modified15,
                                            } = e;
                                            match audience15 {
                                                Some(e) => {
                                                    *base
                                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec16 = e;
                                                    let len16 = vec16.len();
                                                    let layout16 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec16.len() * 1,
                                                        1,
                                                    );
                                                    let result16 = if layout16.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout16).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout16);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec16.into_iter().enumerate() {
                                                        let base = result16.add(i * 1);
                                                        {
                                                            *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                        }
                                                    }
                                                    *base
                                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len16;
                                                    *base
                                                        .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result16;
                                                    cleanup_list.extend_from_slice(&[(result16, layout16)]);
                                                }
                                                None => {
                                                    *base
                                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match priority15 {
                                                Some(e) => {
                                                    *base
                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(e);
                                                }
                                                None => {
                                                    *base
                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match last_modified15 {
                                                Some(e) => {
                                                    *base
                                                        .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec17 = e;
                                                    let ptr17 = vec17.as_ptr().cast::<u8>();
                                                    let len17 = vec17.len();
                                                    *base
                                                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len17;
                                                    *base
                                                        .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr17.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        None => {
                                            *base
                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match meta12 {
                                        Some(e) => {
                                            *base
                                                .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec21 = e;
                                            let len21 = vec21.len();
                                            let layout21 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec21.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result21 = if layout21.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout21).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout21);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec21.into_iter().enumerate() {
                                                let base = result21
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t18_0, t18_1) = e;
                                                    let vec19 = t18_0;
                                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                                    let len19 = vec19.len();
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len19;
                                                    *base.add(0).cast::<*mut u8>() = ptr19.cast_mut();
                                                    let vec20 = t18_1;
                                                    let ptr20 = vec20.as_ptr().cast::<u8>();
                                                    let len20 = vec20.len();
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len20;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr20.cast_mut();
                                                }
                                            }
                                            *base
                                                .add(56 + 10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len21;
                                            *base
                                                .add(56 + 9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result21;
                                            cleanup_list.extend_from_slice(&[(result21, layout21)]);
                                        }
                                        None => {
                                            *base
                                                .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                V70::Audio(e) => {
                                    *base.add(8).cast::<u8>() = (2i32) as u8;
                                    let super::super::super::fastertools::mcp::types::AudioContent {
                                        data: data22,
                                        mime_type: mime_type22,
                                        annotations: annotations22,
                                        meta: meta22,
                                    } = e;
                                    let vec23 = data22;
                                    let ptr23 = vec23.as_ptr().cast::<u8>();
                                    let len23 = vec23.len();
                                    *base
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len23;
                                    *base.add(16).cast::<*mut u8>() = ptr23.cast_mut();
                                    let vec24 = mime_type22;
                                    let ptr24 = vec24.as_ptr().cast::<u8>();
                                    let len24 = vec24.len();
                                    *base
                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len24;
                                    *base
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr24.cast_mut();
                                    match annotations22 {
                                        Some(e) => {
                                            *base
                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::fastertools::mcp::types::Annotations {
                                                audience: audience25,
                                                priority: priority25,
                                                last_modified: last_modified25,
                                            } = e;
                                            match audience25 {
                                                Some(e) => {
                                                    *base
                                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec26 = e;
                                                    let len26 = vec26.len();
                                                    let layout26 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec26.len() * 1,
                                                        1,
                                                    );
                                                    let result26 = if layout26.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout26).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout26);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec26.into_iter().enumerate() {
                                                        let base = result26.add(i * 1);
                                                        {
                                                            *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                        }
                                                    }
                                                    *base
                                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len26;
                                                    *base
                                                        .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result26;
                                                    cleanup_list.extend_from_slice(&[(result26, layout26)]);
                                                }
                                                None => {
                                                    *base
                                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match priority25 {
                                                Some(e) => {
                                                    *base
                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(e);
                                                }
                                                None => {
                                                    *base
                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match last_modified25 {
                                                Some(e) => {
                                                    *base
                                                        .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec27 = e;
                                                    let ptr27 = vec27.as_ptr().cast::<u8>();
                                                    let len27 = vec27.len();
                                                    *base
                                                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len27;
                                                    *base
                                                        .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr27.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        None => {
                                            *base
                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match meta22 {
                                        Some(e) => {
                                            *base
                                                .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec31 = e;
                                            let len31 = vec31.len();
                                            let layout31 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec31.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result31 = if layout31.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout31).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout31);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec31.into_iter().enumerate() {
                                                let base = result31
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t28_0, t28_1) = e;
                                                    let vec29 = t28_0;
                                                    let ptr29 = vec29.as_ptr().cast::<u8>();
                                                    let len29 = vec29.len();
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len29;
                                                    *base.add(0).cast::<*mut u8>() = ptr29.cast_mut();
                                                    let vec30 = t28_1;
                                                    let ptr30 = vec30.as_ptr().cast::<u8>();
                                                    let len30 = vec30.len();
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len30;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr30.cast_mut();
                                                }
                                            }
                                            *base
                                                .add(56 + 10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len31;
                                            *base
                                                .add(56 + 9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result31;
                                            cleanup_list.extend_from_slice(&[(result31, layout31)]);
                                        }
                                        None => {
                                            *base
                                                .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                V70::ResourceLink(e) => {
                                    *base.add(8).cast::<u8>() = (3i32) as u8;
                                    let super::super::super::fastertools::mcp::types::ResourceLink {
                                        uri: uri32,
                                        name: name32,
                                        title: title32,
                                        description: description32,
                                        mime_type: mime_type32,
                                        size: size32,
                                        annotations: annotations32,
                                        meta: meta32,
                                    } = e;
                                    let vec33 = uri32;
                                    let ptr33 = vec33.as_ptr().cast::<u8>();
                                    let len33 = vec33.len();
                                    *base
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len33;
                                    *base.add(16).cast::<*mut u8>() = ptr33.cast_mut();
                                    let vec34 = name32;
                                    let ptr34 = vec34.as_ptr().cast::<u8>();
                                    let len34 = vec34.len();
                                    *base
                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len34;
                                    *base
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr34.cast_mut();
                                    match title32 {
                                        Some(e) => {
                                            *base
                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec35 = e;
                                            let ptr35 = vec35.as_ptr().cast::<u8>();
                                            let len35 = vec35.len();
                                            *base
                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len35;
                                            *base
                                                .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr35.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match description32 {
                                        Some(e) => {
                                            *base
                                                .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec36 = e;
                                            let ptr36 = vec36.as_ptr().cast::<u8>();
                                            let len36 = vec36.len();
                                            *base
                                                .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len36;
                                            *base
                                                .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr36.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match mime_type32 {
                                        Some(e) => {
                                            *base
                                                .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec37 = e;
                                            let ptr37 = vec37.as_ptr().cast::<u8>();
                                            let len37 = vec37.len();
                                            *base
                                                .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len37;
                                            *base
                                                .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr37.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match size32 {
                                        Some(e) => {
                                            *base
                                                .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *base
                                                .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i64>() = _rt::as_i64(e);
                                        }
                                        None => {
                                            *base
                                                .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match annotations32 {
                                        Some(e) => {
                                            *base
                                                .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::fastertools::mcp::types::Annotations {
                                                audience: audience38,
                                                priority: priority38,
                                                last_modified: last_modified38,
                                            } = e;
                                            match audience38 {
                                                Some(e) => {
                                                    *base
                                                        .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec39 = e;
                                                    let len39 = vec39.len();
                                                    let layout39 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec39.len() * 1,
                                                        1,
                                                    );
                                                    let result39 = if layout39.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout39).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout39);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec39.into_iter().enumerate() {
                                                        let base = result39.add(i * 1);
                                                        {
                                                            *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                        }
                                                    }
                                                    *base
                                                        .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len39;
                                                    *base
                                                        .add(48 + 13 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result39;
                                                    cleanup_list.extend_from_slice(&[(result39, layout39)]);
                                                }
                                                None => {
                                                    *base
                                                        .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match priority38 {
                                                Some(e) => {
                                                    *base
                                                        .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(e);
                                                }
                                                None => {
                                                    *base
                                                        .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match last_modified38 {
                                                Some(e) => {
                                                    *base
                                                        .add(72 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec40 = e;
                                                    let ptr40 = vec40.as_ptr().cast::<u8>();
                                                    let len40 = vec40.len();
                                                    *base
                                                        .add(72 + 16 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len40;
                                                    *base
                                                        .add(72 + 15 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr40.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(72 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        None => {
                                            *base
                                                .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match meta32 {
                                        Some(e) => {
                                            *base
                                                .add(80 + 16 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec44 = e;
                                            let len44 = vec44.len();
                                            let layout44 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec44.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result44 = if layout44.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout44).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout44);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec44.into_iter().enumerate() {
                                                let base = result44
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t41_0, t41_1) = e;
                                                    let vec42 = t41_0;
                                                    let ptr42 = vec42.as_ptr().cast::<u8>();
                                                    let len42 = vec42.len();
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len42;
                                                    *base.add(0).cast::<*mut u8>() = ptr42.cast_mut();
                                                    let vec43 = t41_1;
                                                    let ptr43 = vec43.as_ptr().cast::<u8>();
                                                    let len43 = vec43.len();
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len43;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr43.cast_mut();
                                                }
                                            }
                                            *base
                                                .add(80 + 18 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len44;
                                            *base
                                                .add(80 + 17 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result44;
                                            cleanup_list.extend_from_slice(&[(result44, layout44)]);
                                        }
                                        None => {
                                            *base
                                                .add(80 + 16 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                V70::EmbeddedResource(e) => {
                                    *base.add(8).cast::<u8>() = (4i32) as u8;
                                    let super::super::super::fastertools::mcp::types::EmbeddedResource {
                                        contents: contents45,
                                        annotations: annotations45,
                                        meta: meta45,
                                    } = e;
                                    use super::super::super::fastertools::mcp::types::ResourceContents as V62;
                                    match contents45 {
                                        V62::Text(e) => {
                                            *base.add(16).cast::<u8>() = (0i32) as u8;
                                            let super::super::super::fastertools::mcp::types::TextResourceContents {
                                                uri: uri46,
                                                mime_type: mime_type46,
                                                text: text46,
                                                meta: meta46,
                                            } = e;
                                            let vec47 = uri46;
                                            let ptr47 = vec47.as_ptr().cast::<u8>();
                                            let len47 = vec47.len();
                                            *base
                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len47;
                                            *base
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr47.cast_mut();
                                            match mime_type46 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec48 = e;
                                                    let ptr48 = vec48.as_ptr().cast::<u8>();
                                                    let len48 = vec48.len();
                                                    *base
                                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len48;
                                                    *base
                                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr48.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            let vec49 = text46;
                                            let ptr49 = vec49.as_ptr().cast::<u8>();
                                            let len49 = vec49.len();
                                            *base
                                                .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len49;
                                            *base
                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr49.cast_mut();
                                            match meta46 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec53 = e;
                                                    let len53 = vec53.len();
                                                    let layout53 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec53.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result53 = if layout53.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout53).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout53);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec53.into_iter().enumerate() {
                                                        let base = result53
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t50_0, t50_1) = e;
                                                            let vec51 = t50_0;
                                                            let ptr51 = vec51.as_ptr().cast::<u8>();
                                                            let len51 = vec51.len();
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len51;
                                                            *base.add(0).cast::<*mut u8>() = ptr51.cast_mut();
                                                            let vec52 = t50_1;
                                                            let ptr52 = vec52.as_ptr().cast::<u8>();
                                                            let len52 = vec52.len();
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len52;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr52.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len53;
                                                    *base
                                                        .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result53;
                                                    cleanup_list.extend_from_slice(&[(result53, layout53)]);
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        V62::Blob(e) => {
                                            *base.add(16).cast::<u8>() = (1i32) as u8;
                                            let super::super::super::fastertools::mcp::types::BlobResourceContents {
                                                uri: uri54,
                                                mime_type: mime_type54,
                                                blob: blob54,
                                                meta: meta54,
                                            } = e;
                                            let vec55 = uri54;
                                            let ptr55 = vec55.as_ptr().cast::<u8>();
                                            let len55 = vec55.len();
                                            *base
                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len55;
                                            *base
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr55.cast_mut();
                                            match mime_type54 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec56 = e;
                                                    let ptr56 = vec56.as_ptr().cast::<u8>();
                                                    let len56 = vec56.len();
                                                    *base
                                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len56;
                                                    *base
                                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr56.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            let vec57 = blob54;
                                            let ptr57 = vec57.as_ptr().cast::<u8>();
                                            let len57 = vec57.len();
                                            *base
                                                .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len57;
                                            *base
                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr57.cast_mut();
                                            match meta54 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec61 = e;
                                                    let len61 = vec61.len();
                                                    let layout61 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec61.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result61 = if layout61.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout61).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout61);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec61.into_iter().enumerate() {
                                                        let base = result61
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t58_0, t58_1) = e;
                                                            let vec59 = t58_0;
                                                            let ptr59 = vec59.as_ptr().cast::<u8>();
                                                            let len59 = vec59.len();
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len59;
                                                            *base.add(0).cast::<*mut u8>() = ptr59.cast_mut();
                                                            let vec60 = t58_1;
                                                            let ptr60 = vec60.as_ptr().cast::<u8>();
                                                            let len60 = vec60.len();
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len60;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr60.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len61;
                                                    *base
                                                        .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result61;
                                                    cleanup_list.extend_from_slice(&[(result61, layout61)]);
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                    match annotations45 {
                                        Some(e) => {
                                            *base
                                                .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::fastertools::mcp::types::Annotations {
                                                audience: audience63,
                                                priority: priority63,
                                                last_modified: last_modified63,
                                            } = e;
                                            match audience63 {
                                                Some(e) => {
                                                    *base
                                                        .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec64 = e;
                                                    let len64 = vec64.len();
                                                    let layout64 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec64.len() * 1,
                                                        1,
                                                    );
                                                    let result64 = if layout64.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout64).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout64);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec64.into_iter().enumerate() {
                                                        let base = result64.add(i * 1);
                                                        {
                                                            *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                        }
                                                    }
                                                    *base
                                                        .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len64;
                                                    *base
                                                        .add(32 + 11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result64;
                                                    cleanup_list.extend_from_slice(&[(result64, layout64)]);
                                                }
                                                None => {
                                                    *base
                                                        .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match priority63 {
                                                Some(e) => {
                                                    *base
                                                        .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(e);
                                                }
                                                None => {
                                                    *base
                                                        .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match last_modified63 {
                                                Some(e) => {
                                                    *base
                                                        .add(56 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec65 = e;
                                                    let ptr65 = vec65.as_ptr().cast::<u8>();
                                                    let len65 = vec65.len();
                                                    *base
                                                        .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len65;
                                                    *base
                                                        .add(56 + 13 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr65.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(56 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        None => {
                                            *base
                                                .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match meta45 {
                                        Some(e) => {
                                            *base
                                                .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec69 = e;
                                            let len69 = vec69.len();
                                            let layout69 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec69.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result69 = if layout69.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout69).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout69);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec69.into_iter().enumerate() {
                                                let base = result69
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t66_0, t66_1) = e;
                                                    let vec67 = t66_0;
                                                    let ptr67 = vec67.as_ptr().cast::<u8>();
                                                    let len67 = vec67.len();
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len67;
                                                    *base.add(0).cast::<*mut u8>() = ptr67.cast_mut();
                                                    let vec68 = t66_1;
                                                    let ptr68 = vec68.as_ptr().cast::<u8>();
                                                    let len68 = vec68.len();
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len68;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr68.cast_mut();
                                                }
                                            }
                                            *base
                                                .add(64 + 16 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len69;
                                            *base
                                                .add(64 + 15 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result69;
                                            cleanup_list.extend_from_slice(&[(result69, layout69)]);
                                        }
                                        None => {
                                            *base
                                                .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                        }
                    }
                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len71;
                    *ptr0.add(0).cast::<*mut u8>() = result71;
                    match model_preferences1 {
                        Some(e) => {
                            *ptr0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let super::super::super::fastertools::mcp::types::ModelPreferences {
                                hints: hints72,
                                cost_priority: cost_priority72,
                                speed_priority: speed_priority72,
                                intelligence_priority: intelligence_priority72,
                            } = e;
                            match hints72 {
                                Some(e) => {
                                    *ptr0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec75 = e;
                                    let len75 = vec75.len();
                                    let layout75 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec75.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result75 = if layout75.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout75).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout75);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec75.into_iter().enumerate() {
                                        let base = result75
                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let super::super::super::fastertools::mcp::types::ModelHint {
                                                name: name73,
                                            } = e;
                                            match name73 {
                                                Some(e) => {
                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                    let vec74 = e;
                                                    let ptr74 = vec74.as_ptr().cast::<u8>();
                                                    let len74 = vec74.len();
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len74;
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr74.cast_mut();
                                                }
                                                None => {
                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                    *ptr0
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len75;
                                    *ptr0
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result75;
                                    cleanup_list.extend_from_slice(&[(result75, layout75)]);
                                }
                                None => {
                                    *ptr0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match cost_priority72 {
                                Some(e) => {
                                    *ptr0
                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f64>() = _rt::as_f64(e);
                                }
                                None => {
                                    *ptr0
                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match speed_priority72 {
                                Some(e) => {
                                    *ptr0
                                        .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f64>() = _rt::as_f64(e);
                                }
                                None => {
                                    *ptr0
                                        .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match intelligence_priority72 {
                                Some(e) => {
                                    *ptr0
                                        .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(56 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f64>() = _rt::as_f64(e);
                                }
                                None => {
                                    *ptr0
                                        .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        None => {
                            *ptr0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match system_prompt1 {
                        Some(e) => {
                            *ptr0
                                .add(64 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec76 = e;
                            let ptr76 = vec76.as_ptr().cast::<u8>();
                            let len76 = vec76.len();
                            *ptr0
                                .add(64 + 6 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len76;
                            *ptr0
                                .add(64 + 5 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr76.cast_mut();
                        }
                        None => {
                            *ptr0
                                .add(64 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match include_context1 {
                        Some(e) => {
                            *ptr0
                                .add(64 + 7 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec77 = e;
                            let ptr77 = vec77.as_ptr().cast::<u8>();
                            let len77 = vec77.len();
                            *ptr0
                                .add(64 + 9 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len77;
                            *ptr0
                                .add(64 + 8 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr77.cast_mut();
                        }
                        None => {
                            *ptr0
                                .add(64 + 7 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match temperature1 {
                        Some(e) => {
                            *ptr0
                                .add(64 + 10 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            *ptr0
                                .add(72 + 10 * ::core::mem::size_of::<*const u8>())
                                .cast::<f64>() = _rt::as_f64(e);
                        }
                        None => {
                            *ptr0
                                .add(64 + 10 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    *ptr0
                        .add(80 + 10 * ::core::mem::size_of::<*const u8>())
                        .cast::<i32>() = _rt::as_i32(max_tokens1);
                    match stop_sequences1 {
                        Some(e) => {
                            *ptr0
                                .add(80 + 11 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec79 = e;
                            let len79 = vec79.len();
                            let layout79 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec79.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result79 = if layout79.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout79).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout79);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec79.into_iter().enumerate() {
                                let base = result79
                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let vec78 = e;
                                    let ptr78 = vec78.as_ptr().cast::<u8>();
                                    let len78 = vec78.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len78;
                                    *base.add(0).cast::<*mut u8>() = ptr78.cast_mut();
                                }
                            }
                            *ptr0
                                .add(80 + 13 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len79;
                            *ptr0
                                .add(80 + 12 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result79;
                            cleanup_list.extend_from_slice(&[(result79, layout79)]);
                        }
                        None => {
                            *ptr0
                                .add(80 + 11 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match metadata1 {
                        Some(e) => {
                            *ptr0
                                .add(80 + 14 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec83 = e;
                            let len83 = vec83.len();
                            let layout83 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec83.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result83 = if layout83.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout83).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout83);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec83.into_iter().enumerate() {
                                let base = result83
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t80_0, t80_1) = e;
                                    let vec81 = t80_0;
                                    let ptr81 = vec81.as_ptr().cast::<u8>();
                                    let len81 = vec81.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len81;
                                    *base.add(0).cast::<*mut u8>() = ptr81.cast_mut();
                                    let vec82 = t80_1;
                                    let ptr82 = vec82.as_ptr().cast::<u8>();
                                    let len82 = vec82.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len82;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr82.cast_mut();
                                }
                            }
                            *ptr0
                                .add(80 + 16 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len83;
                            *ptr0
                                .add(80 + 15 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result83;
                            cleanup_list.extend_from_slice(&[(result83, layout83)]);
                        }
                        None => {
                            *ptr0
                                .add(80 + 14 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let ptr84 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "fastertools:mcp/sampling-capabilities@0.1.10"
                    )]
                    unsafe extern "C" {
                        #[link_name = "handle-create-message"]
                        fn wit_import85(_: *mut u8, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import85(_: *mut u8, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import85(ptr0, ptr84) };
                    let l86 = i32::from(*ptr84.add(0).cast::<u8>());
                    let result304 = match l86 {
                        0 => {
                            let e = {
                                let l87 = i32::from(*ptr84.add(8).cast::<u8>());
                                let l88 = i32::from(*ptr84.add(16).cast::<u8>());
                                use super::super::super::fastertools::mcp::types::ContentBlock as V276;
                                let v276 = match l88 {
                                    0 => {
                                        let e276 = {
                                            let l89 = *ptr84.add(24).cast::<*mut u8>();
                                            let l90 = *ptr84
                                                .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len91 = l90;
                                            let bytes91 = _rt::Vec::from_raw_parts(
                                                l89.cast(),
                                                len91,
                                                len91,
                                            );
                                            let l92 = i32::from(
                                                *ptr84
                                                    .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l104 = i32::from(
                                                *ptr84
                                                    .add(64 + 6 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            super::super::super::fastertools::mcp::types::TextContent {
                                                text: _rt::string_lift(bytes91),
                                                annotations: match l92 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l93 = i32::from(
                                                                *ptr84
                                                                    .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l98 = i32::from(
                                                                *ptr84
                                                                    .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l100 = i32::from(
                                                                *ptr84
                                                                    .add(56 + 4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            super::super::super::fastertools::mcp::types::Annotations {
                                                                audience: match l93 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l94 = *ptr84
                                                                                .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l95 = *ptr84
                                                                                .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base97 = l94;
                                                                            let len97 = l95;
                                                                            let mut result97 = _rt::Vec::with_capacity(len97);
                                                                            for i in 0..len97 {
                                                                                let base = base97.add(i * 1);
                                                                                let e97 = {
                                                                                    let l96 = i32::from(*base.add(0).cast::<u8>());
                                                                                    super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                        l96 as u8,
                                                                                    )
                                                                                };
                                                                                result97.push(e97);
                                                                            }
                                                                            _rt::cabi_dealloc(base97, len97 * 1, 1);
                                                                            result97
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                priority: match l98 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l99 = *ptr84
                                                                                .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            l99
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                last_modified: match l100 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l101 = *ptr84
                                                                                .add(56 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l102 = *ptr84
                                                                                .add(56 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len103 = l102;
                                                                            let bytes103 = _rt::Vec::from_raw_parts(
                                                                                l101.cast(),
                                                                                len103,
                                                                                len103,
                                                                            );
                                                                            _rt::string_lift(bytes103)
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                meta: match l104 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l105 = *ptr84
                                                                .add(64 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l106 = *ptr84
                                                                .add(64 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base113 = l105;
                                                            let len113 = l106;
                                                            let mut result113 = _rt::Vec::with_capacity(len113);
                                                            for i in 0..len113 {
                                                                let base = base113
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                let e113 = {
                                                                    let l107 = *base.add(0).cast::<*mut u8>();
                                                                    let l108 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len109 = l108;
                                                                    let bytes109 = _rt::Vec::from_raw_parts(
                                                                        l107.cast(),
                                                                        len109,
                                                                        len109,
                                                                    );
                                                                    let l110 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l111 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len112 = l111;
                                                                    let bytes112 = _rt::Vec::from_raw_parts(
                                                                        l110.cast(),
                                                                        len112,
                                                                        len112,
                                                                    );
                                                                    (_rt::string_lift(bytes109), _rt::string_lift(bytes112))
                                                                };
                                                                result113.push(e113);
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base113,
                                                                len113 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            result113
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        V276::Text(e276)
                                    }
                                    1 => {
                                        let e276 = {
                                            let l114 = *ptr84.add(24).cast::<*mut u8>();
                                            let l115 = *ptr84
                                                .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len116 = l115;
                                            let l117 = *ptr84
                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l118 = *ptr84
                                                .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len119 = l118;
                                            let bytes119 = _rt::Vec::from_raw_parts(
                                                l117.cast(),
                                                len119,
                                                len119,
                                            );
                                            let l120 = i32::from(
                                                *ptr84
                                                    .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l132 = i32::from(
                                                *ptr84
                                                    .add(64 + 8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            super::super::super::fastertools::mcp::types::ImageContent {
                                                data: _rt::Vec::from_raw_parts(l114.cast(), len116, len116),
                                                mime_type: _rt::string_lift(bytes119),
                                                annotations: match l120 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l121 = i32::from(
                                                                *ptr84
                                                                    .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l126 = i32::from(
                                                                *ptr84
                                                                    .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l128 = i32::from(
                                                                *ptr84
                                                                    .add(56 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            super::super::super::fastertools::mcp::types::Annotations {
                                                                audience: match l121 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l122 = *ptr84
                                                                                .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l123 = *ptr84
                                                                                .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base125 = l122;
                                                                            let len125 = l123;
                                                                            let mut result125 = _rt::Vec::with_capacity(len125);
                                                                            for i in 0..len125 {
                                                                                let base = base125.add(i * 1);
                                                                                let e125 = {
                                                                                    let l124 = i32::from(*base.add(0).cast::<u8>());
                                                                                    super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                        l124 as u8,
                                                                                    )
                                                                                };
                                                                                result125.push(e125);
                                                                            }
                                                                            _rt::cabi_dealloc(base125, len125 * 1, 1);
                                                                            result125
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                priority: match l126 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l127 = *ptr84
                                                                                .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            l127
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                last_modified: match l128 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l129 = *ptr84
                                                                                .add(56 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l130 = *ptr84
                                                                                .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len131 = l130;
                                                                            let bytes131 = _rt::Vec::from_raw_parts(
                                                                                l129.cast(),
                                                                                len131,
                                                                                len131,
                                                                            );
                                                                            _rt::string_lift(bytes131)
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                meta: match l132 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l133 = *ptr84
                                                                .add(64 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l134 = *ptr84
                                                                .add(64 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base141 = l133;
                                                            let len141 = l134;
                                                            let mut result141 = _rt::Vec::with_capacity(len141);
                                                            for i in 0..len141 {
                                                                let base = base141
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                let e141 = {
                                                                    let l135 = *base.add(0).cast::<*mut u8>();
                                                                    let l136 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len137 = l136;
                                                                    let bytes137 = _rt::Vec::from_raw_parts(
                                                                        l135.cast(),
                                                                        len137,
                                                                        len137,
                                                                    );
                                                                    let l138 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l139 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len140 = l139;
                                                                    let bytes140 = _rt::Vec::from_raw_parts(
                                                                        l138.cast(),
                                                                        len140,
                                                                        len140,
                                                                    );
                                                                    (_rt::string_lift(bytes137), _rt::string_lift(bytes140))
                                                                };
                                                                result141.push(e141);
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base141,
                                                                len141 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            result141
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        V276::Image(e276)
                                    }
                                    2 => {
                                        let e276 = {
                                            let l142 = *ptr84.add(24).cast::<*mut u8>();
                                            let l143 = *ptr84
                                                .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len144 = l143;
                                            let l145 = *ptr84
                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l146 = *ptr84
                                                .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len147 = l146;
                                            let bytes147 = _rt::Vec::from_raw_parts(
                                                l145.cast(),
                                                len147,
                                                len147,
                                            );
                                            let l148 = i32::from(
                                                *ptr84
                                                    .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l160 = i32::from(
                                                *ptr84
                                                    .add(64 + 8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            super::super::super::fastertools::mcp::types::AudioContent {
                                                data: _rt::Vec::from_raw_parts(l142.cast(), len144, len144),
                                                mime_type: _rt::string_lift(bytes147),
                                                annotations: match l148 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l149 = i32::from(
                                                                *ptr84
                                                                    .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l154 = i32::from(
                                                                *ptr84
                                                                    .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l156 = i32::from(
                                                                *ptr84
                                                                    .add(56 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            super::super::super::fastertools::mcp::types::Annotations {
                                                                audience: match l149 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l150 = *ptr84
                                                                                .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l151 = *ptr84
                                                                                .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base153 = l150;
                                                                            let len153 = l151;
                                                                            let mut result153 = _rt::Vec::with_capacity(len153);
                                                                            for i in 0..len153 {
                                                                                let base = base153.add(i * 1);
                                                                                let e153 = {
                                                                                    let l152 = i32::from(*base.add(0).cast::<u8>());
                                                                                    super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                        l152 as u8,
                                                                                    )
                                                                                };
                                                                                result153.push(e153);
                                                                            }
                                                                            _rt::cabi_dealloc(base153, len153 * 1, 1);
                                                                            result153
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                priority: match l154 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l155 = *ptr84
                                                                                .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            l155
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                last_modified: match l156 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l157 = *ptr84
                                                                                .add(56 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l158 = *ptr84
                                                                                .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len159 = l158;
                                                                            let bytes159 = _rt::Vec::from_raw_parts(
                                                                                l157.cast(),
                                                                                len159,
                                                                                len159,
                                                                            );
                                                                            _rt::string_lift(bytes159)
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                meta: match l160 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l161 = *ptr84
                                                                .add(64 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l162 = *ptr84
                                                                .add(64 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base169 = l161;
                                                            let len169 = l162;
                                                            let mut result169 = _rt::Vec::with_capacity(len169);
                                                            for i in 0..len169 {
                                                                let base = base169
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                let e169 = {
                                                                    let l163 = *base.add(0).cast::<*mut u8>();
                                                                    let l164 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len165 = l164;
                                                                    let bytes165 = _rt::Vec::from_raw_parts(
                                                                        l163.cast(),
                                                                        len165,
                                                                        len165,
                                                                    );
                                                                    let l166 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l167 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len168 = l167;
                                                                    let bytes168 = _rt::Vec::from_raw_parts(
                                                                        l166.cast(),
                                                                        len168,
                                                                        len168,
                                                                    );
                                                                    (_rt::string_lift(bytes165), _rt::string_lift(bytes168))
                                                                };
                                                                result169.push(e169);
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base169,
                                                                len169 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            result169
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        V276::Audio(e276)
                                    }
                                    3 => {
                                        let e276 = {
                                            let l170 = *ptr84.add(24).cast::<*mut u8>();
                                            let l171 = *ptr84
                                                .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len172 = l171;
                                            let bytes172 = _rt::Vec::from_raw_parts(
                                                l170.cast(),
                                                len172,
                                                len172,
                                            );
                                            let l173 = *ptr84
                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l174 = *ptr84
                                                .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len175 = l174;
                                            let bytes175 = _rt::Vec::from_raw_parts(
                                                l173.cast(),
                                                len175,
                                                len175,
                                            );
                                            let l176 = i32::from(
                                                *ptr84
                                                    .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l180 = i32::from(
                                                *ptr84
                                                    .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l184 = i32::from(
                                                *ptr84
                                                    .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l188 = i32::from(
                                                *ptr84
                                                    .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l190 = i32::from(
                                                *ptr84
                                                    .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l202 = i32::from(
                                                *ptr84
                                                    .add(88 + 16 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            super::super::super::fastertools::mcp::types::ResourceLink {
                                                uri: _rt::string_lift(bytes172),
                                                name: _rt::string_lift(bytes175),
                                                title: match l176 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l177 = *ptr84
                                                                .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l178 = *ptr84
                                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len179 = l178;
                                                            let bytes179 = _rt::Vec::from_raw_parts(
                                                                l177.cast(),
                                                                len179,
                                                                len179,
                                                            );
                                                            _rt::string_lift(bytes179)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                description: match l180 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l181 = *ptr84
                                                                .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l182 = *ptr84
                                                                .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len183 = l182;
                                                            let bytes183 = _rt::Vec::from_raw_parts(
                                                                l181.cast(),
                                                                len183,
                                                                len183,
                                                            );
                                                            _rt::string_lift(bytes183)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                mime_type: match l184 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l185 = *ptr84
                                                                .add(24 + 11 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l186 = *ptr84
                                                                .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len187 = l186;
                                                            let bytes187 = _rt::Vec::from_raw_parts(
                                                                l185.cast(),
                                                                len187,
                                                                len187,
                                                            );
                                                            _rt::string_lift(bytes187)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                size: match l188 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l189 = *ptr84
                                                                .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i64>();
                                                            l189 as u64
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                annotations: match l190 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l191 = i32::from(
                                                                *ptr84
                                                                    .add(56 + 12 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l196 = i32::from(
                                                                *ptr84
                                                                    .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l198 = i32::from(
                                                                *ptr84
                                                                    .add(80 + 14 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            super::super::super::fastertools::mcp::types::Annotations {
                                                                audience: match l191 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l192 = *ptr84
                                                                                .add(56 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l193 = *ptr84
                                                                                .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base195 = l192;
                                                                            let len195 = l193;
                                                                            let mut result195 = _rt::Vec::with_capacity(len195);
                                                                            for i in 0..len195 {
                                                                                let base = base195.add(i * 1);
                                                                                let e195 = {
                                                                                    let l194 = i32::from(*base.add(0).cast::<u8>());
                                                                                    super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                        l194 as u8,
                                                                                    )
                                                                                };
                                                                                result195.push(e195);
                                                                            }
                                                                            _rt::cabi_dealloc(base195, len195 * 1, 1);
                                                                            result195
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                priority: match l196 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l197 = *ptr84
                                                                                .add(72 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            l197
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                last_modified: match l198 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l199 = *ptr84
                                                                                .add(80 + 15 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l200 = *ptr84
                                                                                .add(80 + 16 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len201 = l200;
                                                                            let bytes201 = _rt::Vec::from_raw_parts(
                                                                                l199.cast(),
                                                                                len201,
                                                                                len201,
                                                                            );
                                                                            _rt::string_lift(bytes201)
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                meta: match l202 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l203 = *ptr84
                                                                .add(88 + 17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l204 = *ptr84
                                                                .add(88 + 18 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base211 = l203;
                                                            let len211 = l204;
                                                            let mut result211 = _rt::Vec::with_capacity(len211);
                                                            for i in 0..len211 {
                                                                let base = base211
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                let e211 = {
                                                                    let l205 = *base.add(0).cast::<*mut u8>();
                                                                    let l206 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len207 = l206;
                                                                    let bytes207 = _rt::Vec::from_raw_parts(
                                                                        l205.cast(),
                                                                        len207,
                                                                        len207,
                                                                    );
                                                                    let l208 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l209 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len210 = l209;
                                                                    let bytes210 = _rt::Vec::from_raw_parts(
                                                                        l208.cast(),
                                                                        len210,
                                                                        len210,
                                                                    );
                                                                    (_rt::string_lift(bytes207), _rt::string_lift(bytes210))
                                                                };
                                                                result211.push(e211);
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base211,
                                                                len211 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            result211
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        V276::ResourceLink(e276)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 4, "invalid enum discriminant");
                                        let e276 = {
                                            let l212 = i32::from(*ptr84.add(24).cast::<u8>());
                                            use super::super::super::fastertools::mcp::types::ResourceContents as V253;
                                            let v253 = match l212 {
                                                0 => {
                                                    let e253 = {
                                                        let l213 = *ptr84
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l214 = *ptr84
                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len215 = l214;
                                                        let bytes215 = _rt::Vec::from_raw_parts(
                                                            l213.cast(),
                                                            len215,
                                                            len215,
                                                        );
                                                        let l216 = i32::from(
                                                            *ptr84
                                                                .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l220 = *ptr84
                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l221 = *ptr84
                                                            .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len222 = l221;
                                                        let bytes222 = _rt::Vec::from_raw_parts(
                                                            l220.cast(),
                                                            len222,
                                                            len222,
                                                        );
                                                        let l223 = i32::from(
                                                            *ptr84
                                                                .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        super::super::super::fastertools::mcp::types::TextResourceContents {
                                                            uri: _rt::string_lift(bytes215),
                                                            mime_type: match l216 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l217 = *ptr84
                                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l218 = *ptr84
                                                                            .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len219 = l218;
                                                                        let bytes219 = _rt::Vec::from_raw_parts(
                                                                            l217.cast(),
                                                                            len219,
                                                                            len219,
                                                                        );
                                                                        _rt::string_lift(bytes219)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            text: _rt::string_lift(bytes222),
                                                            meta: match l223 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l224 = *ptr84
                                                                            .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l225 = *ptr84
                                                                            .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base232 = l224;
                                                                        let len232 = l225;
                                                                        let mut result232 = _rt::Vec::with_capacity(len232);
                                                                        for i in 0..len232 {
                                                                            let base = base232
                                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                            let e232 = {
                                                                                let l226 = *base.add(0).cast::<*mut u8>();
                                                                                let l227 = *base
                                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len228 = l227;
                                                                                let bytes228 = _rt::Vec::from_raw_parts(
                                                                                    l226.cast(),
                                                                                    len228,
                                                                                    len228,
                                                                                );
                                                                                let l229 = *base
                                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l230 = *base
                                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len231 = l230;
                                                                                let bytes231 = _rt::Vec::from_raw_parts(
                                                                                    l229.cast(),
                                                                                    len231,
                                                                                    len231,
                                                                                );
                                                                                (_rt::string_lift(bytes228), _rt::string_lift(bytes231))
                                                                            };
                                                                            result232.push(e232);
                                                                        }
                                                                        _rt::cabi_dealloc(
                                                                            base232,
                                                                            len232 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                            ::core::mem::size_of::<*const u8>(),
                                                                        );
                                                                        result232
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V253::Text(e253)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                    let e253 = {
                                                        let l233 = *ptr84
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l234 = *ptr84
                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len235 = l234;
                                                        let bytes235 = _rt::Vec::from_raw_parts(
                                                            l233.cast(),
                                                            len235,
                                                            len235,
                                                        );
                                                        let l236 = i32::from(
                                                            *ptr84
                                                                .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l240 = *ptr84
                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l241 = *ptr84
                                                            .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len242 = l241;
                                                        let l243 = i32::from(
                                                            *ptr84
                                                                .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        super::super::super::fastertools::mcp::types::BlobResourceContents {
                                                            uri: _rt::string_lift(bytes235),
                                                            mime_type: match l236 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l237 = *ptr84
                                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l238 = *ptr84
                                                                            .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len239 = l238;
                                                                        let bytes239 = _rt::Vec::from_raw_parts(
                                                                            l237.cast(),
                                                                            len239,
                                                                            len239,
                                                                        );
                                                                        _rt::string_lift(bytes239)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            blob: _rt::Vec::from_raw_parts(l240.cast(), len242, len242),
                                                            meta: match l243 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l244 = *ptr84
                                                                            .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l245 = *ptr84
                                                                            .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base252 = l244;
                                                                        let len252 = l245;
                                                                        let mut result252 = _rt::Vec::with_capacity(len252);
                                                                        for i in 0..len252 {
                                                                            let base = base252
                                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                            let e252 = {
                                                                                let l246 = *base.add(0).cast::<*mut u8>();
                                                                                let l247 = *base
                                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len248 = l247;
                                                                                let bytes248 = _rt::Vec::from_raw_parts(
                                                                                    l246.cast(),
                                                                                    len248,
                                                                                    len248,
                                                                                );
                                                                                let l249 = *base
                                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l250 = *base
                                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len251 = l250;
                                                                                let bytes251 = _rt::Vec::from_raw_parts(
                                                                                    l249.cast(),
                                                                                    len251,
                                                                                    len251,
                                                                                );
                                                                                (_rt::string_lift(bytes248), _rt::string_lift(bytes251))
                                                                            };
                                                                            result252.push(e252);
                                                                        }
                                                                        _rt::cabi_dealloc(
                                                                            base252,
                                                                            len252 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                            ::core::mem::size_of::<*const u8>(),
                                                                        );
                                                                        result252
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V253::Blob(e253)
                                                }
                                            };
                                            let l254 = i32::from(
                                                *ptr84
                                                    .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l266 = i32::from(
                                                *ptr84
                                                    .add(72 + 14 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            super::super::super::fastertools::mcp::types::EmbeddedResource {
                                                contents: v253,
                                                annotations: match l254 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l255 = i32::from(
                                                                *ptr84
                                                                    .add(40 + 10 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l260 = i32::from(
                                                                *ptr84
                                                                    .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l262 = i32::from(
                                                                *ptr84
                                                                    .add(64 + 12 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            super::super::super::fastertools::mcp::types::Annotations {
                                                                audience: match l255 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l256 = *ptr84
                                                                                .add(40 + 11 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l257 = *ptr84
                                                                                .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base259 = l256;
                                                                            let len259 = l257;
                                                                            let mut result259 = _rt::Vec::with_capacity(len259);
                                                                            for i in 0..len259 {
                                                                                let base = base259.add(i * 1);
                                                                                let e259 = {
                                                                                    let l258 = i32::from(*base.add(0).cast::<u8>());
                                                                                    super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                        l258 as u8,
                                                                                    )
                                                                                };
                                                                                result259.push(e259);
                                                                            }
                                                                            _rt::cabi_dealloc(base259, len259 * 1, 1);
                                                                            result259
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                priority: match l260 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l261 = *ptr84
                                                                                .add(56 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            l261
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                last_modified: match l262 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l263 = *ptr84
                                                                                .add(64 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l264 = *ptr84
                                                                                .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len265 = l264;
                                                                            let bytes265 = _rt::Vec::from_raw_parts(
                                                                                l263.cast(),
                                                                                len265,
                                                                                len265,
                                                                            );
                                                                            _rt::string_lift(bytes265)
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                meta: match l266 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l267 = *ptr84
                                                                .add(72 + 15 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l268 = *ptr84
                                                                .add(72 + 16 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base275 = l267;
                                                            let len275 = l268;
                                                            let mut result275 = _rt::Vec::with_capacity(len275);
                                                            for i in 0..len275 {
                                                                let base = base275
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                let e275 = {
                                                                    let l269 = *base.add(0).cast::<*mut u8>();
                                                                    let l270 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len271 = l270;
                                                                    let bytes271 = _rt::Vec::from_raw_parts(
                                                                        l269.cast(),
                                                                        len271,
                                                                        len271,
                                                                    );
                                                                    let l272 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l273 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len274 = l273;
                                                                    let bytes274 = _rt::Vec::from_raw_parts(
                                                                        l272.cast(),
                                                                        len274,
                                                                        len274,
                                                                    );
                                                                    (_rt::string_lift(bytes271), _rt::string_lift(bytes274))
                                                                };
                                                                result275.push(e275);
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base275,
                                                                len275 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            result275
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        V276::EmbeddedResource(e276)
                                    }
                                };
                                let l277 = *ptr84
                                    .add(96 + 18 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l278 = *ptr84
                                    .add(96 + 19 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len279 = l278;
                                let bytes279 = _rt::Vec::from_raw_parts(
                                    l277.cast(),
                                    len279,
                                    len279,
                                );
                                let l280 = i32::from(
                                    *ptr84
                                        .add(96 + 20 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l284 = i32::from(
                                    *ptr84
                                        .add(96 + 23 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::sampling::CreateMessageResult {
                                    role: super::super::super::fastertools::mcp::types::MessageRole::_lift(
                                        l87 as u8,
                                    ),
                                    content: v276,
                                    model: _rt::string_lift(bytes279),
                                    stop_reason: match l280 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l281 = *ptr84
                                                    .add(96 + 21 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l282 = *ptr84
                                                    .add(96 + 22 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len283 = l282;
                                                let bytes283 = _rt::Vec::from_raw_parts(
                                                    l281.cast(),
                                                    len283,
                                                    len283,
                                                );
                                                _rt::string_lift(bytes283)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    meta: match l284 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l285 = *ptr84
                                                    .add(96 + 24 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l286 = *ptr84
                                                    .add(96 + 25 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base293 = l285;
                                                let len293 = l286;
                                                let mut result293 = _rt::Vec::with_capacity(len293);
                                                for i in 0..len293 {
                                                    let base = base293
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e293 = {
                                                        let l287 = *base.add(0).cast::<*mut u8>();
                                                        let l288 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len289 = l288;
                                                        let bytes289 = _rt::Vec::from_raw_parts(
                                                            l287.cast(),
                                                            len289,
                                                            len289,
                                                        );
                                                        let l290 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l291 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len292 = l291;
                                                        let bytes292 = _rt::Vec::from_raw_parts(
                                                            l290.cast(),
                                                            len292,
                                                            len292,
                                                        );
                                                        (_rt::string_lift(bytes289), _rt::string_lift(bytes292))
                                                    };
                                                    result293.push(e293);
                                                }
                                                _rt::cabi_dealloc(
                                                    base293,
                                                    len293 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result293
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l294 = i32::from(*ptr84.add(8).cast::<u8>());
                                use super::super::super::fastertools::mcp::types::ErrorCode as V296;
                                let v296 = match l294 {
                                    0 => V296::ParseError,
                                    1 => V296::InvalidRequest,
                                    2 => V296::MethodNotFound,
                                    3 => V296::InvalidParams,
                                    4 => V296::InternalError,
                                    5 => V296::ResourceNotFound,
                                    6 => V296::ToolNotFound,
                                    7 => V296::PromptNotFound,
                                    8 => V296::Unauthorized,
                                    9 => V296::RateLimited,
                                    10 => V296::Timeout,
                                    11 => V296::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e296 = {
                                            let l295 = *ptr84.add(12).cast::<i32>();
                                            l295
                                        };
                                        V296::CustomCode(e296)
                                    }
                                };
                                let l297 = *ptr84.add(16).cast::<*mut u8>();
                                let l298 = *ptr84
                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len299 = l298;
                                let bytes299 = _rt::Vec::from_raw_parts(
                                    l297.cast(),
                                    len299,
                                    len299,
                                );
                                let l300 = i32::from(
                                    *ptr84
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v296,
                                    message: _rt::string_lift(bytes299),
                                    data: match l300 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l301 = *ptr84
                                                    .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l302 = *ptr84
                                                    .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len303 = l302;
                                                let bytes303 = _rt::Vec::from_raw_parts(
                                                    l301.cast(),
                                                    len303,
                                                    len303,
                                                );
                                                _rt::string_lift(bytes303)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    if layout71.size() != 0 {
                        _rt::alloc::dealloc(result71.cast(), layout71);
                    }
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result304
                }
            }
        }
        /// Elicitation capabilities - implement this to handle user input requests
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod elicitation_capabilities {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type McpError = super::super::super::fastertools::mcp::types::McpError;
            pub type ElicitRequest = super::super::super::fastertools::mcp::elicitation::ElicitRequest;
            pub type ElicitResult = super::super::super::fastertools::mcp::elicitation::ElicitResult;
            #[allow(unused_unsafe, clippy::all)]
            /// Handle request for structured user input
            pub fn handle_elicit(
                request: &ElicitRequest,
            ) -> Result<ElicitResult, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 11 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 11
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::fastertools::mcp::elicitation::ElicitRequest {
                        message: message0,
                        schema: schema0,
                        meta: meta0,
                    } = request;
                    let vec1 = message0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let vec2 = schema0;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    let (result7_0, result7_1, result7_2) = match meta0 {
                        Some(e) => {
                            let vec6 = e;
                            let len6 = vec6.len();
                            let layout6 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec6.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result6 = if layout6.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout6);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec6.into_iter().enumerate() {
                                let base = result6
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t3_0, t3_1) = e;
                                    let vec4 = t3_0;
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                                    let vec5 = t3_1;
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result6, layout6)]);
                            (1i32, result6, len6)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr8 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "fastertools:mcp/elicitation-capabilities@0.1.10"
                    )]
                    unsafe extern "C" {
                        #[link_name = "handle-elicit"]
                        fn wit_import9(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import9(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import9(
                            ptr1.cast_mut(),
                            len1,
                            ptr2.cast_mut(),
                            len2,
                            result7_0,
                            result7_1,
                            result7_2,
                            ptr8,
                        )
                    };
                    let l10 = i32::from(*ptr8.add(0).cast::<u8>());
                    let result40 = match l10 {
                        0 => {
                            let e = {
                                let l11 = i32::from(
                                    *ptr8.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                let l12 = i32::from(
                                    *ptr8
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l16 = i32::from(
                                    *ptr8
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l20 = i32::from(
                                    *ptr8
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::elicitation::ElicitResult {
                                    action: super::super::super::fastertools::mcp::elicitation::ElicitAction::_lift(
                                        l11 as u8,
                                    ),
                                    data: match l12 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l13 = *ptr8
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l14 = *ptr8
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len15 = l14;
                                                let bytes15 = _rt::Vec::from_raw_parts(
                                                    l13.cast(),
                                                    len15,
                                                    len15,
                                                );
                                                _rt::string_lift(bytes15)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    message: match l16 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l17 = *ptr8
                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l18 = *ptr8
                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );
                                                _rt::string_lift(bytes19)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    meta: match l20 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l21 = *ptr8
                                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l22 = *ptr8
                                                    .add(10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base29 = l21;
                                                let len29 = l22;
                                                let mut result29 = _rt::Vec::with_capacity(len29);
                                                for i in 0..len29 {
                                                    let base = base29
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e29 = {
                                                        let l23 = *base.add(0).cast::<*mut u8>();
                                                        let l24 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len25 = l24;
                                                        let bytes25 = _rt::Vec::from_raw_parts(
                                                            l23.cast(),
                                                            len25,
                                                            len25,
                                                        );
                                                        let l26 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l27 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len28 = l27;
                                                        let bytes28 = _rt::Vec::from_raw_parts(
                                                            l26.cast(),
                                                            len28,
                                                            len28,
                                                        );
                                                        (_rt::string_lift(bytes25), _rt::string_lift(bytes28))
                                                    };
                                                    result29.push(e29);
                                                }
                                                _rt::cabi_dealloc(
                                                    base29,
                                                    len29 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result29
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l30 = i32::from(
                                    *ptr8.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V32;
                                let v32 = match l30 {
                                    0 => V32::ParseError,
                                    1 => V32::InvalidRequest,
                                    2 => V32::MethodNotFound,
                                    3 => V32::InvalidParams,
                                    4 => V32::InternalError,
                                    5 => V32::ResourceNotFound,
                                    6 => V32::ToolNotFound,
                                    7 => V32::PromptNotFound,
                                    8 => V32::Unauthorized,
                                    9 => V32::RateLimited,
                                    10 => V32::Timeout,
                                    11 => V32::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e32 = {
                                            let l31 = *ptr8
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l31
                                        };
                                        V32::CustomCode(e32)
                                    }
                                };
                                let l33 = *ptr8
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l34 = *ptr8
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len35 = l34;
                                let bytes35 = _rt::Vec::from_raw_parts(
                                    l33.cast(),
                                    len35,
                                    len35,
                                );
                                let l36 = i32::from(
                                    *ptr8
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v32,
                                    message: _rt::string_lift(bytes35),
                                    data: match l36 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l37 = *ptr8
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l38 = *ptr8
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len39 = l38;
                                                let bytes39 = _rt::Vec::from_raw_parts(
                                                    l37.cast(),
                                                    len39,
                                                    len39,
                                                );
                                                _rt::string_lift(bytes39)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result40
                }
            }
        }
        /// Roots capabilities - implement this to expose file system roots
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod roots_capabilities {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type McpError = super::super::super::fastertools::mcp::types::McpError;
            pub type ListRootsRequest = super::super::super::fastertools::mcp::roots::ListRootsRequest;
            pub type ListRootsResult = super::super::super::fastertools::mcp::roots::ListRootsResult;
            #[allow(unused_unsafe, clippy::all)]
            /// Handle request to list file system roots
            pub fn handle_list_roots(
                request: &ListRootsRequest,
            ) -> Result<ListRootsResult, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::fastertools::mcp::roots::ListRootsRequest {
                        meta: meta0,
                    } = request;
                    let (result5_0, result5_1, result5_2) = match meta0 {
                        Some(e) => {
                            let vec4 = e;
                            let len4 = vec4.len();
                            let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec4.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result4 = if layout4.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout4);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec4.into_iter().enumerate() {
                                let base = result4
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t1_0, t1_1) = e;
                                    let vec2 = t1_0;
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len2;
                                    *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                                    let vec3 = t1_1;
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len3;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr3.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result4, layout4)]);
                            (1i32, result4, len4)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr6 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "fastertools:mcp/roots-capabilities@0.1.10"
                    )]
                    unsafe extern "C" {
                        #[link_name = "handle-list-roots"]
                        fn wit_import7(_: i32, _: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import7(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import7(result5_0, result5_1, result5_2, ptr6) };
                    let l8 = i32::from(*ptr6.add(0).cast::<u8>());
                    let result39 = match l8 {
                        0 => {
                            let e = {
                                let l9 = *ptr6
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l10 = *ptr6
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base18 = l9;
                                let len18 = l10;
                                let mut result18 = _rt::Vec::with_capacity(len18);
                                for i in 0..len18 {
                                    let base = base18
                                        .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                    let e18 = {
                                        let l11 = *base.add(0).cast::<*mut u8>();
                                        let l12 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len13 = l12;
                                        let bytes13 = _rt::Vec::from_raw_parts(
                                            l11.cast(),
                                            len13,
                                            len13,
                                        );
                                        let l14 = i32::from(
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        super::super::super::fastertools::mcp::roots::Root {
                                            uri: _rt::string_lift(bytes13),
                                            name: match l14 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l15 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l16 = *base
                                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len17 = l16;
                                                        let bytes17 = _rt::Vec::from_raw_parts(
                                                            l15.cast(),
                                                            len17,
                                                            len17,
                                                        );
                                                        _rt::string_lift(bytes17)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    result18.push(e18);
                                }
                                _rt::cabi_dealloc(
                                    base18,
                                    len18 * (5 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l19 = i32::from(
                                    *ptr6
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::roots::ListRootsResult {
                                    roots: result18,
                                    meta: match l19 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l20 = *ptr6
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l21 = *ptr6
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base28 = l20;
                                                let len28 = l21;
                                                let mut result28 = _rt::Vec::with_capacity(len28);
                                                for i in 0..len28 {
                                                    let base = base28
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e28 = {
                                                        let l22 = *base.add(0).cast::<*mut u8>();
                                                        let l23 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len24 = l23;
                                                        let bytes24 = _rt::Vec::from_raw_parts(
                                                            l22.cast(),
                                                            len24,
                                                            len24,
                                                        );
                                                        let l25 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l26 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len27 = l26;
                                                        let bytes27 = _rt::Vec::from_raw_parts(
                                                            l25.cast(),
                                                            len27,
                                                            len27,
                                                        );
                                                        (_rt::string_lift(bytes24), _rt::string_lift(bytes27))
                                                    };
                                                    result28.push(e28);
                                                }
                                                _rt::cabi_dealloc(
                                                    base28,
                                                    len28 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result28
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l29 = i32::from(
                                    *ptr6.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V31;
                                let v31 = match l29 {
                                    0 => V31::ParseError,
                                    1 => V31::InvalidRequest,
                                    2 => V31::MethodNotFound,
                                    3 => V31::InvalidParams,
                                    4 => V31::InternalError,
                                    5 => V31::ResourceNotFound,
                                    6 => V31::ToolNotFound,
                                    7 => V31::PromptNotFound,
                                    8 => V31::Unauthorized,
                                    9 => V31::RateLimited,
                                    10 => V31::Timeout,
                                    11 => V31::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e31 = {
                                            let l30 = *ptr6
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l30
                                        };
                                        V31::CustomCode(e31)
                                    }
                                };
                                let l32 = *ptr6
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l33 = *ptr6
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len34 = l33;
                                let bytes34 = _rt::Vec::from_raw_parts(
                                    l32.cast(),
                                    len34,
                                    len34,
                                );
                                let l35 = i32::from(
                                    *ptr6
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v31,
                                    message: _rt::string_lift(bytes34),
                                    data: match l35 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l36 = *ptr6
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l37 = *ptr6
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len38 = l37;
                                                let bytes38 = _rt::Vec::from_raw_parts(
                                                    l36.cast(),
                                                    len38,
                                                    len38,
                                                );
                                                _rt::string_lift(bytes38)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result39
                }
            }
        }
        /// Completion capabilities - implement this to provide autocompletion
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod completion_capabilities {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type McpError = super::super::super::fastertools::mcp::types::McpError;
            pub type CompleteRequest = super::super::super::fastertools::mcp::completion::CompleteRequest;
            pub type CompleteResult = super::super::super::fastertools::mcp::completion::CompleteResult;
            #[allow(unused_unsafe, clippy::all)]
            /// Handle request for completion suggestions
            pub fn handle_complete(
                request: &CompleteRequest,
            ) -> Result<CompleteResult, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 24 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 24
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::fastertools::mcp::completion::CompleteRequest {
                        ref_: ref_0,
                        argument_name: argument_name0,
                        argument_value: argument_value0,
                        context: context0,
                        meta: meta0,
                    } = request;
                    use super::super::super::fastertools::mcp::completion::CompletionReference as V3;
                    let (result4_0, result4_1, result4_2) = match ref_0 {
                        V3::Prompt(e) => {
                            let vec1 = e;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            (0i32, ptr1.cast_mut(), len1)
                        }
                        V3::ResourceTemplate(e) => {
                            let vec2 = e;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            (1i32, ptr2.cast_mut(), len2)
                        }
                    };
                    let vec5 = argument_name0;
                    let ptr5 = vec5.as_ptr().cast::<u8>();
                    let len5 = vec5.len();
                    let vec6 = argument_value0;
                    let ptr6 = vec6.as_ptr().cast::<u8>();
                    let len6 = vec6.len();
                    let (result13_0, result13_1, result13_2, result13_3) = match context0 {
                        Some(e) => {
                            let super::super::super::fastertools::mcp::completion::CompletionContext {
                                arguments: arguments7,
                            } = e;
                            let (result12_0, result12_1, result12_2) = match arguments7 {
                                Some(e) => {
                                    let vec11 = e;
                                    let len11 = vec11.len();
                                    let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec11.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result11 = if layout11.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout11);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec11.into_iter().enumerate() {
                                        let base = result11
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t8_0, t8_1) = e;
                                            let vec9 = t8_0;
                                            let ptr9 = vec9.as_ptr().cast::<u8>();
                                            let len9 = vec9.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len9;
                                            *base.add(0).cast::<*mut u8>() = ptr9.cast_mut();
                                            let vec10 = t8_1;
                                            let ptr10 = vec10.as_ptr().cast::<u8>();
                                            let len10 = vec10.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len10;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr10.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result11, layout11)]);
                                    (1i32, result11, len11)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (1i32, result12_0, result12_1, result12_2)
                        }
                        None => (0i32, 0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result18_0, result18_1, result18_2) = match meta0 {
                        Some(e) => {
                            let vec17 = e;
                            let len17 = vec17.len();
                            let layout17 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec17.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result17 = if layout17.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout17).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout17);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec17.into_iter().enumerate() {
                                let base = result17
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t14_0, t14_1) = e;
                                    let vec15 = t14_0;
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len15;
                                    *base.add(0).cast::<*mut u8>() = ptr15.cast_mut();
                                    let vec16 = t14_1;
                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                    let len16 = vec16.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len16;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr16.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result17, layout17)]);
                            (1i32, result17, len17)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr19 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "fastertools:mcp/completion-capabilities@0.1.10"
                    )]
                    unsafe extern "C" {
                        #[link_name = "handle-complete"]
                        fn wit_import20(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import20(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import20(
                            result4_0,
                            result4_1,
                            result4_2,
                            ptr5.cast_mut(),
                            len5,
                            ptr6.cast_mut(),
                            len6,
                            result13_0,
                            result13_1,
                            result13_2,
                            result13_3,
                            result18_0,
                            result18_1,
                            result18_2,
                            ptr19,
                        )
                    };
                    let l21 = i32::from(*ptr19.add(0).cast::<u8>());
                    let result52 = match l21 {
                        0 => {
                            let e = {
                                let l22 = *ptr19.add(8).cast::<*mut u8>();
                                let l23 = *ptr19
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base27 = l22;
                                let len27 = l23;
                                let mut result27 = _rt::Vec::with_capacity(len27);
                                for i in 0..len27 {
                                    let base = base27
                                        .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                    let e27 = {
                                        let l24 = *base.add(0).cast::<*mut u8>();
                                        let l25 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len26 = l25;
                                        let bytes26 = _rt::Vec::from_raw_parts(
                                            l24.cast(),
                                            len26,
                                            len26,
                                        );
                                        _rt::string_lift(bytes26)
                                    };
                                    result27.push(e27);
                                }
                                _rt::cabi_dealloc(
                                    base27,
                                    len27 * (2 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l28 = i32::from(
                                    *ptr19
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l30 = i32::from(
                                    *ptr19
                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l32 = i32::from(
                                    *ptr19
                                        .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::completion::CompleteResult {
                                    values: result27,
                                    total: match l28 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l29 = *ptr19
                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>();
                                                l29
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    has_more: match l30 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l31 = i32::from(
                                                    *ptr19
                                                        .add(25 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                _rt::bool_lift(l31 as u8)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    meta: match l32 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l33 = *ptr19
                                                    .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l34 = *ptr19
                                                    .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base41 = l33;
                                                let len41 = l34;
                                                let mut result41 = _rt::Vec::with_capacity(len41);
                                                for i in 0..len41 {
                                                    let base = base41
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e41 = {
                                                        let l35 = *base.add(0).cast::<*mut u8>();
                                                        let l36 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len37 = l36;
                                                        let bytes37 = _rt::Vec::from_raw_parts(
                                                            l35.cast(),
                                                            len37,
                                                            len37,
                                                        );
                                                        let l38 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l39 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len40 = l39;
                                                        let bytes40 = _rt::Vec::from_raw_parts(
                                                            l38.cast(),
                                                            len40,
                                                            len40,
                                                        );
                                                        (_rt::string_lift(bytes37), _rt::string_lift(bytes40))
                                                    };
                                                    result41.push(e41);
                                                }
                                                _rt::cabi_dealloc(
                                                    base41,
                                                    len41 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result41
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l42 = i32::from(*ptr19.add(8).cast::<u8>());
                                use super::super::super::fastertools::mcp::types::ErrorCode as V44;
                                let v44 = match l42 {
                                    0 => V44::ParseError,
                                    1 => V44::InvalidRequest,
                                    2 => V44::MethodNotFound,
                                    3 => V44::InvalidParams,
                                    4 => V44::InternalError,
                                    5 => V44::ResourceNotFound,
                                    6 => V44::ToolNotFound,
                                    7 => V44::PromptNotFound,
                                    8 => V44::Unauthorized,
                                    9 => V44::RateLimited,
                                    10 => V44::Timeout,
                                    11 => V44::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e44 = {
                                            let l43 = *ptr19.add(12).cast::<i32>();
                                            l43
                                        };
                                        V44::CustomCode(e44)
                                    }
                                };
                                let l45 = *ptr19.add(16).cast::<*mut u8>();
                                let l46 = *ptr19
                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len47 = l46;
                                let bytes47 = _rt::Vec::from_raw_parts(
                                    l45.cast(),
                                    len47,
                                    len47,
                                );
                                let l48 = i32::from(
                                    *ptr19
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v44,
                                    message: _rt::string_lift(bytes47),
                                    data: match l48 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l49 = *ptr19
                                                    .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l50 = *ptr19
                                                    .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len51 = l50;
                                                let bytes51 = _rt::Vec::from_raw_parts(
                                                    l49.cast(),
                                                    len51,
                                                    len51,
                                                );
                                                _rt::string_lift(bytes51)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result52
                }
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub use alloc_crate::alloc;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    extern crate alloc as alloc_crate;
}
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:fastertools:mcp@0.1.10:full-transport:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 9208] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xf3F\x01A\x02\x01AH\x01\
B;\x01m\x02\x04user\x09assistant\x04\0\x04role\x03\0\0\x01s\x04\0\x0ajson-value\x03\
\0\x02\x01o\x02ss\x01p\x04\x04\0\x0bmeta-fields\x03\0\x05\x01p\x01\x01k\x07\x01k\
u\x01ks\x01r\x03\x08audience\x08\x08priority\x09\x0dlast-modified\x0a\x04\0\x0ba\
nnotations\x03\0\x0b\x01r\x02\x04names\x05title\x0a\x04\0\x0dbase-metadata\x03\0\
\x0d\x01k\x0c\x01k\x06\x01r\x03\x04texts\x0bannotations\x0f\x04meta\x10\x04\0\x0c\
text-content\x03\0\x11\x01p}\x01r\x04\x04data\x13\x09mime-types\x0bannotations\x0f\
\x04meta\x10\x04\0\x0dimage-content\x03\0\x14\x01r\x04\x04data\x13\x09mime-types\
\x0bannotations\x0f\x04meta\x10\x04\0\x0daudio-content\x03\0\x16\x01kw\x01r\x08\x03\
uris\x04names\x05title\x0a\x0bdescription\x0a\x09mime-type\x0a\x04size\x18\x0ban\
notations\x0f\x04meta\x10\x04\0\x0dresource-link\x03\0\x19\x01r\x04\x03uris\x09m\
ime-type\x0a\x04texts\x04meta\x10\x04\0\x16text-resource-contents\x03\0\x1b\x01r\
\x04\x03uris\x09mime-type\x0a\x04blob\x13\x04meta\x10\x04\0\x16blob-resource-con\
tents\x03\0\x1d\x01q\x02\x04text\x01\x1c\0\x04blob\x01\x1e\0\x04\0\x11resource-c\
ontents\x03\0\x1f\x01r\x03\x08contents\x20\x0bannotations\x0f\x04meta\x10\x04\0\x11\
embedded-resource\x03\0!\x01q\x05\x04text\x01\x12\0\x05image\x01\x15\0\x05audio\x01\
\x17\0\x0dresource-link\x01\x1a\0\x11embedded-resource\x01\"\0\x04\0\x0dcontent-\
block\x03\0#\x01s\x04\0\x0bjson-schema\x03\0%\x01q\x0d\x0bparse-error\0\0\x0finv\
alid-request\0\0\x10method-not-found\0\0\x0einvalid-params\0\0\x0einternal-error\
\0\0\x12resource-not-found\0\0\x0etool-not-found\0\0\x10prompt-not-found\0\0\x0c\
unauthorized\0\0\x0crate-limited\0\0\x07timeout\0\0\x09cancelled\0\0\x0bcustom-c\
ode\x01z\0\x04\0\x0aerror-code\x03\0'\x01r\x03\x04code(\x07messages\x04data\x0a\x04\
\0\x09mcp-error\x03\0)\x01s\x04\0\x06cursor\x03\0+\x01s\x04\0\x0eprogress-token\x03\
\0-\x01q\x02\x03str\x01s\0\x03num\x01x\0\x04\0\x0arequest-id\x03\0/\x01m\x03\x04\
user\x09assistant\x06system\x04\0\x0cmessage-role\x03\01\x01r\x01\x04name\x0a\x04\
\0\x0amodel-hint\x03\03\x01p4\x01k5\x01r\x04\x05hints6\x0dcost-priority\x09\x0es\
peed-priority\x09\x15intelligence-priority\x09\x04\0\x11model-preferences\x03\07\
\x01r\x04\x0curi-templates\x04names\x0bdescription\x0a\x09mime-type\x0a\x04\0\x11\
resource-template\x03\09\x03\0\x1cfastertools:mcp/types@0.1.10\x05\0\x02\x03\0\0\
\x09mcp-error\x02\x03\0\0\x0bmeta-fields\x01B'\x02\x03\x02\x01\x01\x04\0\x09mcp-\
error\x03\0\0\x02\x03\x02\x01\x02\x04\0\x0bmeta-fields\x03\0\x02\x01m\x04\x0dmcp\
-v20241105\x0dmcp-v20250326\x0dmcp-v20250618\x0edraft-v2025-v3\x04\0\x10protocol\
-version\x03\0\x04\x01ks\x01r\x03\x04names\x07versions\x05title\x06\x04\0\x13imp\
lementation-info\x03\0\x07\x01k\x7f\x01r\x01\x0clist-changed\x09\x04\0\x10roots-\
capability\x03\0\x0a\x01k\x03\x01k\x0b\x01r\x04\x0cexperimental\x0c\x05roots\x0d\
\x08sampling\x09\x0belicitation\x09\x04\0\x13client-capabilities\x03\0\x0e\x01r\x01\
\x0clist-changed\x09\x04\0\x12prompts-capability\x03\0\x10\x01r\x02\x09subscribe\
\x09\x0clist-changed\x09\x04\0\x14resources-capability\x03\0\x12\x01r\x01\x0clis\
t-changed\x09\x04\0\x10tools-capability\x03\0\x14\x01k\x11\x01k\x13\x01k\x15\x01\
r\x06\x0cexperimental\x0c\x07logging\x09\x0bcompletions\x09\x07prompts\x16\x09re\
sources\x17\x05tools\x18\x04\0\x13server-capabilities\x03\0\x19\x01r\x04\x10prot\
ocol-version\x05\x0ccapabilities\x0f\x0bclient-info\x08\x04meta\x0c\x04\0\x12ini\
tialize-request\x03\0\x1b\x01r\x05\x10protocol-version\x05\x0ccapabilities\x1a\x0b\
server-info\x08\x0cinstructions\x06\x04meta\x0c\x04\0\x13initialize-response\x03\
\0\x1d\x01j\x01\x1e\x01\x01\x01@\x01\x07request\x1c\0\x1f\x04\0\x0ainitialize\x01\
\x20\x01j\0\x01\x01\x01@\0\0!\x04\0\x0binitialized\x01\"\x04\0\x04ping\x01\"\x04\
\0\x08shutdown\x01\"\x03\0\x1efastertools:mcp/session@0.1.10\x05\x03\x02\x03\0\0\
\x0eprogress-token\x02\x03\0\0\x0arequest-id\x01B'\x02\x03\x02\x01\x01\x04\0\x09\
mcp-error\x03\0\0\x02\x03\x02\x01\x02\x04\0\x0bmeta-fields\x03\0\x02\x02\x03\x02\
\x01\x04\x04\0\x0eprogress-token\x03\0\x04\x02\x03\x02\x01\x05\x04\0\x0arequest-\
id\x03\0\x06\x01ku\x01ks\x01k\x03\x01r\x05\x0eprogress-token\x05\x08progressu\x05\
total\x08\x07message\x09\x04meta\x0a\x04\0\x15progress-notification\x03\0\x0b\x01\
r\x03\x0arequest-id\x07\x06reason\x09\x04meta\x0a\x04\0\x16cancelled-notificatio\
n\x03\0\x0d\x01r\x01\x04meta\x0a\x04\0\x12tools-list-changed\x03\0\x0f\x01r\x01\x04\
meta\x0a\x04\0\x16resources-list-changed\x03\0\x11\x01r\x01\x04meta\x0a\x04\0\x14\
prompts-list-changed\x03\0\x13\x01r\x02\x03uris\x04meta\x0a\x04\0\x10resource-up\
dated\x03\0\x15\x01r\x01\x04meta\x0a\x04\0\x12roots-list-changed\x03\0\x17\x01m\x08\
\x05debug\x04info\x06notice\x07warning\x05error\x08critical\x05alert\x09emergenc\
y\x04\0\x09log-level\x03\0\x19\x01o\x02ss\x01p\x1b\x01k\x1c\x01r\x05\x05level\x1a\
\x06logger\x09\x07messages\x04data\x1d\x04meta\x0a\x04\0\x0blog-message\x03\0\x1e\
\x01q\x08\x08progress\x01\x0c\0\x09cancelled\x01\x0e\0\x12tools-list-changed\x01\
\x10\0\x16resources-list-changed\x01\x12\0\x14prompts-list-changed\x01\x14\0\x10\
resource-updated\x01\x16\0\x12roots-list-changed\x01\x18\0\x0blog-message\x01\x1f\
\0\x04\0\x0cnotification\x03\0\x20\x01j\0\x01\x01\x01@\x01\x0cnotification!\0\"\x04\
\0\x11send-notification\x01#\x01@\x01\x05level\x1a\0\"\x04\0\x0dset-log-level\x01\
$\x03\0$fastertools:mcp/notifications@0.1.10\x05\x06\x02\x03\0\0\x0dcontent-bloc\
k\x02\x03\0\0\x0ajson-value\x02\x03\0\0\x0bjson-schema\x02\x03\0\0\x0dbase-metad\
ata\x02\x03\0\0\x06cursor\x01B&\x02\x03\x02\x01\x07\x04\0\x0dcontent-block\x03\0\
\0\x02\x03\x02\x01\x08\x04\0\x0ajson-value\x03\0\x02\x02\x03\x02\x01\x09\x04\0\x0b\
json-schema\x03\0\x04\x02\x03\x02\x01\x01\x04\0\x09mcp-error\x03\0\x06\x02\x03\x02\
\x01\x0a\x04\0\x0dbase-metadata\x03\0\x08\x02\x03\x02\x01\x02\x04\0\x0bmeta-fiel\
ds\x03\0\x0a\x02\x03\x02\x01\x0b\x04\0\x06cursor\x03\0\x0c\x02\x03\x02\x01\x04\x04\
\0\x0eprogress-token\x03\0\x0e\x01ks\x01k\x7f\x01r\x05\x05title\x10\x0eread-only\
-hint\x11\x10destructive-hint\x11\x0fidempotent-hint\x11\x0fopen-world-hint\x11\x04\
\0\x10tool-annotations\x03\0\x12\x01k\x05\x01k\x13\x01k\x0b\x01r\x06\x04base\x09\
\x0bdescription\x10\x0cinput-schema\x05\x0doutput-schema\x14\x0bannotations\x15\x04\
meta\x16\x04\0\x04tool\x03\0\x17\x01p\x01\x01k\x03\x01r\x04\x07content\x19\x12st\
ructured-content\x1a\x08is-error\x11\x04meta\x16\x04\0\x0btool-result\x03\0\x1b\x01\
k\x0d\x01k\x0f\x01r\x03\x06cursor\x1d\x0eprogress-token\x1e\x04meta\x16\x04\0\x12\
list-tools-request\x03\0\x1f\x01p\x18\x01r\x03\x05tools!\x0bnext-cursor\x1d\x04m\
eta\x16\x04\0\x13list-tools-response\x03\0\"\x01r\x04\x04names\x09arguments\x1a\x0e\
progress-token\x1e\x04meta\x16\x04\0\x11call-tool-request\x03\0$\x03\0\x1cfaster\
tools:mcp/tools@0.1.10\x05\x0c\x02\x03\0\0\x0bannotations\x02\x03\0\0\x11resourc\
e-contents\x02\x03\0\0\x11resource-template\x01B+\x02\x03\x02\x01\x01\x04\0\x09m\
cp-error\x03\0\0\x02\x03\x02\x01\x0a\x04\0\x0dbase-metadata\x03\0\x02\x02\x03\x02\
\x01\x0d\x04\0\x0bannotations\x03\0\x04\x02\x03\x02\x01\x02\x04\0\x0bmeta-fields\
\x03\0\x06\x02\x03\x02\x01\x0b\x04\0\x06cursor\x03\0\x08\x02\x03\x02\x01\x0e\x04\
\0\x11resource-contents\x03\0\x0a\x02\x03\x02\x01\x04\x04\0\x0eprogress-token\x03\
\0\x0c\x02\x03\x02\x01\x0f\x04\0\x11resource-template\x03\0\x0e\x01ks\x01kw\x01k\
\x05\x01k\x07\x01r\x07\x04base\x03\x03uris\x0bdescription\x10\x09mime-type\x10\x04\
size\x11\x0bannotations\x12\x04meta\x13\x04\0\x0cmcp-resource\x03\0\x14\x01k\x09\
\x01k\x0d\x01r\x03\x06cursor\x16\x0eprogress-token\x17\x04meta\x13\x04\0\x16list\
-resources-request\x03\0\x18\x01p\x15\x01r\x03\x09resources\x1a\x0bnext-cursor\x16\
\x04meta\x13\x04\0\x17list-resources-response\x03\0\x1b\x01r\x03\x06cursor\x16\x0e\
progress-token\x17\x04meta\x13\x04\0\x16list-templates-request\x03\0\x1d\x01p\x0f\
\x01r\x03\x09templates\x1f\x0bnext-cursor\x16\x04meta\x13\x04\0\x17list-template\
s-response\x03\0\x20\x01r\x03\x03uris\x0eprogress-token\x17\x04meta\x13\x04\0\x15\
read-resource-request\x03\0\"\x01p\x0b\x01r\x02\x08contents$\x04meta\x13\x04\0\x16\
read-resource-response\x03\0%\x01r\x02\x03uris\x04meta\x13\x04\0\x11subscribe-re\
quest\x03\0'\x01r\x02\x03uris\x04meta\x13\x04\0\x13unsubscribe-request\x03\0)\x03\
\0\x20fastertools:mcp/resources@0.1.10\x05\x10\x02\x03\0\0\x0cmessage-role\x01B(\
\x02\x03\x02\x01\x11\x04\0\x0cmessage-role\x03\0\0\x02\x03\x02\x01\x07\x04\0\x0d\
content-block\x03\0\x02\x02\x03\x02\x01\x01\x04\0\x09mcp-error\x03\0\x04\x02\x03\
\x02\x01\x0a\x04\0\x0dbase-metadata\x03\0\x06\x02\x03\x02\x01\x02\x04\0\x0bmeta-\
fields\x03\0\x08\x02\x03\x02\x01\x0b\x04\0\x06cursor\x03\0\x0a\x02\x03\x02\x01\x04\
\x04\0\x0eprogress-token\x03\0\x0c\x01ks\x01k\x7f\x01r\x03\x04base\x07\x0bdescri\
ption\x0e\x08required\x0f\x04\0\x0fprompt-argument\x03\0\x10\x01p\x11\x01k\x12\x01\
k\x09\x01r\x04\x04base\x07\x0bdescription\x0e\x09arguments\x13\x04meta\x14\x04\0\
\x06prompt\x03\0\x15\x01r\x02\x04role\x01\x07content\x03\x04\0\x0eprompt-message\
\x03\0\x17\x01k\x0b\x01k\x0d\x01r\x03\x06cursor\x19\x0eprogress-token\x1a\x04met\
a\x14\x04\0\x14list-prompts-request\x03\0\x1b\x01p\x16\x01r\x03\x07prompts\x1d\x0b\
next-cursor\x19\x04meta\x14\x04\0\x15list-prompts-response\x03\0\x1e\x01o\x02ss\x01\
p\x20\x01k!\x01r\x04\x04names\x09arguments\"\x0eprogress-token\x1a\x04meta\x14\x04\
\0\x12get-prompt-request\x03\0#\x01p\x18\x01r\x03\x0bdescription\x0e\x08messages\
%\x04meta\x14\x04\0\x13get-prompt-response\x03\0&\x03\0\x1efastertools:mcp/promp\
ts@0.1.10\x05\x12\x02\x03\0\0\x11model-preferences\x01B\x1a\x02\x03\x02\x01\x01\x04\
\0\x09mcp-error\x03\0\0\x02\x03\x02\x01\x07\x04\0\x0dcontent-block\x03\0\x02\x02\
\x03\x02\x01\x11\x04\0\x0cmessage-role\x03\0\x04\x02\x03\x02\x01\x13\x04\0\x11mo\
del-preferences\x03\0\x06\x02\x03\x02\x01\x02\x04\0\x0bmeta-fields\x03\0\x08\x01\
r\x02\x04role\x05\x07content\x03\x04\0\x10sampling-message\x03\0\x0a\x01p\x0b\x01\
k\x07\x01ks\x01ku\x01ps\x01k\x10\x01k\x09\x01r\x08\x08messages\x0c\x11model-pref\
erences\x0d\x0dsystem-prompt\x0e\x0finclude-context\x0e\x0btemperature\x0f\x0ama\
x-tokensz\x0estop-sequences\x11\x08metadata\x12\x04\0\x16create-message-request\x03\
\0\x13\x01r\x05\x04role\x05\x07content\x03\x05models\x0bstop-reason\x0e\x04meta\x12\
\x04\0\x15create-message-result\x03\0\x15\x01j\x01\x16\x01\x01\x01@\x01\x07reque\
st\x14\0\x17\x04\0\x0ecreate-message\x01\x18\x03\0\x1ffastertools:mcp/sampling@0\
.1.10\x05\x14\x01B\x14\x02\x03\x02\x01\x01\x04\0\x09mcp-error\x03\0\0\x02\x03\x02\
\x01\x09\x04\0\x0bjson-schema\x03\0\x02\x02\x03\x02\x01\x08\x04\0\x0ajson-value\x03\
\0\x04\x02\x03\x02\x01\x02\x04\0\x0bmeta-fields\x03\0\x06\x01k\x07\x01r\x03\x07m\
essages\x06schema\x03\x04meta\x08\x04\0\x0eelicit-request\x03\0\x09\x01m\x03\x06\
accept\x07decline\x06cancel\x04\0\x0delicit-action\x03\0\x0b\x01k\x05\x01ks\x01r\
\x04\x06action\x0c\x04data\x0d\x07message\x0e\x04meta\x08\x04\0\x0delicit-result\
\x03\0\x0f\x01j\x01\x10\x01\x01\x01@\x01\x07request\x0a\0\x11\x04\0\x06elicit\x01\
\x12\x03\0\"fastertools:mcp/elicitation@0.1.10\x05\x15\x01B\x10\x02\x03\x02\x01\x01\
\x04\0\x09mcp-error\x03\0\0\x02\x03\x02\x01\x02\x04\0\x0bmeta-fields\x03\0\x02\x01\
ks\x01r\x02\x03uris\x04name\x04\x04\0\x04root\x03\0\x05\x01k\x03\x01r\x01\x04met\
a\x07\x04\0\x12list-roots-request\x03\0\x08\x01p\x06\x01r\x02\x05roots\x0a\x04me\
ta\x07\x04\0\x11list-roots-result\x03\0\x0b\x01j\x01\x0c\x01\x01\x01@\x01\x07req\
uest\x09\0\x0d\x04\0\x0alist-roots\x01\x0e\x03\0\x1cfastertools:mcp/roots@0.1.10\
\x05\x16\x01B\x17\x02\x03\x02\x01\x01\x04\0\x09mcp-error\x03\0\0\x02\x03\x02\x01\
\x02\x04\0\x0bmeta-fields\x03\0\x02\x01q\x02\x06prompt\x01s\0\x11resource-templa\
te\x01s\0\x04\0\x14completion-reference\x03\0\x04\x01o\x02ss\x01p\x06\x01k\x07\x01\
r\x01\x09arguments\x08\x04\0\x12completion-context\x03\0\x09\x01k\x0a\x01k\x03\x01\
r\x05\x03ref\x05\x0dargument-names\x0eargument-values\x07context\x0b\x04meta\x0c\
\x04\0\x10complete-request\x03\0\x0d\x01ps\x01kx\x01k\x7f\x01r\x04\x06values\x0f\
\x05total\x10\x08has-more\x11\x04meta\x0c\x04\0\x0fcomplete-result\x03\0\x12\x01\
j\x01\x13\x01\x01\x01@\x01\x07request\x0e\0\x14\x04\0\x08complete\x01\x15\x03\0!\
fastertools:mcp/completion@0.1.10\x05\x17\x02\x03\0\x03\x12list-tools-request\x02\
\x03\0\x03\x13list-tools-response\x02\x03\0\x03\x11call-tool-request\x02\x03\0\x03\
\x0btool-result\x01B\x10\x02\x03\x02\x01\x01\x04\0\x09mcp-error\x03\0\0\x02\x03\x02\
\x01\x18\x04\0\x12list-tools-request\x03\0\x02\x02\x03\x02\x01\x19\x04\0\x13list\
-tools-response\x03\0\x04\x02\x03\x02\x01\x1a\x04\0\x11call-tool-request\x03\0\x06\
\x02\x03\x02\x01\x1b\x04\0\x0btool-result\x03\0\x08\x01j\x01\x05\x01\x01\x01@\x01\
\x07request\x03\0\x0a\x04\0\x11handle-list-tools\x01\x0b\x01j\x01\x09\x01\x01\x01\
@\x01\x07request\x07\0\x0c\x04\0\x10handle-call-tool\x01\x0d\x03\0)fastertools:m\
cp/tools-capabilities@0.1.10\x05\x1c\x02\x03\0\x04\x16list-resources-request\x02\
\x03\0\x04\x17list-resources-response\x02\x03\0\x04\x16list-templates-request\x02\
\x03\0\x04\x17list-templates-response\x02\x03\0\x04\x15read-resource-request\x02\
\x03\0\x04\x16read-resource-response\x02\x03\0\x04\x11subscribe-request\x02\x03\0\
\x04\x13unsubscribe-request\x01B\x20\x02\x03\x02\x01\x01\x04\0\x09mcp-error\x03\0\
\0\x02\x03\x02\x01\x1d\x04\0\x16list-resources-request\x03\0\x02\x02\x03\x02\x01\
\x1e\x04\0\x17list-resources-response\x03\0\x04\x02\x03\x02\x01\x1f\x04\0\x16lis\
t-templates-request\x03\0\x06\x02\x03\x02\x01\x20\x04\0\x17list-templates-respon\
se\x03\0\x08\x02\x03\x02\x01!\x04\0\x15read-resource-request\x03\0\x0a\x02\x03\x02\
\x01\"\x04\0\x16read-resource-response\x03\0\x0c\x02\x03\x02\x01#\x04\0\x11subsc\
ribe-request\x03\0\x0e\x02\x03\x02\x01$\x04\0\x13unsubscribe-request\x03\0\x10\x01\
j\x01\x05\x01\x01\x01@\x01\x07request\x03\0\x12\x04\0\x15handle-list-resources\x01\
\x13\x01j\x01\x09\x01\x01\x01@\x01\x07request\x07\0\x14\x04\0\x1ehandle-list-res\
ource-templates\x01\x15\x01j\x01\x0d\x01\x01\x01@\x01\x07request\x0b\0\x16\x04\0\
\x14handle-read-resource\x01\x17\x01j\0\x01\x01\x01@\x01\x07request\x0f\0\x18\x04\
\0\x19handle-subscribe-resource\x01\x19\x01@\x01\x07request\x11\0\x18\x04\0\x1bh\
andle-unsubscribe-resource\x01\x1a\x03\0-fastertools:mcp/resources-capabilities@\
0.1.10\x05%\x02\x03\0\x05\x14list-prompts-request\x02\x03\0\x05\x15list-prompts-\
response\x02\x03\0\x05\x12get-prompt-request\x02\x03\0\x05\x13get-prompt-respons\
e\x01B\x10\x02\x03\x02\x01\x01\x04\0\x09mcp-error\x03\0\0\x02\x03\x02\x01&\x04\0\
\x14list-prompts-request\x03\0\x02\x02\x03\x02\x01'\x04\0\x15list-prompts-respon\
se\x03\0\x04\x02\x03\x02\x01(\x04\0\x12get-prompt-request\x03\0\x06\x02\x03\x02\x01\
)\x04\0\x13get-prompt-response\x03\0\x08\x01j\x01\x05\x01\x01\x01@\x01\x07reques\
t\x03\0\x0a\x04\0\x13handle-list-prompts\x01\x0b\x01j\x01\x09\x01\x01\x01@\x01\x07\
request\x07\0\x0c\x04\0\x11handle-get-prompt\x01\x0d\x03\0+fastertools:mcp/promp\
ts-capabilities@0.1.10\x05*\x02\x03\0\x06\x16create-message-request\x02\x03\0\x06\
\x15create-message-result\x01B\x09\x02\x03\x02\x01\x01\x04\0\x09mcp-error\x03\0\0\
\x02\x03\x02\x01+\x04\0\x16create-message-request\x03\0\x02\x02\x03\x02\x01,\x04\
\0\x15create-message-result\x03\0\x04\x01j\x01\x05\x01\x01\x01@\x01\x07request\x03\
\0\x06\x04\0\x15handle-create-message\x01\x07\x03\0,fastertools:mcp/sampling-cap\
abilities@0.1.10\x05-\x02\x03\0\x07\x0eelicit-request\x02\x03\0\x07\x0delicit-re\
sult\x01B\x09\x02\x03\x02\x01\x01\x04\0\x09mcp-error\x03\0\0\x02\x03\x02\x01.\x04\
\0\x0eelicit-request\x03\0\x02\x02\x03\x02\x01/\x04\0\x0delicit-result\x03\0\x04\
\x01j\x01\x05\x01\x01\x01@\x01\x07request\x03\0\x06\x04\0\x0dhandle-elicit\x01\x07\
\x03\0/fastertools:mcp/elicitation-capabilities@0.1.10\x050\x02\x03\0\x08\x12lis\
t-roots-request\x02\x03\0\x08\x11list-roots-result\x01B\x09\x02\x03\x02\x01\x01\x04\
\0\x09mcp-error\x03\0\0\x02\x03\x02\x011\x04\0\x12list-roots-request\x03\0\x02\x02\
\x03\x02\x012\x04\0\x11list-roots-result\x03\0\x04\x01j\x01\x05\x01\x01\x01@\x01\
\x07request\x03\0\x06\x04\0\x11handle-list-roots\x01\x07\x03\0)fastertools:mcp/r\
oots-capabilities@0.1.10\x053\x02\x03\0\x09\x10complete-request\x02\x03\0\x09\x0f\
complete-result\x01B\x09\x02\x03\x02\x01\x01\x04\0\x09mcp-error\x03\0\0\x02\x03\x02\
\x014\x04\0\x10complete-request\x03\0\x02\x02\x03\x02\x015\x04\0\x0fcomplete-res\
ult\x03\0\x04\x01j\x01\x05\x01\x01\x01@\x01\x07request\x03\0\x06\x04\0\x0fhandle\
-complete\x01\x07\x03\0.fastertools:mcp/completion-capabilities@0.1.10\x056\x04\0\
%fastertools:mcp/full-transport@0.1.10\x04\0\x0b\x14\x01\0\x0efull-transport\x03\
\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-\
bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
