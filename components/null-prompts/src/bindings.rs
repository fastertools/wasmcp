// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
//   * additional derives ["Clone"]
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod fastertools {
    pub mod mcp {
        /// Core type definitions for the Model Context Protocol
        /// These types are used across all MCP interfaces
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Role in a conversation
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum Role {
                User,
                Assistant,
            }
            impl ::core::fmt::Debug for Role {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Role::User => f.debug_tuple("Role::User").finish(),
                        Role::Assistant => f.debug_tuple("Role::Assistant").finish(),
                    }
                }
            }
            impl Role {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> Role {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => Role::User,
                        1 => Role::Assistant,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Extensible metadata fields for forward compatibility
            pub type MetaFields = _rt::Vec<(_rt::String, _rt::String)>;
            /// Annotations provide hints to clients about how to handle data
            #[derive(Clone)]
            pub struct Annotations {
                /// Who this data is intended for
                pub audience: Option<_rt::Vec<Role>>,
                /// Priority from 0.0 (least) to 1.0 (most important)
                pub priority: Option<f64>,
                /// ISO 8601 timestamp of last modification
                pub last_modified: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Annotations {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Annotations")
                        .field("audience", &self.audience)
                        .field("priority", &self.priority)
                        .field("last-modified", &self.last_modified)
                        .finish()
                }
            }
            /// Base metadata pattern used throughout the protocol
            #[derive(Clone)]
            pub struct BaseMetadata {
                /// Programmatic identifier
                pub name: _rt::String,
                /// Human-readable display name
                pub title: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for BaseMetadata {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BaseMetadata")
                        .field("name", &self.name)
                        .field("title", &self.title)
                        .finish()
                }
            }
            /// Text content with optional annotations
            #[derive(Clone)]
            pub struct TextContent {
                pub text: _rt::String,
                pub annotations: Option<Annotations>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for TextContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextContent")
                        .field("text", &self.text)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Image content as binary data
            #[derive(Clone)]
            pub struct ImageContent {
                /// Base64-encoded image data
                pub data: _rt::Vec<u8>,
                /// MIME type (e.g., "image/png", "image/jpeg")
                pub mime_type: _rt::String,
                pub annotations: Option<Annotations>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ImageContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ImageContent")
                        .field("data", &self.data)
                        .field("mime-type", &self.mime_type)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Audio content as binary data
            #[derive(Clone)]
            pub struct AudioContent {
                /// Base64-encoded audio data
                pub data: _rt::Vec<u8>,
                /// MIME type (e.g., "audio/wav", "audio/mp3")
                pub mime_type: _rt::String,
                pub annotations: Option<Annotations>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for AudioContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AudioContent")
                        .field("data", &self.data)
                        .field("mime-type", &self.mime_type)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Reference to a resource
            #[derive(Clone)]
            pub struct ResourceLink {
                pub uri: _rt::String,
                pub name: _rt::String,
                pub description: Option<_rt::String>,
                pub mime_type: Option<_rt::String>,
                pub size: Option<u64>,
                pub annotations: Option<Annotations>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ResourceLink {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourceLink")
                        .field("uri", &self.uri)
                        .field("name", &self.name)
                        .field("description", &self.description)
                        .field("mime-type", &self.mime_type)
                        .field("size", &self.size)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct TextResourceContents {
                pub uri: _rt::String,
                pub mime_type: Option<_rt::String>,
                pub text: _rt::String,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for TextResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextResourceContents")
                        .field("uri", &self.uri)
                        .field("mime-type", &self.mime_type)
                        .field("text", &self.text)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct BlobResourceContents {
                pub uri: _rt::String,
                pub mime_type: Option<_rt::String>,
                /// Binary data
                pub blob: _rt::Vec<u8>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for BlobResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BlobResourceContents")
                        .field("uri", &self.uri)
                        .field("mime-type", &self.mime_type)
                        .field("blob", &self.blob)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Resource contents can be either text or binary
            #[derive(Clone)]
            pub enum ResourceContents {
                Text(TextResourceContents),
                Blob(BlobResourceContents),
            }
            impl ::core::fmt::Debug for ResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ResourceContents::Text(e) => {
                            f.debug_tuple("ResourceContents::Text").field(e).finish()
                        }
                        ResourceContents::Blob(e) => {
                            f.debug_tuple("ResourceContents::Blob").field(e).finish()
                        }
                    }
                }
            }
            /// Embedded resource content
            #[derive(Clone)]
            pub struct EmbeddedResource {
                pub contents: ResourceContents,
                pub annotations: Option<Annotations>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for EmbeddedResource {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EmbeddedResource")
                        .field("contents", &self.contents)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Content block types that can be included in messages
            #[derive(Clone)]
            pub enum ContentBlock {
                Text(TextContent),
                Image(ImageContent),
                Audio(AudioContent),
                ResourceLink(ResourceLink),
                EmbeddedResource(EmbeddedResource),
            }
            impl ::core::fmt::Debug for ContentBlock {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ContentBlock::Text(e) => {
                            f.debug_tuple("ContentBlock::Text").field(e).finish()
                        }
                        ContentBlock::Image(e) => {
                            f.debug_tuple("ContentBlock::Image").field(e).finish()
                        }
                        ContentBlock::Audio(e) => {
                            f.debug_tuple("ContentBlock::Audio").field(e).finish()
                        }
                        ContentBlock::ResourceLink(e) => {
                            f.debug_tuple("ContentBlock::ResourceLink").field(e).finish()
                        }
                        ContentBlock::EmbeddedResource(e) => {
                            f.debug_tuple("ContentBlock::EmbeddedResource")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            /// JSON value representation as a string
            /// WIT doesn't support recursive types, so we serialize JSON as strings
            /// The string should contain valid JSON that can be parsed/serialized
            pub type JsonValue = _rt::String;
            /// Standard JSON-RPC and MCP error codes
            #[derive(Clone, Copy)]
            pub enum ErrorCode {
                /// JSON-RPC standard errors
                ParseError,
                /// -32700
                InvalidRequest,
                /// -32600
                MethodNotFound,
                /// -32601
                InvalidParams,
                /// -32602
                InternalError,
                /// -32603
                /// MCP-specific errors
                ResourceNotFound,
                ToolNotFound,
                PromptNotFound,
                Unauthorized,
                RateLimited,
                Timeout,
                Cancelled,
                /// Custom error with specific code
                CustomCode(i32),
            }
            impl ::core::fmt::Debug for ErrorCode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ErrorCode::ParseError => {
                            f.debug_tuple("ErrorCode::ParseError").finish()
                        }
                        ErrorCode::InvalidRequest => {
                            f.debug_tuple("ErrorCode::InvalidRequest").finish()
                        }
                        ErrorCode::MethodNotFound => {
                            f.debug_tuple("ErrorCode::MethodNotFound").finish()
                        }
                        ErrorCode::InvalidParams => {
                            f.debug_tuple("ErrorCode::InvalidParams").finish()
                        }
                        ErrorCode::InternalError => {
                            f.debug_tuple("ErrorCode::InternalError").finish()
                        }
                        ErrorCode::ResourceNotFound => {
                            f.debug_tuple("ErrorCode::ResourceNotFound").finish()
                        }
                        ErrorCode::ToolNotFound => {
                            f.debug_tuple("ErrorCode::ToolNotFound").finish()
                        }
                        ErrorCode::PromptNotFound => {
                            f.debug_tuple("ErrorCode::PromptNotFound").finish()
                        }
                        ErrorCode::Unauthorized => {
                            f.debug_tuple("ErrorCode::Unauthorized").finish()
                        }
                        ErrorCode::RateLimited => {
                            f.debug_tuple("ErrorCode::RateLimited").finish()
                        }
                        ErrorCode::Timeout => {
                            f.debug_tuple("ErrorCode::Timeout").finish()
                        }
                        ErrorCode::Cancelled => {
                            f.debug_tuple("ErrorCode::Cancelled").finish()
                        }
                        ErrorCode::CustomCode(e) => {
                            f.debug_tuple("ErrorCode::CustomCode").field(e).finish()
                        }
                    }
                }
            }
            /// Standard error structure
            #[derive(Clone)]
            pub struct McpError {
                pub code: ErrorCode,
                pub message: _rt::String,
                /// Additional error context
                pub data: Option<JsonValue>,
            }
            impl ::core::fmt::Debug for McpError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("McpError")
                        .field("code", &self.code)
                        .field("message", &self.message)
                        .field("data", &self.data)
                        .finish()
                }
            }
            impl ::core::fmt::Display for McpError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for McpError {}
            /// Pagination cursor for list operations
            pub type Cursor = _rt::String;
            /// Progress token for tracking long-running operations
            pub type ProgressToken = _rt::String;
        }
        /// Session management and capability negotiation for MCP
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod session {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type McpError = super::super::super::fastertools::mcp::types::McpError;
            pub type MetaFields = super::super::super::fastertools::mcp::types::MetaFields;
            /// Protocol version constants
            /// Current draft version: "DRAFT-2025-v3"
            pub type ProtocolVersion = _rt::String;
            /// Information about an MCP implementation
            #[derive(Clone)]
            pub struct ImplementationInfo {
                /// Implementation name (e.g., "weather-server")
                pub name: _rt::String,
                /// Implementation version (e.g., "1.0.0")
                pub version: _rt::String,
                /// Optional human-readable title
                pub title: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ImplementationInfo {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ImplementationInfo")
                        .field("name", &self.name)
                        .field("version", &self.version)
                        .field("title", &self.title)
                        .finish()
                }
            }
            /// Root listing capability details
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct RootsCapability {
                /// Server will notify when roots list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for RootsCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RootsCapability")
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Capabilities that a client supports
            #[derive(Clone)]
            pub struct ClientCapabilities {
                /// Experimental/custom capabilities
                pub experimental: Option<MetaFields>,
                /// Support for roots (directory access)
                pub roots: Option<RootsCapability>,
                /// Support for LLM sampling
                pub sampling: Option<bool>,
                /// Support for user elicitation
                pub elicitation: Option<bool>,
            }
            impl ::core::fmt::Debug for ClientCapabilities {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ClientCapabilities")
                        .field("experimental", &self.experimental)
                        .field("roots", &self.roots)
                        .field("sampling", &self.sampling)
                        .field("elicitation", &self.elicitation)
                        .finish()
                }
            }
            /// Prompts capability details
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct PromptsCapability {
                /// Server will notify when prompts list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for PromptsCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PromptsCapability")
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Resources capability details
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ResourcesCapability {
                /// Server supports resource subscriptions
                pub subscribe: Option<bool>,
                /// Server will notify when resource list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for ResourcesCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourcesCapability")
                        .field("subscribe", &self.subscribe)
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Tools capability details
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ToolsCapability {
                /// Server will notify when tools list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for ToolsCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolsCapability")
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Capabilities that a server provides
            #[derive(Clone)]
            pub struct ServerCapabilities {
                /// Experimental/custom capabilities
                pub experimental: Option<MetaFields>,
                /// Server can send log messages
                pub logging: Option<bool>,
                /// Server supports argument autocompletion
                pub completions: Option<bool>,
                /// Server offers prompts
                pub prompts: Option<PromptsCapability>,
                /// Server offers resources
                pub resources: Option<ResourcesCapability>,
                /// Server offers tools
                pub tools: Option<ToolsCapability>,
            }
            impl ::core::fmt::Debug for ServerCapabilities {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ServerCapabilities")
                        .field("experimental", &self.experimental)
                        .field("logging", &self.logging)
                        .field("completions", &self.completions)
                        .field("prompts", &self.prompts)
                        .field("resources", &self.resources)
                        .field("tools", &self.tools)
                        .finish()
                }
            }
            /// Initialize request sent by client on connection
            #[derive(Clone)]
            pub struct InitializeRequest {
                /// Protocol version the client supports
                pub protocol_version: ProtocolVersion,
                /// Client's capabilities
                pub capabilities: ClientCapabilities,
                /// Client implementation details
                pub client_info: ImplementationInfo,
                /// Optional metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for InitializeRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("InitializeRequest")
                        .field("protocol-version", &self.protocol_version)
                        .field("capabilities", &self.capabilities)
                        .field("client-info", &self.client_info)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Initialize response from server
            #[derive(Clone)]
            pub struct InitializeResponse {
                /// Protocol version the server will use
                pub protocol_version: ProtocolVersion,
                /// Server's capabilities
                pub capabilities: ServerCapabilities,
                /// Server implementation details
                pub server_info: ImplementationInfo,
                /// Optional instructions for using the server
                pub instructions: Option<_rt::String>,
                /// Optional metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for InitializeResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("InitializeResponse")
                        .field("protocol-version", &self.protocol_version)
                        .field("capabilities", &self.capabilities)
                        .field("server-info", &self.server_info)
                        .field("instructions", &self.instructions)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Session lifecycle operations
            /// Initialize the MCP session
            pub fn initialize(
                request: &InitializeRequest,
            ) -> Result<InitializeResponse, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 16 + 19 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 16
                            + 19 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    let InitializeRequest {
                        protocol_version: protocol_version1,
                        capabilities: capabilities1,
                        client_info: client_info1,
                        meta: meta1,
                    } = request;
                    let vec2 = protocol_version1;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
                    *ptr0.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    let ClientCapabilities {
                        experimental: experimental3,
                        roots: roots3,
                        sampling: sampling3,
                        elicitation: elicitation3,
                    } = capabilities1;
                    match experimental3 {
                        Some(e) => {
                            *ptr0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec7 = e;
                            let len7 = vec7.len();
                            let layout7 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec7.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result7 = if layout7.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout7);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec7.into_iter().enumerate() {
                                let base = result7
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t4_0, t4_1) = e;
                                    let vec5 = t4_0;
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *base.add(0).cast::<*mut u8>() = ptr5.cast_mut();
                                    let vec6 = t4_1;
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                            }
                            *ptr0
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len7;
                            *ptr0
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result7;
                            cleanup_list.extend_from_slice(&[(result7, layout7)]);
                        }
                        None => {
                            *ptr0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match roots3 {
                        Some(e) => {
                            *ptr0
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let RootsCapability { list_changed: list_changed8 } = e;
                            match list_changed8 {
                                Some(e) => {
                                    *ptr0
                                        .add(1 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(2 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                None => {
                                    *ptr0
                                        .add(1 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        None => {
                            *ptr0
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match sampling3 {
                        Some(e) => {
                            *ptr0
                                .add(3 + 5 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            *ptr0
                                .add(4 + 5 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (match e {
                                true => 1,
                                false => 0,
                            }) as u8;
                        }
                        None => {
                            *ptr0
                                .add(3 + 5 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match elicitation3 {
                        Some(e) => {
                            *ptr0
                                .add(5 + 5 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            *ptr0
                                .add(6 + 5 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (match e {
                                true => 1,
                                false => 0,
                            }) as u8;
                        }
                        None => {
                            *ptr0
                                .add(5 + 5 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let ImplementationInfo {
                        name: name9,
                        version: version9,
                        title: title9,
                    } = client_info1;
                    let vec10 = name9;
                    let ptr10 = vec10.as_ptr().cast::<u8>();
                    let len10 = vec10.len();
                    *ptr0
                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len10;
                    *ptr0
                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr10.cast_mut();
                    let vec11 = version9;
                    let ptr11 = vec11.as_ptr().cast::<u8>();
                    let len11 = vec11.len();
                    *ptr0
                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len11;
                    *ptr0
                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr11.cast_mut();
                    match title9 {
                        Some(e) => {
                            *ptr0
                                .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec12 = e;
                            let ptr12 = vec12.as_ptr().cast::<u8>();
                            let len12 = vec12.len();
                            *ptr0
                                .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len12;
                            *ptr0
                                .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr12.cast_mut();
                        }
                        None => {
                            *ptr0
                                .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match meta1 {
                        Some(e) => {
                            *ptr0
                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec16 = e;
                            let len16 = vec16.len();
                            let layout16 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec16.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result16 = if layout16.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout16).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout16);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec16.into_iter().enumerate() {
                                let base = result16
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t13_0, t13_1) = e;
                                    let vec14 = t13_0;
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *base.add(0).cast::<*mut u8>() = ptr14.cast_mut();
                                    let vec15 = t13_1;
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len15;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr15.cast_mut();
                                }
                            }
                            *ptr0
                                .add(8 + 14 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len16;
                            *ptr0
                                .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result16;
                            cleanup_list.extend_from_slice(&[(result16, layout16)]);
                        }
                        None => {
                            *ptr0
                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let ptr17 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fastertools:mcp/session@0.1.1")]
                    unsafe extern "C" {
                        #[link_name = "initialize"]
                        fn wit_import18(_: *mut u8, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import18(_: *mut u8, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import18(ptr0, ptr17) };
                    let l19 = i32::from(*ptr17.add(0).cast::<u8>());
                    let result82 = match l19 {
                        0 => {
                            let e = {
                                let l20 = *ptr17
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l21 = *ptr17
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len22 = l21;
                                let bytes22 = _rt::Vec::from_raw_parts(
                                    l20.cast(),
                                    len22,
                                    len22,
                                );
                                let l23 = i32::from(
                                    *ptr17
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l33 = i32::from(
                                    *ptr17
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l35 = i32::from(
                                    *ptr17
                                        .add(2 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l37 = i32::from(
                                    *ptr17
                                        .add(4 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l40 = i32::from(
                                    *ptr17
                                        .add(7 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l45 = i32::from(
                                    *ptr17
                                        .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l48 = *ptr17
                                    .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l49 = *ptr17
                                    .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len50 = l49;
                                let bytes50 = _rt::Vec::from_raw_parts(
                                    l48.cast(),
                                    len50,
                                    len50,
                                );
                                let l51 = *ptr17
                                    .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l52 = *ptr17
                                    .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len53 = l52;
                                let bytes53 = _rt::Vec::from_raw_parts(
                                    l51.cast(),
                                    len53,
                                    len53,
                                );
                                let l54 = i32::from(
                                    *ptr17
                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l58 = i32::from(
                                    *ptr17
                                        .add(16 + 13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l62 = i32::from(
                                    *ptr17
                                        .add(16 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                InitializeResponse {
                                    protocol_version: _rt::string_lift(bytes22),
                                    capabilities: ServerCapabilities {
                                        experimental: match l23 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l24 = *ptr17
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l25 = *ptr17
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base32 = l24;
                                                    let len32 = l25;
                                                    let mut result32 = _rt::Vec::with_capacity(len32);
                                                    for i in 0..len32 {
                                                        let base = base32
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        let e32 = {
                                                            let l26 = *base.add(0).cast::<*mut u8>();
                                                            let l27 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len28 = l27;
                                                            let bytes28 = _rt::Vec::from_raw_parts(
                                                                l26.cast(),
                                                                len28,
                                                                len28,
                                                            );
                                                            let l29 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l30 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len31 = l30;
                                                            let bytes31 = _rt::Vec::from_raw_parts(
                                                                l29.cast(),
                                                                len31,
                                                                len31,
                                                            );
                                                            (_rt::string_lift(bytes28), _rt::string_lift(bytes31))
                                                        };
                                                        result32.push(e32);
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base32,
                                                        len32 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    result32
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        logging: match l33 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l34 = i32::from(
                                                        *ptr17
                                                            .add(1 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    _rt::bool_lift(l34 as u8)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        completions: match l35 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l36 = i32::from(
                                                        *ptr17
                                                            .add(3 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    _rt::bool_lift(l36 as u8)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        prompts: match l37 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l38 = i32::from(
                                                        *ptr17
                                                            .add(5 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    PromptsCapability {
                                                        list_changed: match l38 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l39 = i32::from(
                                                                        *ptr17
                                                                            .add(6 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    _rt::bool_lift(l39 as u8)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        resources: match l40 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l41 = i32::from(
                                                        *ptr17
                                                            .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l43 = i32::from(
                                                        *ptr17
                                                            .add(10 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    ResourcesCapability {
                                                        subscribe: match l41 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l42 = i32::from(
                                                                        *ptr17
                                                                            .add(9 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    _rt::bool_lift(l42 as u8)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        list_changed: match l43 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l44 = i32::from(
                                                                        *ptr17
                                                                            .add(11 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    _rt::bool_lift(l44 as u8)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        tools: match l45 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l46 = i32::from(
                                                        *ptr17
                                                            .add(13 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    ToolsCapability {
                                                        list_changed: match l46 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l47 = i32::from(
                                                                        *ptr17
                                                                            .add(14 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    _rt::bool_lift(l47 as u8)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    },
                                    server_info: ImplementationInfo {
                                        name: _rt::string_lift(bytes50),
                                        version: _rt::string_lift(bytes53),
                                        title: match l54 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l55 = *ptr17
                                                        .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l56 = *ptr17
                                                        .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len57 = l56;
                                                    let bytes57 = _rt::Vec::from_raw_parts(
                                                        l55.cast(),
                                                        len57,
                                                        len57,
                                                    );
                                                    _rt::string_lift(bytes57)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    },
                                    instructions: match l58 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l59 = *ptr17
                                                    .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l60 = *ptr17
                                                    .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len61 = l60;
                                                let bytes61 = _rt::Vec::from_raw_parts(
                                                    l59.cast(),
                                                    len61,
                                                    len61,
                                                );
                                                _rt::string_lift(bytes61)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    meta: match l62 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l63 = *ptr17
                                                    .add(16 + 17 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l64 = *ptr17
                                                    .add(16 + 18 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base71 = l63;
                                                let len71 = l64;
                                                let mut result71 = _rt::Vec::with_capacity(len71);
                                                for i in 0..len71 {
                                                    let base = base71
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e71 = {
                                                        let l65 = *base.add(0).cast::<*mut u8>();
                                                        let l66 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len67 = l66;
                                                        let bytes67 = _rt::Vec::from_raw_parts(
                                                            l65.cast(),
                                                            len67,
                                                            len67,
                                                        );
                                                        let l68 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l69 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len70 = l69;
                                                        let bytes70 = _rt::Vec::from_raw_parts(
                                                            l68.cast(),
                                                            len70,
                                                            len70,
                                                        );
                                                        (_rt::string_lift(bytes67), _rt::string_lift(bytes70))
                                                    };
                                                    result71.push(e71);
                                                }
                                                _rt::cabi_dealloc(
                                                    base71,
                                                    len71 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result71
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l72 = i32::from(
                                    *ptr17.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V74;
                                let v74 = match l72 {
                                    0 => V74::ParseError,
                                    1 => V74::InvalidRequest,
                                    2 => V74::MethodNotFound,
                                    3 => V74::InvalidParams,
                                    4 => V74::InternalError,
                                    5 => V74::ResourceNotFound,
                                    6 => V74::ToolNotFound,
                                    7 => V74::PromptNotFound,
                                    8 => V74::Unauthorized,
                                    9 => V74::RateLimited,
                                    10 => V74::Timeout,
                                    11 => V74::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e74 = {
                                            let l73 = *ptr17
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l73
                                        };
                                        V74::CustomCode(e74)
                                    }
                                };
                                let l75 = *ptr17
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l76 = *ptr17
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len77 = l76;
                                let bytes77 = _rt::Vec::from_raw_parts(
                                    l75.cast(),
                                    len77,
                                    len77,
                                );
                                let l78 = i32::from(
                                    *ptr17
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v74,
                                    message: _rt::string_lift(bytes77),
                                    data: match l78 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l79 = *ptr17
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l80 = *ptr17
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len81 = l80;
                                                let bytes81 = _rt::Vec::from_raw_parts(
                                                    l79.cast(),
                                                    len81,
                                                    len81,
                                                );
                                                _rt::string_lift(bytes81)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result82
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Notify server that initialization is complete
            pub fn initialized() -> Result<(), McpError> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fastertools:mcp/session@0.1.1")]
                    unsafe extern "C" {
                        #[link_name = "initialized"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result13 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = i32::from(
                                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V5;
                                let v5 = match l3 {
                                    0 => V5::ParseError,
                                    1 => V5::InvalidRequest,
                                    2 => V5::MethodNotFound,
                                    3 => V5::InvalidParams,
                                    4 => V5::InternalError,
                                    5 => V5::ResourceNotFound,
                                    6 => V5::ToolNotFound,
                                    7 => V5::PromptNotFound,
                                    8 => V5::Unauthorized,
                                    9 => V5::RateLimited,
                                    10 => V5::Timeout,
                                    11 => V5::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e5 = {
                                            let l4 = *ptr0
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l4
                                        };
                                        V5::CustomCode(e5)
                                    }
                                };
                                let l6 = *ptr0
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr0
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                let l9 = i32::from(
                                    *ptr0
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v5,
                                    message: _rt::string_lift(bytes8),
                                    data: match l9 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l10 = *ptr0
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l11 = *ptr0
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result13
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Ping to check if connection is alive
            pub fn ping() -> Result<(), McpError> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fastertools:mcp/session@0.1.1")]
                    unsafe extern "C" {
                        #[link_name = "ping"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result13 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = i32::from(
                                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V5;
                                let v5 = match l3 {
                                    0 => V5::ParseError,
                                    1 => V5::InvalidRequest,
                                    2 => V5::MethodNotFound,
                                    3 => V5::InvalidParams,
                                    4 => V5::InternalError,
                                    5 => V5::ResourceNotFound,
                                    6 => V5::ToolNotFound,
                                    7 => V5::PromptNotFound,
                                    8 => V5::Unauthorized,
                                    9 => V5::RateLimited,
                                    10 => V5::Timeout,
                                    11 => V5::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e5 = {
                                            let l4 = *ptr0
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l4
                                        };
                                        V5::CustomCode(e5)
                                    }
                                };
                                let l6 = *ptr0
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr0
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                let l9 = i32::from(
                                    *ptr0
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v5,
                                    message: _rt::string_lift(bytes8),
                                    data: match l9 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l10 = *ptr0
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l11 = *ptr0
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result13
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Shutdown the session gracefully
            pub fn shutdown() -> Result<(), McpError> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fastertools:mcp/session@0.1.1")]
                    unsafe extern "C" {
                        #[link_name = "shutdown"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result13 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = i32::from(
                                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V5;
                                let v5 = match l3 {
                                    0 => V5::ParseError,
                                    1 => V5::InvalidRequest,
                                    2 => V5::MethodNotFound,
                                    3 => V5::InvalidParams,
                                    4 => V5::InternalError,
                                    5 => V5::ResourceNotFound,
                                    6 => V5::ToolNotFound,
                                    7 => V5::PromptNotFound,
                                    8 => V5::Unauthorized,
                                    9 => V5::RateLimited,
                                    10 => V5::Timeout,
                                    11 => V5::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e5 = {
                                            let l4 = *ptr0
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l4
                                        };
                                        V5::CustomCode(e5)
                                    }
                                };
                                let l6 = *ptr0
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr0
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                let l9 = i32::from(
                                    *ptr0
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v5,
                                    message: _rt::string_lift(bytes8),
                                    data: match l9 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l10 = *ptr0
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l11 = *ptr0
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result13
                }
            }
        }
        /// Prompt template discovery and rendering for MCP
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod prompts {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Role = super::super::super::fastertools::mcp::types::Role;
            pub type ContentBlock = super::super::super::fastertools::mcp::types::ContentBlock;
            pub type McpError = super::super::super::fastertools::mcp::types::McpError;
            pub type BaseMetadata = super::super::super::fastertools::mcp::types::BaseMetadata;
            pub type MetaFields = super::super::super::fastertools::mcp::types::MetaFields;
            pub type Cursor = super::super::super::fastertools::mcp::types::Cursor;
            pub type ProgressToken = super::super::super::fastertools::mcp::types::ProgressToken;
            /// Argument definition for a prompt template
            #[derive(Clone)]
            pub struct PromptArgument {
                /// Base metadata (name and optional title)
                pub base: BaseMetadata,
                /// Human-readable description
                pub description: Option<_rt::String>,
                /// Whether this argument is required
                pub required: Option<bool>,
            }
            impl ::core::fmt::Debug for PromptArgument {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PromptArgument")
                        .field("base", &self.base)
                        .field("description", &self.description)
                        .field("required", &self.required)
                        .finish()
                }
            }
            /// Prompt template definition
            #[derive(Clone)]
            pub struct Prompt {
                /// Base metadata (name and optional title)
                pub base: BaseMetadata,
                /// Description of what this prompt does
                pub description: Option<_rt::String>,
                /// Arguments that can be passed to the prompt
                pub arguments: Option<_rt::Vec<PromptArgument>>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for Prompt {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Prompt")
                        .field("base", &self.base)
                        .field("description", &self.description)
                        .field("arguments", &self.arguments)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Message in a prompt conversation
            #[derive(Clone)]
            pub struct PromptMessage {
                /// Who is speaking (user or assistant)
                pub role: Role,
                /// Message content
                pub content: ContentBlock,
            }
            impl ::core::fmt::Debug for PromptMessage {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PromptMessage")
                        .field("role", &self.role)
                        .field("content", &self.content)
                        .finish()
                }
            }
            /// Request to list available prompts
            #[derive(Clone)]
            pub struct ListPromptsRequest {
                /// Pagination cursor
                pub cursor: Option<Cursor>,
                /// Progress tracking token
                pub progress_token: Option<ProgressToken>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ListPromptsRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListPromptsRequest")
                        .field("cursor", &self.cursor)
                        .field("progress-token", &self.progress_token)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Response with list of prompts
            #[derive(Clone)]
            pub struct ListPromptsResponse {
                /// Available prompts
                pub prompts: _rt::Vec<Prompt>,
                /// Cursor for next page
                pub next_cursor: Option<Cursor>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ListPromptsResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListPromptsResponse")
                        .field("prompts", &self.prompts)
                        .field("next-cursor", &self.next_cursor)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Request to get a specific prompt
            #[derive(Clone)]
            pub struct GetPromptRequest {
                /// Name of the prompt to retrieve
                pub name: _rt::String,
                /// Arguments for template substitution
                pub arguments: Option<_rt::Vec<(_rt::String, _rt::String)>>,
                /// Progress tracking token
                pub progress_token: Option<ProgressToken>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for GetPromptRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("GetPromptRequest")
                        .field("name", &self.name)
                        .field("arguments", &self.arguments)
                        .field("progress-token", &self.progress_token)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Response with rendered prompt messages
            #[derive(Clone)]
            pub struct GetPromptResponse {
                /// Optional description of the rendered prompt
                pub description: Option<_rt::String>,
                /// Messages that make up the prompt
                pub messages: _rt::Vec<PromptMessage>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for GetPromptResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("GetPromptResponse")
                        .field("description", &self.description)
                        .field("messages", &self.messages)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Prompt operations
            /// List available prompts with pagination
            pub fn list_prompts(
                request: &ListPromptsRequest,
            ) -> Result<ListPromptsResponse, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 9 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 9
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ListPromptsRequest {
                        cursor: cursor0,
                        progress_token: progress_token0,
                        meta: meta0,
                    } = request;
                    let (result2_0, result2_1, result2_2) = match cursor0 {
                        Some(e) => {
                            let vec1 = e;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            (1i32, ptr1.cast_mut(), len1)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result4_0, result4_1, result4_2) = match progress_token0 {
                        Some(e) => {
                            let vec3 = e;
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            (1i32, ptr3.cast_mut(), len3)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result9_0, result9_1, result9_2) = match meta0 {
                        Some(e) => {
                            let vec8 = e;
                            let len8 = vec8.len();
                            let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec8.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result8 = if layout8.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout8);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec8.into_iter().enumerate() {
                                let base = result8
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t5_0, t5_1) = e;
                                    let vec6 = t5_0;
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                                    let vec7 = t5_1;
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr7.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result8, layout8)]);
                            (1i32, result8, len8)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr10 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fastertools:mcp/prompts@0.1.1")]
                    unsafe extern "C" {
                        #[link_name = "list-prompts"]
                        fn wit_import11(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import11(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import11(
                            result2_0,
                            result2_1,
                            result2_2,
                            result4_0,
                            result4_1,
                            result4_2,
                            result9_0,
                            result9_1,
                            result9_2,
                            ptr10,
                        )
                    };
                    let l12 = i32::from(*ptr10.add(0).cast::<u8>());
                    let result78 = match l12 {
                        0 => {
                            let e = {
                                let l13 = *ptr10
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l14 = *ptr10
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base53 = l13;
                                let len53 = l14;
                                let mut result53 = _rt::Vec::with_capacity(len53);
                                for i in 0..len53 {
                                    let base = base53
                                        .add(i * (14 * ::core::mem::size_of::<*const u8>()));
                                    let e53 = {
                                        let l15 = *base.add(0).cast::<*mut u8>();
                                        let l16 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len17 = l16;
                                        let bytes17 = _rt::Vec::from_raw_parts(
                                            l15.cast(),
                                            len17,
                                            len17,
                                        );
                                        let l18 = i32::from(
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l22 = i32::from(
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l26 = i32::from(
                                            *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l43 = i32::from(
                                            *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        Prompt {
                                            base: super::super::super::fastertools::mcp::types::BaseMetadata {
                                                name: _rt::string_lift(bytes17),
                                                title: match l18 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l19 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l20 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len21 = l20;
                                                            let bytes21 = _rt::Vec::from_raw_parts(
                                                                l19.cast(),
                                                                len21,
                                                                len21,
                                                            );
                                                            _rt::string_lift(bytes21)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            },
                                            description: match l22 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l23 = *base
                                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l24 = *base
                                                            .add(7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len25 = l24;
                                                        let bytes25 = _rt::Vec::from_raw_parts(
                                                            l23.cast(),
                                                            len25,
                                                            len25,
                                                        );
                                                        _rt::string_lift(bytes25)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            arguments: match l26 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l27 = *base
                                                            .add(9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l28 = *base
                                                            .add(10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base42 = l27;
                                                        let len42 = l28;
                                                        let mut result42 = _rt::Vec::with_capacity(len42);
                                                        for i in 0..len42 {
                                                            let base = base42
                                                                .add(i * (9 * ::core::mem::size_of::<*const u8>()));
                                                            let e42 = {
                                                                let l29 = *base.add(0).cast::<*mut u8>();
                                                                let l30 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len31 = l30;
                                                                let bytes31 = _rt::Vec::from_raw_parts(
                                                                    l29.cast(),
                                                                    len31,
                                                                    len31,
                                                                );
                                                                let l32 = i32::from(
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l36 = i32::from(
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l40 = i32::from(
                                                                    *base
                                                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                PromptArgument {
                                                                    base: super::super::super::fastertools::mcp::types::BaseMetadata {
                                                                        name: _rt::string_lift(bytes31),
                                                                        title: match l32 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l33 = *base
                                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l34 = *base
                                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len35 = l34;
                                                                                    let bytes35 = _rt::Vec::from_raw_parts(
                                                                                        l33.cast(),
                                                                                        len35,
                                                                                        len35,
                                                                                    );
                                                                                    _rt::string_lift(bytes35)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    },
                                                                    description: match l36 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l37 = *base
                                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l38 = *base
                                                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len39 = l38;
                                                                                let bytes39 = _rt::Vec::from_raw_parts(
                                                                                    l37.cast(),
                                                                                    len39,
                                                                                    len39,
                                                                                );
                                                                                _rt::string_lift(bytes39)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    required: match l40 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l41 = i32::from(
                                                                                    *base
                                                                                        .add(1 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>(),
                                                                                );
                                                                                _rt::bool_lift(l41 as u8)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            result42.push(e42);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base42,
                                                            len42 * (9 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        result42
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            meta: match l43 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l44 = *base
                                                            .add(12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l45 = *base
                                                            .add(13 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base52 = l44;
                                                        let len52 = l45;
                                                        let mut result52 = _rt::Vec::with_capacity(len52);
                                                        for i in 0..len52 {
                                                            let base = base52
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e52 = {
                                                                let l46 = *base.add(0).cast::<*mut u8>();
                                                                let l47 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len48 = l47;
                                                                let bytes48 = _rt::Vec::from_raw_parts(
                                                                    l46.cast(),
                                                                    len48,
                                                                    len48,
                                                                );
                                                                let l49 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l50 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len51 = l50;
                                                                let bytes51 = _rt::Vec::from_raw_parts(
                                                                    l49.cast(),
                                                                    len51,
                                                                    len51,
                                                                );
                                                                (_rt::string_lift(bytes48), _rt::string_lift(bytes51))
                                                            };
                                                            result52.push(e52);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base52,
                                                            len52 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        result52
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    result53.push(e53);
                                }
                                _rt::cabi_dealloc(
                                    base53,
                                    len53 * (14 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l54 = i32::from(
                                    *ptr10
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l58 = i32::from(
                                    *ptr10
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                ListPromptsResponse {
                                    prompts: result53,
                                    next_cursor: match l54 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l55 = *ptr10
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l56 = *ptr10
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len57 = l56;
                                                let bytes57 = _rt::Vec::from_raw_parts(
                                                    l55.cast(),
                                                    len57,
                                                    len57,
                                                );
                                                _rt::string_lift(bytes57)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    meta: match l58 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l59 = *ptr10
                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l60 = *ptr10
                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base67 = l59;
                                                let len67 = l60;
                                                let mut result67 = _rt::Vec::with_capacity(len67);
                                                for i in 0..len67 {
                                                    let base = base67
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e67 = {
                                                        let l61 = *base.add(0).cast::<*mut u8>();
                                                        let l62 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len63 = l62;
                                                        let bytes63 = _rt::Vec::from_raw_parts(
                                                            l61.cast(),
                                                            len63,
                                                            len63,
                                                        );
                                                        let l64 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l65 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len66 = l65;
                                                        let bytes66 = _rt::Vec::from_raw_parts(
                                                            l64.cast(),
                                                            len66,
                                                            len66,
                                                        );
                                                        (_rt::string_lift(bytes63), _rt::string_lift(bytes66))
                                                    };
                                                    result67.push(e67);
                                                }
                                                _rt::cabi_dealloc(
                                                    base67,
                                                    len67 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result67
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l68 = i32::from(
                                    *ptr10.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V70;
                                let v70 = match l68 {
                                    0 => V70::ParseError,
                                    1 => V70::InvalidRequest,
                                    2 => V70::MethodNotFound,
                                    3 => V70::InvalidParams,
                                    4 => V70::InternalError,
                                    5 => V70::ResourceNotFound,
                                    6 => V70::ToolNotFound,
                                    7 => V70::PromptNotFound,
                                    8 => V70::Unauthorized,
                                    9 => V70::RateLimited,
                                    10 => V70::Timeout,
                                    11 => V70::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e70 = {
                                            let l69 = *ptr10
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l69
                                        };
                                        V70::CustomCode(e70)
                                    }
                                };
                                let l71 = *ptr10
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l72 = *ptr10
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len73 = l72;
                                let bytes73 = _rt::Vec::from_raw_parts(
                                    l71.cast(),
                                    len73,
                                    len73,
                                );
                                let l74 = i32::from(
                                    *ptr10
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v70,
                                    message: _rt::string_lift(bytes73),
                                    data: match l74 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l75 = *ptr10
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l76 = *ptr10
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len77 = l76;
                                                let bytes77 = _rt::Vec::from_raw_parts(
                                                    l75.cast(),
                                                    len77,
                                                    len77,
                                                );
                                                _rt::string_lift(bytes77)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result78
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get a specific prompt with optional arguments
            pub fn get_prompt(
                request: &GetPromptRequest,
            ) -> Result<GetPromptResponse, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 9 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 9
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let GetPromptRequest {
                        name: name0,
                        arguments: arguments0,
                        progress_token: progress_token0,
                        meta: meta0,
                    } = request;
                    let vec1 = name0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let (result6_0, result6_1, result6_2) = match arguments0 {
                        Some(e) => {
                            let vec5 = e;
                            let len5 = vec5.len();
                            let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec5.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result5 = if layout5.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout5);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec5.into_iter().enumerate() {
                                let base = result5
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t2_0, t2_1) = e;
                                    let vec3 = t2_0;
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len3;
                                    *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                                    let vec4 = t2_1;
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr4.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result5, layout5)]);
                            (1i32, result5, len5)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result8_0, result8_1, result8_2) = match progress_token0 {
                        Some(e) => {
                            let vec7 = e;
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            (1i32, ptr7.cast_mut(), len7)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result13_0, result13_1, result13_2) = match meta0 {
                        Some(e) => {
                            let vec12 = e;
                            let len12 = vec12.len();
                            let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec12.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result12 = if layout12.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout12);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec12.into_iter().enumerate() {
                                let base = result12
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t9_0, t9_1) = e;
                                    let vec10 = t9_0;
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *base.add(0).cast::<*mut u8>() = ptr10.cast_mut();
                                    let vec11 = t9_1;
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len11;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr11.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result12, layout12)]);
                            (1i32, result12, len12)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr14 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fastertools:mcp/prompts@0.1.1")]
                    unsafe extern "C" {
                        #[link_name = "get-prompt"]
                        fn wit_import15(
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import15(
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import15(
                            ptr1.cast_mut(),
                            len1,
                            result6_0,
                            result6_1,
                            result6_2,
                            result8_0,
                            result8_1,
                            result8_2,
                            result13_0,
                            result13_1,
                            result13_2,
                            ptr14,
                        )
                    };
                    let l16 = i32::from(*ptr14.add(0).cast::<u8>());
                    let result230 = match l16 {
                        0 => {
                            let e = {
                                let l17 = i32::from(
                                    *ptr14.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                let l21 = *ptr14
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l22 = *ptr14
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base209 = l21;
                                let len209 = l22;
                                let mut result209 = _rt::Vec::with_capacity(len209);
                                for i in 0..len209 {
                                    let base = base209
                                        .add(i * (80 + 16 * ::core::mem::size_of::<*const u8>()));
                                    let e209 = {
                                        let l23 = i32::from(*base.add(0).cast::<u8>());
                                        let l24 = i32::from(*base.add(8).cast::<u8>());
                                        use super::super::super::fastertools::mcp::types::ContentBlock as V208;
                                        let v208 = match l24 {
                                            0 => {
                                                let e208 = {
                                                    let l25 = *base.add(16).cast::<*mut u8>();
                                                    let l26 = *base
                                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len27 = l26;
                                                    let bytes27 = _rt::Vec::from_raw_parts(
                                                        l25.cast(),
                                                        len27,
                                                        len27,
                                                    );
                                                    let l28 = i32::from(
                                                        *base
                                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l40 = i32::from(
                                                        *base
                                                            .add(56 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::fastertools::mcp::types::TextContent {
                                                        text: _rt::string_lift(bytes27),
                                                        annotations: match l28 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l29 = i32::from(
                                                                        *base
                                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l34 = i32::from(
                                                                        *base
                                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l36 = i32::from(
                                                                        *base
                                                                            .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::fastertools::mcp::types::Annotations {
                                                                        audience: match l29 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l30 = *base
                                                                                        .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l31 = *base
                                                                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base33 = l30;
                                                                                    let len33 = l31;
                                                                                    let mut result33 = _rt::Vec::with_capacity(len33);
                                                                                    for i in 0..len33 {
                                                                                        let base = base33.add(i * 1);
                                                                                        let e33 = {
                                                                                            let l32 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                                l32 as u8,
                                                                                            )
                                                                                        };
                                                                                        result33.push(e33);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base33, len33 * 1, 1);
                                                                                    result33
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l34 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l35 = *base
                                                                                        .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l35
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l36 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l37 = *base
                                                                                        .add(48 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l38 = *base
                                                                                        .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len39 = l38;
                                                                                    let bytes39 = _rt::Vec::from_raw_parts(
                                                                                        l37.cast(),
                                                                                        len39,
                                                                                        len39,
                                                                                    );
                                                                                    _rt::string_lift(bytes39)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l40 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l41 = *base
                                                                        .add(56 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l42 = *base
                                                                        .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base49 = l41;
                                                                    let len49 = l42;
                                                                    let mut result49 = _rt::Vec::with_capacity(len49);
                                                                    for i in 0..len49 {
                                                                        let base = base49
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e49 = {
                                                                            let l43 = *base.add(0).cast::<*mut u8>();
                                                                            let l44 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len45 = l44;
                                                                            let bytes45 = _rt::Vec::from_raw_parts(
                                                                                l43.cast(),
                                                                                len45,
                                                                                len45,
                                                                            );
                                                                            let l46 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l47 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len48 = l47;
                                                                            let bytes48 = _rt::Vec::from_raw_parts(
                                                                                l46.cast(),
                                                                                len48,
                                                                                len48,
                                                                            );
                                                                            (_rt::string_lift(bytes45), _rt::string_lift(bytes48))
                                                                        };
                                                                        result49.push(e49);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base49,
                                                                        len49 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result49
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V208::Text(e208)
                                            }
                                            1 => {
                                                let e208 = {
                                                    let l50 = *base.add(16).cast::<*mut u8>();
                                                    let l51 = *base
                                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len52 = l51;
                                                    let l53 = *base
                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l54 = *base
                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len55 = l54;
                                                    let bytes55 = _rt::Vec::from_raw_parts(
                                                        l53.cast(),
                                                        len55,
                                                        len55,
                                                    );
                                                    let l56 = i32::from(
                                                        *base
                                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l68 = i32::from(
                                                        *base
                                                            .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::fastertools::mcp::types::ImageContent {
                                                        data: _rt::Vec::from_raw_parts(l50.cast(), len52, len52),
                                                        mime_type: _rt::string_lift(bytes55),
                                                        annotations: match l56 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l57 = i32::from(
                                                                        *base
                                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l62 = i32::from(
                                                                        *base
                                                                            .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l64 = i32::from(
                                                                        *base
                                                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::fastertools::mcp::types::Annotations {
                                                                        audience: match l57 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l58 = *base
                                                                                        .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l59 = *base
                                                                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base61 = l58;
                                                                                    let len61 = l59;
                                                                                    let mut result61 = _rt::Vec::with_capacity(len61);
                                                                                    for i in 0..len61 {
                                                                                        let base = base61.add(i * 1);
                                                                                        let e61 = {
                                                                                            let l60 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                                l60 as u8,
                                                                                            )
                                                                                        };
                                                                                        result61.push(e61);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base61, len61 * 1, 1);
                                                                                    result61
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l62 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l63 = *base
                                                                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l63
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l64 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l65 = *base
                                                                                        .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l66 = *base
                                                                                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len67 = l66;
                                                                                    let bytes67 = _rt::Vec::from_raw_parts(
                                                                                        l65.cast(),
                                                                                        len67,
                                                                                        len67,
                                                                                    );
                                                                                    _rt::string_lift(bytes67)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l68 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l69 = *base
                                                                        .add(56 + 9 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l70 = *base
                                                                        .add(56 + 10 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base77 = l69;
                                                                    let len77 = l70;
                                                                    let mut result77 = _rt::Vec::with_capacity(len77);
                                                                    for i in 0..len77 {
                                                                        let base = base77
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e77 = {
                                                                            let l71 = *base.add(0).cast::<*mut u8>();
                                                                            let l72 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len73 = l72;
                                                                            let bytes73 = _rt::Vec::from_raw_parts(
                                                                                l71.cast(),
                                                                                len73,
                                                                                len73,
                                                                            );
                                                                            let l74 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l75 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len76 = l75;
                                                                            let bytes76 = _rt::Vec::from_raw_parts(
                                                                                l74.cast(),
                                                                                len76,
                                                                                len76,
                                                                            );
                                                                            (_rt::string_lift(bytes73), _rt::string_lift(bytes76))
                                                                        };
                                                                        result77.push(e77);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base77,
                                                                        len77 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result77
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V208::Image(e208)
                                            }
                                            2 => {
                                                let e208 = {
                                                    let l78 = *base.add(16).cast::<*mut u8>();
                                                    let l79 = *base
                                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len80 = l79;
                                                    let l81 = *base
                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l82 = *base
                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len83 = l82;
                                                    let bytes83 = _rt::Vec::from_raw_parts(
                                                        l81.cast(),
                                                        len83,
                                                        len83,
                                                    );
                                                    let l84 = i32::from(
                                                        *base
                                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l96 = i32::from(
                                                        *base
                                                            .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::fastertools::mcp::types::AudioContent {
                                                        data: _rt::Vec::from_raw_parts(l78.cast(), len80, len80),
                                                        mime_type: _rt::string_lift(bytes83),
                                                        annotations: match l84 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l85 = i32::from(
                                                                        *base
                                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l90 = i32::from(
                                                                        *base
                                                                            .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l92 = i32::from(
                                                                        *base
                                                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::fastertools::mcp::types::Annotations {
                                                                        audience: match l85 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l86 = *base
                                                                                        .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l87 = *base
                                                                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base89 = l86;
                                                                                    let len89 = l87;
                                                                                    let mut result89 = _rt::Vec::with_capacity(len89);
                                                                                    for i in 0..len89 {
                                                                                        let base = base89.add(i * 1);
                                                                                        let e89 = {
                                                                                            let l88 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                                l88 as u8,
                                                                                            )
                                                                                        };
                                                                                        result89.push(e89);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base89, len89 * 1, 1);
                                                                                    result89
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l90 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l91 = *base
                                                                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l91
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l92 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l93 = *base
                                                                                        .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l94 = *base
                                                                                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len95 = l94;
                                                                                    let bytes95 = _rt::Vec::from_raw_parts(
                                                                                        l93.cast(),
                                                                                        len95,
                                                                                        len95,
                                                                                    );
                                                                                    _rt::string_lift(bytes95)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l96 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l97 = *base
                                                                        .add(56 + 9 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l98 = *base
                                                                        .add(56 + 10 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base105 = l97;
                                                                    let len105 = l98;
                                                                    let mut result105 = _rt::Vec::with_capacity(len105);
                                                                    for i in 0..len105 {
                                                                        let base = base105
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e105 = {
                                                                            let l99 = *base.add(0).cast::<*mut u8>();
                                                                            let l100 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len101 = l100;
                                                                            let bytes101 = _rt::Vec::from_raw_parts(
                                                                                l99.cast(),
                                                                                len101,
                                                                                len101,
                                                                            );
                                                                            let l102 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l103 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len104 = l103;
                                                                            let bytes104 = _rt::Vec::from_raw_parts(
                                                                                l102.cast(),
                                                                                len104,
                                                                                len104,
                                                                            );
                                                                            (_rt::string_lift(bytes101), _rt::string_lift(bytes104))
                                                                        };
                                                                        result105.push(e105);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base105,
                                                                        len105 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result105
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V208::Audio(e208)
                                            }
                                            3 => {
                                                let e208 = {
                                                    let l106 = *base.add(16).cast::<*mut u8>();
                                                    let l107 = *base
                                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len108 = l107;
                                                    let bytes108 = _rt::Vec::from_raw_parts(
                                                        l106.cast(),
                                                        len108,
                                                        len108,
                                                    );
                                                    let l109 = *base
                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l110 = *base
                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len111 = l110;
                                                    let bytes111 = _rt::Vec::from_raw_parts(
                                                        l109.cast(),
                                                        len111,
                                                        len111,
                                                    );
                                                    let l112 = i32::from(
                                                        *base
                                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l116 = i32::from(
                                                        *base
                                                            .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l120 = i32::from(
                                                        *base
                                                            .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l122 = i32::from(
                                                        *base
                                                            .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l134 = i32::from(
                                                        *base
                                                            .add(72 + 14 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::fastertools::mcp::types::ResourceLink {
                                                        uri: _rt::string_lift(bytes108),
                                                        name: _rt::string_lift(bytes111),
                                                        description: match l112 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l113 = *base
                                                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l114 = *base
                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len115 = l114;
                                                                    let bytes115 = _rt::Vec::from_raw_parts(
                                                                        l113.cast(),
                                                                        len115,
                                                                        len115,
                                                                    );
                                                                    _rt::string_lift(bytes115)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        mime_type: match l116 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l117 = *base
                                                                        .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l118 = *base
                                                                        .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len119 = l118;
                                                                    let bytes119 = _rt::Vec::from_raw_parts(
                                                                        l117.cast(),
                                                                        len119,
                                                                        len119,
                                                                    );
                                                                    _rt::string_lift(bytes119)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        size: match l120 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l121 = *base
                                                                        .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>();
                                                                    l121 as u64
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        annotations: match l122 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l123 = i32::from(
                                                                        *base
                                                                            .add(40 + 10 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l128 = i32::from(
                                                                        *base
                                                                            .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l130 = i32::from(
                                                                        *base
                                                                            .add(64 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::fastertools::mcp::types::Annotations {
                                                                        audience: match l123 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l124 = *base
                                                                                        .add(40 + 11 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l125 = *base
                                                                                        .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base127 = l124;
                                                                                    let len127 = l125;
                                                                                    let mut result127 = _rt::Vec::with_capacity(len127);
                                                                                    for i in 0..len127 {
                                                                                        let base = base127.add(i * 1);
                                                                                        let e127 = {
                                                                                            let l126 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                                l126 as u8,
                                                                                            )
                                                                                        };
                                                                                        result127.push(e127);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base127, len127 * 1, 1);
                                                                                    result127
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l128 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l129 = *base
                                                                                        .add(56 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l129
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l130 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l131 = *base
                                                                                        .add(64 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l132 = *base
                                                                                        .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len133 = l132;
                                                                                    let bytes133 = _rt::Vec::from_raw_parts(
                                                                                        l131.cast(),
                                                                                        len133,
                                                                                        len133,
                                                                                    );
                                                                                    _rt::string_lift(bytes133)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l134 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l135 = *base
                                                                        .add(72 + 15 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l136 = *base
                                                                        .add(72 + 16 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base143 = l135;
                                                                    let len143 = l136;
                                                                    let mut result143 = _rt::Vec::with_capacity(len143);
                                                                    for i in 0..len143 {
                                                                        let base = base143
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e143 = {
                                                                            let l137 = *base.add(0).cast::<*mut u8>();
                                                                            let l138 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len139 = l138;
                                                                            let bytes139 = _rt::Vec::from_raw_parts(
                                                                                l137.cast(),
                                                                                len139,
                                                                                len139,
                                                                            );
                                                                            let l140 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l141 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len142 = l141;
                                                                            let bytes142 = _rt::Vec::from_raw_parts(
                                                                                l140.cast(),
                                                                                len142,
                                                                                len142,
                                                                            );
                                                                            (_rt::string_lift(bytes139), _rt::string_lift(bytes142))
                                                                        };
                                                                        result143.push(e143);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base143,
                                                                        len143 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result143
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V208::ResourceLink(e208)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 4, "invalid enum discriminant");
                                                let e208 = {
                                                    let l144 = i32::from(*base.add(16).cast::<u8>());
                                                    use super::super::super::fastertools::mcp::types::ResourceContents as V185;
                                                    let v185 = match l144 {
                                                        0 => {
                                                            let e185 = {
                                                                let l145 = *base
                                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l146 = *base
                                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len147 = l146;
                                                                let bytes147 = _rt::Vec::from_raw_parts(
                                                                    l145.cast(),
                                                                    len147,
                                                                    len147,
                                                                );
                                                                let l148 = i32::from(
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l152 = *base
                                                                    .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l153 = *base
                                                                    .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len154 = l153;
                                                                let bytes154 = _rt::Vec::from_raw_parts(
                                                                    l152.cast(),
                                                                    len154,
                                                                    len154,
                                                                );
                                                                let l155 = i32::from(
                                                                    *base
                                                                        .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::fastertools::mcp::types::TextResourceContents {
                                                                    uri: _rt::string_lift(bytes147),
                                                                    mime_type: match l148 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l149 = *base
                                                                                    .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l150 = *base
                                                                                    .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len151 = l150;
                                                                                let bytes151 = _rt::Vec::from_raw_parts(
                                                                                    l149.cast(),
                                                                                    len151,
                                                                                    len151,
                                                                                );
                                                                                _rt::string_lift(bytes151)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    text: _rt::string_lift(bytes154),
                                                                    meta: match l155 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l156 = *base
                                                                                    .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l157 = *base
                                                                                    .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let base164 = l156;
                                                                                let len164 = l157;
                                                                                let mut result164 = _rt::Vec::with_capacity(len164);
                                                                                for i in 0..len164 {
                                                                                    let base = base164
                                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                                    let e164 = {
                                                                                        let l158 = *base.add(0).cast::<*mut u8>();
                                                                                        let l159 = *base
                                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len160 = l159;
                                                                                        let bytes160 = _rt::Vec::from_raw_parts(
                                                                                            l158.cast(),
                                                                                            len160,
                                                                                            len160,
                                                                                        );
                                                                                        let l161 = *base
                                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<*mut u8>();
                                                                                        let l162 = *base
                                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len163 = l162;
                                                                                        let bytes163 = _rt::Vec::from_raw_parts(
                                                                                            l161.cast(),
                                                                                            len163,
                                                                                            len163,
                                                                                        );
                                                                                        (_rt::string_lift(bytes160), _rt::string_lift(bytes163))
                                                                                    };
                                                                                    result164.push(e164);
                                                                                }
                                                                                _rt::cabi_dealloc(
                                                                                    base164,
                                                                                    len164 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                                    ::core::mem::size_of::<*const u8>(),
                                                                                );
                                                                                result164
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V185::Text(e185)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e185 = {
                                                                let l165 = *base
                                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l166 = *base
                                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len167 = l166;
                                                                let bytes167 = _rt::Vec::from_raw_parts(
                                                                    l165.cast(),
                                                                    len167,
                                                                    len167,
                                                                );
                                                                let l168 = i32::from(
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l172 = *base
                                                                    .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l173 = *base
                                                                    .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len174 = l173;
                                                                let l175 = i32::from(
                                                                    *base
                                                                        .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::fastertools::mcp::types::BlobResourceContents {
                                                                    uri: _rt::string_lift(bytes167),
                                                                    mime_type: match l168 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l169 = *base
                                                                                    .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l170 = *base
                                                                                    .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len171 = l170;
                                                                                let bytes171 = _rt::Vec::from_raw_parts(
                                                                                    l169.cast(),
                                                                                    len171,
                                                                                    len171,
                                                                                );
                                                                                _rt::string_lift(bytes171)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    blob: _rt::Vec::from_raw_parts(l172.cast(), len174, len174),
                                                                    meta: match l175 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l176 = *base
                                                                                    .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l177 = *base
                                                                                    .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let base184 = l176;
                                                                                let len184 = l177;
                                                                                let mut result184 = _rt::Vec::with_capacity(len184);
                                                                                for i in 0..len184 {
                                                                                    let base = base184
                                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                                    let e184 = {
                                                                                        let l178 = *base.add(0).cast::<*mut u8>();
                                                                                        let l179 = *base
                                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len180 = l179;
                                                                                        let bytes180 = _rt::Vec::from_raw_parts(
                                                                                            l178.cast(),
                                                                                            len180,
                                                                                            len180,
                                                                                        );
                                                                                        let l181 = *base
                                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<*mut u8>();
                                                                                        let l182 = *base
                                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len183 = l182;
                                                                                        let bytes183 = _rt::Vec::from_raw_parts(
                                                                                            l181.cast(),
                                                                                            len183,
                                                                                            len183,
                                                                                        );
                                                                                        (_rt::string_lift(bytes180), _rt::string_lift(bytes183))
                                                                                    };
                                                                                    result184.push(e184);
                                                                                }
                                                                                _rt::cabi_dealloc(
                                                                                    base184,
                                                                                    len184 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                                    ::core::mem::size_of::<*const u8>(),
                                                                                );
                                                                                result184
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V185::Blob(e185)
                                                        }
                                                    };
                                                    let l186 = i32::from(
                                                        *base
                                                            .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l198 = i32::from(
                                                        *base
                                                            .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::fastertools::mcp::types::EmbeddedResource {
                                                        contents: v185,
                                                        annotations: match l186 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l187 = i32::from(
                                                                        *base
                                                                            .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l192 = i32::from(
                                                                        *base
                                                                            .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l194 = i32::from(
                                                                        *base
                                                                            .add(56 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::fastertools::mcp::types::Annotations {
                                                                        audience: match l187 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l188 = *base
                                                                                        .add(32 + 11 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l189 = *base
                                                                                        .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base191 = l188;
                                                                                    let len191 = l189;
                                                                                    let mut result191 = _rt::Vec::with_capacity(len191);
                                                                                    for i in 0..len191 {
                                                                                        let base = base191.add(i * 1);
                                                                                        let e191 = {
                                                                                            let l190 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::fastertools::mcp::types::Role::_lift(
                                                                                                l190 as u8,
                                                                                            )
                                                                                        };
                                                                                        result191.push(e191);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base191, len191 * 1, 1);
                                                                                    result191
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l192 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l193 = *base
                                                                                        .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l193
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l194 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l195 = *base
                                                                                        .add(56 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l196 = *base
                                                                                        .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len197 = l196;
                                                                                    let bytes197 = _rt::Vec::from_raw_parts(
                                                                                        l195.cast(),
                                                                                        len197,
                                                                                        len197,
                                                                                    );
                                                                                    _rt::string_lift(bytes197)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l198 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l199 = *base
                                                                        .add(64 + 15 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l200 = *base
                                                                        .add(64 + 16 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base207 = l199;
                                                                    let len207 = l200;
                                                                    let mut result207 = _rt::Vec::with_capacity(len207);
                                                                    for i in 0..len207 {
                                                                        let base = base207
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e207 = {
                                                                            let l201 = *base.add(0).cast::<*mut u8>();
                                                                            let l202 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len203 = l202;
                                                                            let bytes203 = _rt::Vec::from_raw_parts(
                                                                                l201.cast(),
                                                                                len203,
                                                                                len203,
                                                                            );
                                                                            let l204 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l205 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len206 = l205;
                                                                            let bytes206 = _rt::Vec::from_raw_parts(
                                                                                l204.cast(),
                                                                                len206,
                                                                                len206,
                                                                            );
                                                                            (_rt::string_lift(bytes203), _rt::string_lift(bytes206))
                                                                        };
                                                                        result207.push(e207);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base207,
                                                                        len207 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result207
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V208::EmbeddedResource(e208)
                                            }
                                        };
                                        PromptMessage {
                                            role: super::super::super::fastertools::mcp::types::Role::_lift(
                                                l23 as u8,
                                            ),
                                            content: v208,
                                        }
                                    };
                                    result209.push(e209);
                                }
                                _rt::cabi_dealloc(
                                    base209,
                                    len209 * (80 + 16 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let l210 = i32::from(
                                    *ptr14
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                GetPromptResponse {
                                    description: match l17 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l18 = *ptr14
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l19 = *ptr14
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len20 = l19;
                                                let bytes20 = _rt::Vec::from_raw_parts(
                                                    l18.cast(),
                                                    len20,
                                                    len20,
                                                );
                                                _rt::string_lift(bytes20)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    messages: result209,
                                    meta: match l210 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l211 = *ptr14
                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l212 = *ptr14
                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base219 = l211;
                                                let len219 = l212;
                                                let mut result219 = _rt::Vec::with_capacity(len219);
                                                for i in 0..len219 {
                                                    let base = base219
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e219 = {
                                                        let l213 = *base.add(0).cast::<*mut u8>();
                                                        let l214 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len215 = l214;
                                                        let bytes215 = _rt::Vec::from_raw_parts(
                                                            l213.cast(),
                                                            len215,
                                                            len215,
                                                        );
                                                        let l216 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l217 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len218 = l217;
                                                        let bytes218 = _rt::Vec::from_raw_parts(
                                                            l216.cast(),
                                                            len218,
                                                            len218,
                                                        );
                                                        (_rt::string_lift(bytes215), _rt::string_lift(bytes218))
                                                    };
                                                    result219.push(e219);
                                                }
                                                _rt::cabi_dealloc(
                                                    base219,
                                                    len219 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result219
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l220 = i32::from(
                                    *ptr14.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::fastertools::mcp::types::ErrorCode as V222;
                                let v222 = match l220 {
                                    0 => V222::ParseError,
                                    1 => V222::InvalidRequest,
                                    2 => V222::MethodNotFound,
                                    3 => V222::InvalidParams,
                                    4 => V222::InternalError,
                                    5 => V222::ResourceNotFound,
                                    6 => V222::ToolNotFound,
                                    7 => V222::PromptNotFound,
                                    8 => V222::Unauthorized,
                                    9 => V222::RateLimited,
                                    10 => V222::Timeout,
                                    11 => V222::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e222 = {
                                            let l221 = *ptr14
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l221
                                        };
                                        V222::CustomCode(e222)
                                    }
                                };
                                let l223 = *ptr14
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l224 = *ptr14
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len225 = l224;
                                let bytes225 = _rt::Vec::from_raw_parts(
                                    l223.cast(),
                                    len225,
                                    len225,
                                );
                                let l226 = i32::from(
                                    *ptr14
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::fastertools::mcp::types::McpError {
                                    code: v222,
                                    message: _rt::string_lift(bytes225),
                                    data: match l226 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l227 = *ptr14
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l228 = *ptr14
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len229 = l228;
                                                let bytes229 = _rt::Vec::from_raw_parts(
                                                    l227.cast(),
                                                    len229,
                                                    len229,
                                                );
                                                _rt::string_lift(bytes229)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result230
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod fastertools {
        pub mod mcp {
            /// Core handler interface that all MCP implementations must provide
            /// This contains only the essential session management functions
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod core {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type McpError = super::super::super::super::fastertools::mcp::types::McpError;
                pub type InitializeRequest = super::super::super::super::fastertools::mcp::session::InitializeRequest;
                pub type InitializeResponse = super::super::super::super::fastertools::mcp::session::InitializeResponse;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_initialize_cabi<T: Guest>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len2 = l1;
                    let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                    let l3 = i32::from(
                        *arg0.add(2 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l13 = i32::from(
                        *arg0.add(5 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l16 = i32::from(
                        *arg0
                            .add(3 + 5 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l18 = i32::from(
                        *arg0
                            .add(5 + 5 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l20 = *arg0
                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l21 = *arg0
                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len22 = l21;
                    let bytes22 = _rt::Vec::from_raw_parts(l20.cast(), len22, len22);
                    let l23 = *arg0
                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l24 = *arg0
                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len25 = l24;
                    let bytes25 = _rt::Vec::from_raw_parts(l23.cast(), len25, len25);
                    let l26 = i32::from(
                        *arg0
                            .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l30 = i32::from(
                        *arg0
                            .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let result40 = T::handle_initialize(super::super::super::super::fastertools::mcp::session::InitializeRequest {
                        protocol_version: _rt::string_lift(bytes2),
                        capabilities: super::super::super::super::fastertools::mcp::session::ClientCapabilities {
                            experimental: match l3 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l4 = *arg0
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l5 = *arg0
                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base12 = l4;
                                        let len12 = l5;
                                        let mut result12 = _rt::Vec::with_capacity(len12);
                                        for i in 0..len12 {
                                            let base = base12
                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                            let e12 = {
                                                let l6 = *base.add(0).cast::<*mut u8>();
                                                let l7 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 = _rt::Vec::from_raw_parts(
                                                    l6.cast(),
                                                    len8,
                                                    len8,
                                                );
                                                let l9 = *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l10 = *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len11 = l10;
                                                let bytes11 = _rt::Vec::from_raw_parts(
                                                    l9.cast(),
                                                    len11,
                                                    len11,
                                                );
                                                (_rt::string_lift(bytes8), _rt::string_lift(bytes11))
                                            };
                                            result12.push(e12);
                                        }
                                        _rt::cabi_dealloc(
                                            base12,
                                            len12 * (4 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        result12
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            roots: match l13 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l14 = i32::from(
                                            *arg0
                                                .add(1 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        super::super::super::super::fastertools::mcp::session::RootsCapability {
                                            list_changed: match l14 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l15 = i32::from(
                                                            *arg0
                                                                .add(2 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        _rt::bool_lift(l15 as u8)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            sampling: match l16 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l17 = i32::from(
                                            *arg0
                                                .add(4 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        _rt::bool_lift(l17 as u8)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            elicitation: match l18 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l19 = i32::from(
                                            *arg0
                                                .add(6 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        _rt::bool_lift(l19 as u8)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                        client_info: super::super::super::super::fastertools::mcp::session::ImplementationInfo {
                            name: _rt::string_lift(bytes22),
                            version: _rt::string_lift(bytes25),
                            title: match l26 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l27 = *arg0
                                            .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l28 = *arg0
                                            .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len29 = l28;
                                        let bytes29 = _rt::Vec::from_raw_parts(
                                            l27.cast(),
                                            len29,
                                            len29,
                                        );
                                        _rt::string_lift(bytes29)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                        meta: match l30 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l31 = *arg0
                                        .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l32 = *arg0
                                        .add(8 + 14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base39 = l31;
                                    let len39 = l32;
                                    let mut result39 = _rt::Vec::with_capacity(len39);
                                    for i in 0..len39 {
                                        let base = base39
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        let e39 = {
                                            let l33 = *base.add(0).cast::<*mut u8>();
                                            let l34 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len35 = l34;
                                            let bytes35 = _rt::Vec::from_raw_parts(
                                                l33.cast(),
                                                len35,
                                                len35,
                                            );
                                            let l36 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l37 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len38 = l37;
                                            let bytes38 = _rt::Vec::from_raw_parts(
                                                l36.cast(),
                                                len38,
                                                len38,
                                            );
                                            (_rt::string_lift(bytes35), _rt::string_lift(bytes38))
                                        };
                                        result39.push(e39);
                                    }
                                    _rt::cabi_dealloc(
                                        base39,
                                        len39 * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    result39
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    });
                    _rt::cabi_dealloc(
                        arg0,
                        8 + 15 * ::core::mem::size_of::<*const u8>(),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let ptr41 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result40 {
                        Ok(e) => {
                            *ptr41.add(0).cast::<u8>() = (0i32) as u8;
                            let super::super::super::super::fastertools::mcp::session::InitializeResponse {
                                protocol_version: protocol_version42,
                                capabilities: capabilities42,
                                server_info: server_info42,
                                instructions: instructions42,
                                meta: meta42,
                            } = e;
                            let vec43 = (protocol_version42.into_bytes())
                                .into_boxed_slice();
                            let ptr43 = vec43.as_ptr().cast::<u8>();
                            let len43 = vec43.len();
                            ::core::mem::forget(vec43);
                            *ptr41
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len43;
                            *ptr41
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr43.cast_mut();
                            let super::super::super::super::fastertools::mcp::session::ServerCapabilities {
                                experimental: experimental44,
                                logging: logging44,
                                completions: completions44,
                                prompts: prompts44,
                                resources: resources44,
                                tools: tools44,
                            } = capabilities42;
                            match experimental44 {
                                Some(e) => {
                                    *ptr41
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec48 = e;
                                    let len48 = vec48.len();
                                    let layout48 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec48.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result48 = if layout48.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout48).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout48);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec48.into_iter().enumerate() {
                                        let base = result48
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t45_0, t45_1) = e;
                                            let vec46 = (t45_0.into_bytes()).into_boxed_slice();
                                            let ptr46 = vec46.as_ptr().cast::<u8>();
                                            let len46 = vec46.len();
                                            ::core::mem::forget(vec46);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len46;
                                            *base.add(0).cast::<*mut u8>() = ptr46.cast_mut();
                                            let vec47 = (t45_1.into_bytes()).into_boxed_slice();
                                            let ptr47 = vec47.as_ptr().cast::<u8>();
                                            let len47 = vec47.len();
                                            ::core::mem::forget(vec47);
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len47;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr47.cast_mut();
                                        }
                                    }
                                    *ptr41
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len48;
                                    *ptr41
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result48;
                                }
                                None => {
                                    *ptr41
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match logging44 {
                                Some(e) => {
                                    *ptr41
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr41
                                        .add(1 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                None => {
                                    *ptr41
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match completions44 {
                                Some(e) => {
                                    *ptr41
                                        .add(2 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr41
                                        .add(3 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                None => {
                                    *ptr41
                                        .add(2 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match prompts44 {
                                Some(e) => {
                                    *ptr41
                                        .add(4 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::fastertools::mcp::session::PromptsCapability {
                                        list_changed: list_changed49,
                                    } = e;
                                    match list_changed49 {
                                        Some(e) => {
                                            *ptr41
                                                .add(5 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *ptr41
                                                .add(6 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                        None => {
                                            *ptr41
                                                .add(5 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                None => {
                                    *ptr41
                                        .add(4 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match resources44 {
                                Some(e) => {
                                    *ptr41
                                        .add(7 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::fastertools::mcp::session::ResourcesCapability {
                                        subscribe: subscribe50,
                                        list_changed: list_changed50,
                                    } = e;
                                    match subscribe50 {
                                        Some(e) => {
                                            *ptr41
                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *ptr41
                                                .add(9 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                        None => {
                                            *ptr41
                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match list_changed50 {
                                        Some(e) => {
                                            *ptr41
                                                .add(10 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *ptr41
                                                .add(11 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                        None => {
                                            *ptr41
                                                .add(10 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                None => {
                                    *ptr41
                                        .add(7 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match tools44 {
                                Some(e) => {
                                    *ptr41
                                        .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::fastertools::mcp::session::ToolsCapability {
                                        list_changed: list_changed51,
                                    } = e;
                                    match list_changed51 {
                                        Some(e) => {
                                            *ptr41
                                                .add(13 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *ptr41
                                                .add(14 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                        None => {
                                            *ptr41
                                                .add(13 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                None => {
                                    *ptr41
                                        .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let super::super::super::super::fastertools::mcp::session::ImplementationInfo {
                                name: name52,
                                version: version52,
                                title: title52,
                            } = server_info42;
                            let vec53 = (name52.into_bytes()).into_boxed_slice();
                            let ptr53 = vec53.as_ptr().cast::<u8>();
                            let len53 = vec53.len();
                            ::core::mem::forget(vec53);
                            *ptr41
                                .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len53;
                            *ptr41
                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr53.cast_mut();
                            let vec54 = (version52.into_bytes()).into_boxed_slice();
                            let ptr54 = vec54.as_ptr().cast::<u8>();
                            let len54 = vec54.len();
                            ::core::mem::forget(vec54);
                            *ptr41
                                .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len54;
                            *ptr41
                                .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr54.cast_mut();
                            match title52 {
                                Some(e) => {
                                    *ptr41
                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec55 = (e.into_bytes()).into_boxed_slice();
                                    let ptr55 = vec55.as_ptr().cast::<u8>();
                                    let len55 = vec55.len();
                                    ::core::mem::forget(vec55);
                                    *ptr41
                                        .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len55;
                                    *ptr41
                                        .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr55.cast_mut();
                                }
                                None => {
                                    *ptr41
                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match instructions42 {
                                Some(e) => {
                                    *ptr41
                                        .add(16 + 13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec56 = (e.into_bytes()).into_boxed_slice();
                                    let ptr56 = vec56.as_ptr().cast::<u8>();
                                    let len56 = vec56.len();
                                    ::core::mem::forget(vec56);
                                    *ptr41
                                        .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len56;
                                    *ptr41
                                        .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr56.cast_mut();
                                }
                                None => {
                                    *ptr41
                                        .add(16 + 13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match meta42 {
                                Some(e) => {
                                    *ptr41
                                        .add(16 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec60 = e;
                                    let len60 = vec60.len();
                                    let layout60 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec60.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result60 = if layout60.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout60).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout60);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec60.into_iter().enumerate() {
                                        let base = result60
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t57_0, t57_1) = e;
                                            let vec58 = (t57_0.into_bytes()).into_boxed_slice();
                                            let ptr58 = vec58.as_ptr().cast::<u8>();
                                            let len58 = vec58.len();
                                            ::core::mem::forget(vec58);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len58;
                                            *base.add(0).cast::<*mut u8>() = ptr58.cast_mut();
                                            let vec59 = (t57_1.into_bytes()).into_boxed_slice();
                                            let ptr59 = vec59.as_ptr().cast::<u8>();
                                            let len59 = vec59.len();
                                            ::core::mem::forget(vec59);
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len59;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr59.cast_mut();
                                        }
                                    }
                                    *ptr41
                                        .add(16 + 18 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len60;
                                    *ptr41
                                        .add(16 + 17 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result60;
                                }
                                None => {
                                    *ptr41
                                        .add(16 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr41.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::fastertools::mcp::types::McpError {
                                code: code61,
                                message: message61,
                                data: data61,
                            } = e;
                            use super::super::super::super::fastertools::mcp::types::ErrorCode as V62;
                            match code61 {
                                V62::ParseError => {
                                    *ptr41
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                V62::InvalidRequest => {
                                    *ptr41
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                }
                                V62::MethodNotFound => {
                                    *ptr41
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                }
                                V62::InvalidParams => {
                                    *ptr41
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                }
                                V62::InternalError => {
                                    *ptr41
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                }
                                V62::ResourceNotFound => {
                                    *ptr41
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                }
                                V62::ToolNotFound => {
                                    *ptr41
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                }
                                V62::PromptNotFound => {
                                    *ptr41
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                }
                                V62::Unauthorized => {
                                    *ptr41
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                }
                                V62::RateLimited => {
                                    *ptr41
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                }
                                V62::Timeout => {
                                    *ptr41
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (10i32) as u8;
                                }
                                V62::Cancelled => {
                                    *ptr41
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (11i32) as u8;
                                }
                                V62::CustomCode(e) => {
                                    *ptr41
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (12i32) as u8;
                                    *ptr41
                                        .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                            }
                            let vec63 = (message61.into_bytes()).into_boxed_slice();
                            let ptr63 = vec63.as_ptr().cast::<u8>();
                            let len63 = vec63.len();
                            ::core::mem::forget(vec63);
                            *ptr41
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len63;
                            *ptr41
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr63.cast_mut();
                            match data61 {
                                Some(e) => {
                                    *ptr41
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec64 = (e.into_bytes()).into_boxed_slice();
                                    let ptr64 = vec64.as_ptr().cast::<u8>();
                                    let len64 = vec64.len();
                                    ::core::mem::forget(vec64);
                                    *ptr41
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len64;
                                    *ptr41
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr64.cast_mut();
                                }
                                None => {
                                    *ptr41
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    };
                    ptr41
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_initialize<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = i32::from(
                                *arg0
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l3 {
                                0 => {}
                                _ => {
                                    let l4 = *arg0
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base10 = l4;
                                    let len10 = l5;
                                    for i in 0..len10 {
                                        let base = base10
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l6 = *base.add(0).cast::<*mut u8>();
                                            let l7 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l6, l7, 1);
                                            let l8 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l9 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l8, l9, 1);
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base10,
                                        len10 * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                            }
                            let l11 = *arg0
                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l12 = *arg0
                                .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l11, l12, 1);
                            let l13 = *arg0
                                .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l14 = *arg0
                                .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l13, l14, 1);
                            let l15 = i32::from(
                                *arg0
                                    .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l15 {
                                0 => {}
                                _ => {
                                    let l16 = *arg0
                                        .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l17 = *arg0
                                        .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                            }
                            let l18 = i32::from(
                                *arg0
                                    .add(16 + 13 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l18 {
                                0 => {}
                                _ => {
                                    let l19 = *arg0
                                        .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l20 = *arg0
                                        .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l19, l20, 1);
                                }
                            }
                            let l21 = i32::from(
                                *arg0
                                    .add(16 + 16 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l21 {
                                0 => {}
                                _ => {
                                    let l22 = *arg0
                                        .add(16 + 17 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l23 = *arg0
                                        .add(16 + 18 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base28 = l22;
                                    let len28 = l23;
                                    for i in 0..len28 {
                                        let base = base28
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l24 = *base.add(0).cast::<*mut u8>();
                                            let l25 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l24, l25, 1);
                                            let l26 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l27 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l26, l27, 1);
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base28,
                                        len28 * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                            }
                        }
                        _ => {
                            let l29 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l30 = *arg0
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l29, l30, 1);
                            let l31 = i32::from(
                                *arg0
                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l31 {
                                0 => {}
                                _ => {
                                    let l32 = *arg0
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l33 = *arg0
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l32, l33, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_initialized_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::handle_initialized();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::fastertools::mcp::types::McpError {
                                code: code2,
                                message: message2,
                                data: data2,
                            } = e;
                            use super::super::super::super::fastertools::mcp::types::ErrorCode as V3;
                            match code2 {
                                V3::ParseError => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                V3::InvalidRequest => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                }
                                V3::MethodNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                }
                                V3::InvalidParams => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                }
                                V3::InternalError => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                }
                                V3::ResourceNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                }
                                V3::ToolNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                }
                                V3::PromptNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                }
                                V3::Unauthorized => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                }
                                V3::RateLimited => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                }
                                V3::Timeout => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (10i32) as u8;
                                }
                                V3::Cancelled => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (11i32) as u8;
                                }
                                V3::CustomCode(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (12i32) as u8;
                                    *ptr1
                                        .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                            }
                            let vec4 = (message2.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr1
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *ptr1
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                            match data2 {
                                Some(e) => {
                                    *ptr1
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr1
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr1
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr1
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_initialized<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = i32::from(
                                *arg0
                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l3 {
                                0 => {}
                                _ => {
                                    let l4 = *arg0
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_ping_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::handle_ping();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::fastertools::mcp::types::McpError {
                                code: code2,
                                message: message2,
                                data: data2,
                            } = e;
                            use super::super::super::super::fastertools::mcp::types::ErrorCode as V3;
                            match code2 {
                                V3::ParseError => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                V3::InvalidRequest => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                }
                                V3::MethodNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                }
                                V3::InvalidParams => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                }
                                V3::InternalError => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                }
                                V3::ResourceNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                }
                                V3::ToolNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                }
                                V3::PromptNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                }
                                V3::Unauthorized => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                }
                                V3::RateLimited => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                }
                                V3::Timeout => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (10i32) as u8;
                                }
                                V3::Cancelled => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (11i32) as u8;
                                }
                                V3::CustomCode(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (12i32) as u8;
                                    *ptr1
                                        .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                            }
                            let vec4 = (message2.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr1
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *ptr1
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                            match data2 {
                                Some(e) => {
                                    *ptr1
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr1
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr1
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr1
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_ping<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = i32::from(
                                *arg0
                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l3 {
                                0 => {}
                                _ => {
                                    let l4 = *arg0
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_shutdown_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::handle_shutdown();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::fastertools::mcp::types::McpError {
                                code: code2,
                                message: message2,
                                data: data2,
                            } = e;
                            use super::super::super::super::fastertools::mcp::types::ErrorCode as V3;
                            match code2 {
                                V3::ParseError => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                V3::InvalidRequest => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                }
                                V3::MethodNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                }
                                V3::InvalidParams => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                }
                                V3::InternalError => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                }
                                V3::ResourceNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                }
                                V3::ToolNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                }
                                V3::PromptNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                }
                                V3::Unauthorized => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                }
                                V3::RateLimited => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                }
                                V3::Timeout => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (10i32) as u8;
                                }
                                V3::Cancelled => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (11i32) as u8;
                                }
                                V3::CustomCode(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (12i32) as u8;
                                    *ptr1
                                        .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                            }
                            let vec4 = (message2.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr1
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *ptr1
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                            match data2 {
                                Some(e) => {
                                    *ptr1
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr1
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr1
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr1
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_shutdown<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = i32::from(
                                *arg0
                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l3 {
                                0 => {}
                                _ => {
                                    let l4 = *arg0
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    /// Handle session initialization
                    /// Implementations should declare their capabilities here
                    fn handle_initialize(
                        request: InitializeRequest,
                    ) -> Result<InitializeResponse, McpError>;
                    /// Handle initialization complete notification
                    fn handle_initialized() -> Result<(), McpError>;
                    /// Handle ping request for keepalive
                    fn handle_ping() -> Result<(), McpError>;
                    /// Handle shutdown request
                    fn handle_shutdown() -> Result<(), McpError>;
                }
                #[doc(hidden)]
                macro_rules! __export_fastertools_mcp_core_0_1_1_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "fastertools:mcp/core@0.1.1#handle-initialize")] unsafe extern
                        "C" fn export_handle_initialize(arg0 : * mut u8,) -> * mut u8 {
                        unsafe { $($path_to_types)*::
                        _export_handle_initialize_cabi::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "cabi_post_fastertools:mcp/core@0.1.1#handle-initialize")] unsafe
                        extern "C" fn _post_return_handle_initialize(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*::
                        __post_return_handle_initialize::<$ty > (arg0) } } #[unsafe
                        (export_name = "fastertools:mcp/core@0.1.1#handle-initialized")]
                        unsafe extern "C" fn export_handle_initialized() -> * mut u8 {
                        unsafe { $($path_to_types)*::
                        _export_handle_initialized_cabi::<$ty > () } } #[unsafe
                        (export_name =
                        "cabi_post_fastertools:mcp/core@0.1.1#handle-initialized")]
                        unsafe extern "C" fn _post_return_handle_initialized(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_handle_initialized::<$ty > (arg0) } } #[unsafe
                        (export_name = "fastertools:mcp/core@0.1.1#handle-ping")] unsafe
                        extern "C" fn export_handle_ping() -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_handle_ping_cabi::<$ty > () } }
                        #[unsafe (export_name =
                        "cabi_post_fastertools:mcp/core@0.1.1#handle-ping")] unsafe
                        extern "C" fn _post_return_handle_ping(arg0 : * mut u8,) { unsafe
                        { $($path_to_types)*:: __post_return_handle_ping::<$ty > (arg0) }
                        } #[unsafe (export_name =
                        "fastertools:mcp/core@0.1.1#handle-shutdown")] unsafe extern "C"
                        fn export_handle_shutdown() -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_handle_shutdown_cabi::<$ty > () } }
                        #[unsafe (export_name =
                        "cabi_post_fastertools:mcp/core@0.1.1#handle-shutdown")] unsafe
                        extern "C" fn _post_return_handle_shutdown(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: __post_return_handle_shutdown::<$ty
                        > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_fastertools_mcp_core_0_1_1_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 16 + 19 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 16
                        + 19 * ::core::mem::size_of::<*const u8>()],
                );
            }
            /// Prompt handler capability - implement this to provide prompts
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod prompt_handler {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type McpError = super::super::super::super::fastertools::mcp::types::McpError;
                pub type ListPromptsRequest = super::super::super::super::fastertools::mcp::prompts::ListPromptsRequest;
                pub type ListPromptsResponse = super::super::super::super::fastertools::mcp::prompts::ListPromptsResponse;
                pub type GetPromptRequest = super::super::super::super::fastertools::mcp::prompts::GetPromptRequest;
                pub type GetPromptResponse = super::super::super::super::fastertools::mcp::prompts::GetPromptResponse;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_list_prompts_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i32,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: i32,
                    arg7: *mut u8,
                    arg8: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result9 = T::handle_list_prompts(super::super::super::super::fastertools::mcp::prompts::ListPromptsRequest {
                        cursor: match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    let bytes0 = _rt::Vec::from_raw_parts(
                                        arg1.cast(),
                                        len0,
                                        len0,
                                    );
                                    _rt::string_lift(bytes0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        progress_token: match arg3 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len1 = arg5;
                                    let bytes1 = _rt::Vec::from_raw_parts(
                                        arg4.cast(),
                                        len1,
                                        len1,
                                    );
                                    _rt::string_lift(bytes1)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        meta: match arg6 {
                            0 => None,
                            1 => {
                                let e = {
                                    let base8 = arg7;
                                    let len8 = arg8;
                                    let mut result8 = _rt::Vec::with_capacity(len8);
                                    for i in 0..len8 {
                                        let base = base8
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        let e8 = {
                                            let l2 = *base.add(0).cast::<*mut u8>();
                                            let l3 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len4 = l3;
                                            let bytes4 = _rt::Vec::from_raw_parts(
                                                l2.cast(),
                                                len4,
                                                len4,
                                            );
                                            let l5 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l6 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len7 = l6;
                                            let bytes7 = _rt::Vec::from_raw_parts(
                                                l5.cast(),
                                                len7,
                                                len7,
                                            );
                                            (_rt::string_lift(bytes4), _rt::string_lift(bytes7))
                                        };
                                        result8.push(e8);
                                    }
                                    _rt::cabi_dealloc(
                                        base8,
                                        len8 * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    result8
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    });
                    let ptr10 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result9 {
                        Ok(e) => {
                            *ptr10.add(0).cast::<u8>() = (0i32) as u8;
                            let super::super::super::super::fastertools::mcp::prompts::ListPromptsResponse {
                                prompts: prompts11,
                                next_cursor: next_cursor11,
                                meta: meta11,
                            } = e;
                            let vec27 = prompts11;
                            let len27 = vec27.len();
                            let layout27 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec27.len() * (14 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result27 = if layout27.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout27).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout27);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec27.into_iter().enumerate() {
                                let base = result27
                                    .add(i * (14 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let super::super::super::super::fastertools::mcp::prompts::Prompt {
                                        base: base12,
                                        description: description12,
                                        arguments: arguments12,
                                        meta: meta12,
                                    } = e;
                                    let super::super::super::super::fastertools::mcp::types::BaseMetadata {
                                        name: name13,
                                        title: title13,
                                    } = base12;
                                    let vec14 = (name13.into_bytes()).into_boxed_slice();
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    ::core::mem::forget(vec14);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *base.add(0).cast::<*mut u8>() = ptr14.cast_mut();
                                    match title13 {
                                        Some(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec15 = (e.into_bytes()).into_boxed_slice();
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();
                                            ::core::mem::forget(vec15);
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len15;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr15.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match description12 {
                                        Some(e) => {
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec16 = (e.into_bytes()).into_boxed_slice();
                                            let ptr16 = vec16.as_ptr().cast::<u8>();
                                            let len16 = vec16.len();
                                            ::core::mem::forget(vec16);
                                            *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len16;
                                            *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr16.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match arguments12 {
                                        Some(e) => {
                                            *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec22 = e;
                                            let len22 = vec22.len();
                                            let layout22 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec22.len() * (9 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result22 = if layout22.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout22).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout22);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec22.into_iter().enumerate() {
                                                let base = result22
                                                    .add(i * (9 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let super::super::super::super::fastertools::mcp::prompts::PromptArgument {
                                                        base: base17,
                                                        description: description17,
                                                        required: required17,
                                                    } = e;
                                                    let super::super::super::super::fastertools::mcp::types::BaseMetadata {
                                                        name: name18,
                                                        title: title18,
                                                    } = base17;
                                                    let vec19 = (name18.into_bytes()).into_boxed_slice();
                                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                                    let len19 = vec19.len();
                                                    ::core::mem::forget(vec19);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len19;
                                                    *base.add(0).cast::<*mut u8>() = ptr19.cast_mut();
                                                    match title18 {
                                                        Some(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec20 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                                            let len20 = vec20.len();
                                                            ::core::mem::forget(vec20);
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len20;
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr20.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match description17 {
                                                        Some(e) => {
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec21 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                                            let len21 = vec21.len();
                                                            ::core::mem::forget(vec21);
                                                            *base
                                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len21;
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr21.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match required17 {
                                                        Some(e) => {
                                                            *base
                                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(1 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            }) as u8;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len22;
                                            *base
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result22;
                                        }
                                        None => {
                                            *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match meta12 {
                                        Some(e) => {
                                            *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec26 = e;
                                            let len26 = vec26.len();
                                            let layout26 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec26.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result26 = if layout26.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout26).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout26);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec26.into_iter().enumerate() {
                                                let base = result26
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t23_0, t23_1) = e;
                                                    let vec24 = (t23_0.into_bytes()).into_boxed_slice();
                                                    let ptr24 = vec24.as_ptr().cast::<u8>();
                                                    let len24 = vec24.len();
                                                    ::core::mem::forget(vec24);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len24;
                                                    *base.add(0).cast::<*mut u8>() = ptr24.cast_mut();
                                                    let vec25 = (t23_1.into_bytes()).into_boxed_slice();
                                                    let ptr25 = vec25.as_ptr().cast::<u8>();
                                                    let len25 = vec25.len();
                                                    ::core::mem::forget(vec25);
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len25;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr25.cast_mut();
                                                }
                                            }
                                            *base
                                                .add(13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len26;
                                            *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result26;
                                        }
                                        None => {
                                            *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                            *ptr10
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len27;
                            *ptr10
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result27;
                            match next_cursor11 {
                                Some(e) => {
                                    *ptr10
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec28 = (e.into_bytes()).into_boxed_slice();
                                    let ptr28 = vec28.as_ptr().cast::<u8>();
                                    let len28 = vec28.len();
                                    ::core::mem::forget(vec28);
                                    *ptr10
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len28;
                                    *ptr10
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr28.cast_mut();
                                }
                                None => {
                                    *ptr10
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match meta11 {
                                Some(e) => {
                                    *ptr10
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec32 = e;
                                    let len32 = vec32.len();
                                    let layout32 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec32.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result32 = if layout32.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout32).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout32);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec32.into_iter().enumerate() {
                                        let base = result32
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t29_0, t29_1) = e;
                                            let vec30 = (t29_0.into_bytes()).into_boxed_slice();
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();
                                            ::core::mem::forget(vec30);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len30;
                                            *base.add(0).cast::<*mut u8>() = ptr30.cast_mut();
                                            let vec31 = (t29_1.into_bytes()).into_boxed_slice();
                                            let ptr31 = vec31.as_ptr().cast::<u8>();
                                            let len31 = vec31.len();
                                            ::core::mem::forget(vec31);
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len31;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr31.cast_mut();
                                        }
                                    }
                                    *ptr10
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len32;
                                    *ptr10
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result32;
                                }
                                None => {
                                    *ptr10
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr10.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::fastertools::mcp::types::McpError {
                                code: code33,
                                message: message33,
                                data: data33,
                            } = e;
                            use super::super::super::super::fastertools::mcp::types::ErrorCode as V34;
                            match code33 {
                                V34::ParseError => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                V34::InvalidRequest => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                }
                                V34::MethodNotFound => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                }
                                V34::InvalidParams => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                }
                                V34::InternalError => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                }
                                V34::ResourceNotFound => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                }
                                V34::ToolNotFound => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                }
                                V34::PromptNotFound => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                }
                                V34::Unauthorized => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                }
                                V34::RateLimited => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                }
                                V34::Timeout => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (10i32) as u8;
                                }
                                V34::Cancelled => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (11i32) as u8;
                                }
                                V34::CustomCode(e) => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (12i32) as u8;
                                    *ptr10
                                        .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                            }
                            let vec35 = (message33.into_bytes()).into_boxed_slice();
                            let ptr35 = vec35.as_ptr().cast::<u8>();
                            let len35 = vec35.len();
                            ::core::mem::forget(vec35);
                            *ptr10
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len35;
                            *ptr10
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr35.cast_mut();
                            match data33 {
                                Some(e) => {
                                    *ptr10
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec36 = (e.into_bytes()).into_boxed_slice();
                                    let ptr36 = vec36.as_ptr().cast::<u8>();
                                    let len36 = vec36.len();
                                    ::core::mem::forget(vec36);
                                    *ptr10
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len36;
                                    *ptr10
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr36.cast_mut();
                                }
                                None => {
                                    *ptr10
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    };
                    ptr10
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_list_prompts<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base31 = l1;
                            let len31 = l2;
                            for i in 0..len31 {
                                let base = base31
                                    .add(i * (14 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                    let l5 = i32::from(
                                        *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l5 {
                                        0 => {}
                                        _ => {
                                            let l6 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l7 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l6, l7, 1);
                                        }
                                    }
                                    let l8 = i32::from(
                                        *base
                                            .add(5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l8 {
                                        0 => {}
                                        _ => {
                                            let l9 = *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l10 = *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l9, l10, 1);
                                        }
                                    }
                                    let l11 = i32::from(
                                        *base
                                            .add(8 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l11 {
                                        0 => {}
                                        _ => {
                                            let l12 = *base
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l13 = *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base22 = l12;
                                            let len22 = l13;
                                            for i in 0..len22 {
                                                let base = base22
                                                    .add(i * (9 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l14 = *base.add(0).cast::<*mut u8>();
                                                    let l15 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l14, l15, 1);
                                                    let l16 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l16 {
                                                        0 => {}
                                                        _ => {
                                                            let l17 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l18 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l17, l18, 1);
                                                        }
                                                    }
                                                    let l19 = i32::from(
                                                        *base
                                                            .add(5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l19 {
                                                        0 => {}
                                                        _ => {
                                                            let l20 = *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l21 = *base
                                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l20, l21, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base22,
                                                len22 * (9 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                    }
                                    let l23 = i32::from(
                                        *base
                                            .add(11 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l23 {
                                        0 => {}
                                        _ => {
                                            let l24 = *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l25 = *base
                                                .add(13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base30 = l24;
                                            let len30 = l25;
                                            for i in 0..len30 {
                                                let base = base30
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l26 = *base.add(0).cast::<*mut u8>();
                                                    let l27 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l26, l27, 1);
                                                    let l28 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l29 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l28, l29, 1);
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base30,
                                                len30 * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base31,
                                len31 * (14 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let l32 = i32::from(
                                *arg0
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l32 {
                                0 => {}
                                _ => {
                                    let l33 = *arg0
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l34 = *arg0
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l33, l34, 1);
                                }
                            }
                            let l35 = i32::from(
                                *arg0
                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l35 {
                                0 => {}
                                _ => {
                                    let l36 = *arg0
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l37 = *arg0
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base42 = l36;
                                    let len42 = l37;
                                    for i in 0..len42 {
                                        let base = base42
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l38 = *base.add(0).cast::<*mut u8>();
                                            let l39 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l38, l39, 1);
                                            let l40 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l41 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l40, l41, 1);
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base42,
                                        len42 * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                            }
                        }
                        _ => {
                            let l43 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l44 = *arg0
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l43, l44, 1);
                            let l45 = i32::from(
                                *arg0
                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l45 {
                                0 => {}
                                _ => {
                                    let l46 = *arg0
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l47 = *arg0
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l46, l47, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_get_prompt_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: i32,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: i32,
                    arg6: *mut u8,
                    arg7: usize,
                    arg8: i32,
                    arg9: *mut u8,
                    arg10: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result16 = T::handle_get_prompt(super::super::super::super::fastertools::mcp::prompts::GetPromptRequest {
                        name: _rt::string_lift(bytes0),
                        arguments: match arg2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let base7 = arg3;
                                    let len7 = arg4;
                                    let mut result7 = _rt::Vec::with_capacity(len7);
                                    for i in 0..len7 {
                                        let base = base7
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        let e7 = {
                                            let l1 = *base.add(0).cast::<*mut u8>();
                                            let l2 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len3 = l2;
                                            let bytes3 = _rt::Vec::from_raw_parts(
                                                l1.cast(),
                                                len3,
                                                len3,
                                            );
                                            let l4 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l5 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len6 = l5;
                                            let bytes6 = _rt::Vec::from_raw_parts(
                                                l4.cast(),
                                                len6,
                                                len6,
                                            );
                                            (_rt::string_lift(bytes3), _rt::string_lift(bytes6))
                                        };
                                        result7.push(e7);
                                    }
                                    _rt::cabi_dealloc(
                                        base7,
                                        len7 * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    result7
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        progress_token: match arg5 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len8 = arg7;
                                    let bytes8 = _rt::Vec::from_raw_parts(
                                        arg6.cast(),
                                        len8,
                                        len8,
                                    );
                                    _rt::string_lift(bytes8)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        meta: match arg8 {
                            0 => None,
                            1 => {
                                let e = {
                                    let base15 = arg9;
                                    let len15 = arg10;
                                    let mut result15 = _rt::Vec::with_capacity(len15);
                                    for i in 0..len15 {
                                        let base = base15
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        let e15 = {
                                            let l9 = *base.add(0).cast::<*mut u8>();
                                            let l10 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len11 = l10;
                                            let bytes11 = _rt::Vec::from_raw_parts(
                                                l9.cast(),
                                                len11,
                                                len11,
                                            );
                                            let l12 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l13 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len14 = l13;
                                            let bytes14 = _rt::Vec::from_raw_parts(
                                                l12.cast(),
                                                len14,
                                                len14,
                                            );
                                            (_rt::string_lift(bytes11), _rt::string_lift(bytes14))
                                        };
                                        result15.push(e15);
                                    }
                                    _rt::cabi_dealloc(
                                        base15,
                                        len15 * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    result15
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    });
                    let ptr17 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result16 {
                        Ok(e) => {
                            *ptr17.add(0).cast::<u8>() = (0i32) as u8;
                            let super::super::super::super::fastertools::mcp::prompts::GetPromptResponse {
                                description: description18,
                                messages: messages18,
                                meta: meta18,
                            } = e;
                            match description18 {
                                Some(e) => {
                                    *ptr17
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec19 = (e.into_bytes()).into_boxed_slice();
                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                    let len19 = vec19.len();
                                    ::core::mem::forget(vec19);
                                    *ptr17
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len19;
                                    *ptr17
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr19.cast_mut();
                                }
                                None => {
                                    *ptr17
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let vec88 = messages18;
                            let len88 = vec88.len();
                            let layout88 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec88.len()
                                    * (80 + 16 * ::core::mem::size_of::<*const u8>()),
                                8,
                            );
                            let result88 = if layout88.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout88).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout88);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec88.into_iter().enumerate() {
                                let base = result88
                                    .add(i * (80 + 16 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let super::super::super::super::fastertools::mcp::prompts::PromptMessage {
                                        role: role20,
                                        content: content20,
                                    } = e;
                                    *base.add(0).cast::<u8>() = (role20.clone() as i32) as u8;
                                    use super::super::super::super::fastertools::mcp::types::ContentBlock as V87;
                                    match content20 {
                                        V87::Text(e) => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                            let super::super::super::super::fastertools::mcp::types::TextContent {
                                                text: text21,
                                                annotations: annotations21,
                                                meta: meta21,
                                            } = e;
                                            let vec22 = (text21.into_bytes()).into_boxed_slice();
                                            let ptr22 = vec22.as_ptr().cast::<u8>();
                                            let len22 = vec22.len();
                                            ::core::mem::forget(vec22);
                                            *base
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len22;
                                            *base.add(16).cast::<*mut u8>() = ptr22.cast_mut();
                                            match annotations21 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::fastertools::mcp::types::Annotations {
                                                        audience: audience23,
                                                        priority: priority23,
                                                        last_modified: last_modified23,
                                                    } = e;
                                                    match audience23 {
                                                        Some(e) => {
                                                            *base
                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec24 = e;
                                                            let len24 = vec24.len();
                                                            let layout24 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec24.len() * 1,
                                                                1,
                                                            );
                                                            let result24 = if layout24.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout24);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec24.into_iter().enumerate() {
                                                                let base = result24.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                                }
                                                            }
                                                            *base
                                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len24;
                                                            *base
                                                                .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result24;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match priority23 {
                                                        Some(e) => {
                                                            *base
                                                                .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match last_modified23 {
                                                        Some(e) => {
                                                            *base
                                                                .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec25 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr25 = vec25.as_ptr().cast::<u8>();
                                                            let len25 = vec25.len();
                                                            ::core::mem::forget(vec25);
                                                            *base
                                                                .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len25;
                                                            *base
                                                                .add(48 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr25.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match meta21 {
                                                Some(e) => {
                                                    *base
                                                        .add(56 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec29 = e;
                                                    let len29 = vec29.len();
                                                    let layout29 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec29.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result29 = if layout29.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout29).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout29);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec29.into_iter().enumerate() {
                                                        let base = result29
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t26_0, t26_1) = e;
                                                            let vec27 = (t26_0.into_bytes()).into_boxed_slice();
                                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                                            let len27 = vec27.len();
                                                            ::core::mem::forget(vec27);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len27;
                                                            *base.add(0).cast::<*mut u8>() = ptr27.cast_mut();
                                                            let vec28 = (t26_1.into_bytes()).into_boxed_slice();
                                                            let ptr28 = vec28.as_ptr().cast::<u8>();
                                                            let len28 = vec28.len();
                                                            ::core::mem::forget(vec28);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len28;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr28.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len29;
                                                    *base
                                                        .add(56 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result29;
                                                }
                                                None => {
                                                    *base
                                                        .add(56 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        V87::Image(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            let super::super::super::super::fastertools::mcp::types::ImageContent {
                                                data: data30,
                                                mime_type: mime_type30,
                                                annotations: annotations30,
                                                meta: meta30,
                                            } = e;
                                            let vec31 = (data30).into_boxed_slice();
                                            let ptr31 = vec31.as_ptr().cast::<u8>();
                                            let len31 = vec31.len();
                                            ::core::mem::forget(vec31);
                                            *base
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len31;
                                            *base.add(16).cast::<*mut u8>() = ptr31.cast_mut();
                                            let vec32 = (mime_type30.into_bytes()).into_boxed_slice();
                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                            let len32 = vec32.len();
                                            ::core::mem::forget(vec32);
                                            *base
                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len32;
                                            *base
                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr32.cast_mut();
                                            match annotations30 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::fastertools::mcp::types::Annotations {
                                                        audience: audience33,
                                                        priority: priority33,
                                                        last_modified: last_modified33,
                                                    } = e;
                                                    match audience33 {
                                                        Some(e) => {
                                                            *base
                                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec34 = e;
                                                            let len34 = vec34.len();
                                                            let layout34 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec34.len() * 1,
                                                                1,
                                                            );
                                                            let result34 = if layout34.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout34).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout34);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec34.into_iter().enumerate() {
                                                                let base = result34.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                                }
                                                            }
                                                            *base
                                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len34;
                                                            *base
                                                                .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result34;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match priority33 {
                                                        Some(e) => {
                                                            *base
                                                                .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match last_modified33 {
                                                        Some(e) => {
                                                            *base
                                                                .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec35 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr35 = vec35.as_ptr().cast::<u8>();
                                                            let len35 = vec35.len();
                                                            ::core::mem::forget(vec35);
                                                            *base
                                                                .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len35;
                                                            *base
                                                                .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr35.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match meta30 {
                                                Some(e) => {
                                                    *base
                                                        .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec39 = e;
                                                    let len39 = vec39.len();
                                                    let layout39 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec39.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result39 = if layout39.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout39).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout39);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec39.into_iter().enumerate() {
                                                        let base = result39
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t36_0, t36_1) = e;
                                                            let vec37 = (t36_0.into_bytes()).into_boxed_slice();
                                                            let ptr37 = vec37.as_ptr().cast::<u8>();
                                                            let len37 = vec37.len();
                                                            ::core::mem::forget(vec37);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len37;
                                                            *base.add(0).cast::<*mut u8>() = ptr37.cast_mut();
                                                            let vec38 = (t36_1.into_bytes()).into_boxed_slice();
                                                            let ptr38 = vec38.as_ptr().cast::<u8>();
                                                            let len38 = vec38.len();
                                                            ::core::mem::forget(vec38);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len38;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr38.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(56 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len39;
                                                    *base
                                                        .add(56 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result39;
                                                }
                                                None => {
                                                    *base
                                                        .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        V87::Audio(e) => {
                                            *base.add(8).cast::<u8>() = (2i32) as u8;
                                            let super::super::super::super::fastertools::mcp::types::AudioContent {
                                                data: data40,
                                                mime_type: mime_type40,
                                                annotations: annotations40,
                                                meta: meta40,
                                            } = e;
                                            let vec41 = (data40).into_boxed_slice();
                                            let ptr41 = vec41.as_ptr().cast::<u8>();
                                            let len41 = vec41.len();
                                            ::core::mem::forget(vec41);
                                            *base
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len41;
                                            *base.add(16).cast::<*mut u8>() = ptr41.cast_mut();
                                            let vec42 = (mime_type40.into_bytes()).into_boxed_slice();
                                            let ptr42 = vec42.as_ptr().cast::<u8>();
                                            let len42 = vec42.len();
                                            ::core::mem::forget(vec42);
                                            *base
                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len42;
                                            *base
                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr42.cast_mut();
                                            match annotations40 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::fastertools::mcp::types::Annotations {
                                                        audience: audience43,
                                                        priority: priority43,
                                                        last_modified: last_modified43,
                                                    } = e;
                                                    match audience43 {
                                                        Some(e) => {
                                                            *base
                                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec44 = e;
                                                            let len44 = vec44.len();
                                                            let layout44 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec44.len() * 1,
                                                                1,
                                                            );
                                                            let result44 = if layout44.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout44).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout44);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec44.into_iter().enumerate() {
                                                                let base = result44.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                                }
                                                            }
                                                            *base
                                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len44;
                                                            *base
                                                                .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result44;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match priority43 {
                                                        Some(e) => {
                                                            *base
                                                                .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match last_modified43 {
                                                        Some(e) => {
                                                            *base
                                                                .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec45 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr45 = vec45.as_ptr().cast::<u8>();
                                                            let len45 = vec45.len();
                                                            ::core::mem::forget(vec45);
                                                            *base
                                                                .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len45;
                                                            *base
                                                                .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr45.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match meta40 {
                                                Some(e) => {
                                                    *base
                                                        .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec49 = e;
                                                    let len49 = vec49.len();
                                                    let layout49 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec49.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result49 = if layout49.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout49).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout49);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec49.into_iter().enumerate() {
                                                        let base = result49
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t46_0, t46_1) = e;
                                                            let vec47 = (t46_0.into_bytes()).into_boxed_slice();
                                                            let ptr47 = vec47.as_ptr().cast::<u8>();
                                                            let len47 = vec47.len();
                                                            ::core::mem::forget(vec47);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len47;
                                                            *base.add(0).cast::<*mut u8>() = ptr47.cast_mut();
                                                            let vec48 = (t46_1.into_bytes()).into_boxed_slice();
                                                            let ptr48 = vec48.as_ptr().cast::<u8>();
                                                            let len48 = vec48.len();
                                                            ::core::mem::forget(vec48);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len48;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr48.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(56 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len49;
                                                    *base
                                                        .add(56 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result49;
                                                }
                                                None => {
                                                    *base
                                                        .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        V87::ResourceLink(e) => {
                                            *base.add(8).cast::<u8>() = (3i32) as u8;
                                            let super::super::super::super::fastertools::mcp::types::ResourceLink {
                                                uri: uri50,
                                                name: name50,
                                                description: description50,
                                                mime_type: mime_type50,
                                                size: size50,
                                                annotations: annotations50,
                                                meta: meta50,
                                            } = e;
                                            let vec51 = (uri50.into_bytes()).into_boxed_slice();
                                            let ptr51 = vec51.as_ptr().cast::<u8>();
                                            let len51 = vec51.len();
                                            ::core::mem::forget(vec51);
                                            *base
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len51;
                                            *base.add(16).cast::<*mut u8>() = ptr51.cast_mut();
                                            let vec52 = (name50.into_bytes()).into_boxed_slice();
                                            let ptr52 = vec52.as_ptr().cast::<u8>();
                                            let len52 = vec52.len();
                                            ::core::mem::forget(vec52);
                                            *base
                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len52;
                                            *base
                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr52.cast_mut();
                                            match description50 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec53 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr53 = vec53.as_ptr().cast::<u8>();
                                                    let len53 = vec53.len();
                                                    ::core::mem::forget(vec53);
                                                    *base
                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len53;
                                                    *base
                                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr53.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match mime_type50 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec54 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr54 = vec54.as_ptr().cast::<u8>();
                                                    let len54 = vec54.len();
                                                    ::core::mem::forget(vec54);
                                                    *base
                                                        .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len54;
                                                    *base
                                                        .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr54.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match size50 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i64>() = _rt::as_i64(e);
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match annotations50 {
                                                Some(e) => {
                                                    *base
                                                        .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::fastertools::mcp::types::Annotations {
                                                        audience: audience55,
                                                        priority: priority55,
                                                        last_modified: last_modified55,
                                                    } = e;
                                                    match audience55 {
                                                        Some(e) => {
                                                            *base
                                                                .add(40 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec56 = e;
                                                            let len56 = vec56.len();
                                                            let layout56 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec56.len() * 1,
                                                                1,
                                                            );
                                                            let result56 = if layout56.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout56).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout56);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec56.into_iter().enumerate() {
                                                                let base = result56.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                                }
                                                            }
                                                            *base
                                                                .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len56;
                                                            *base
                                                                .add(40 + 11 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result56;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(40 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match priority55 {
                                                        Some(e) => {
                                                            *base
                                                                .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(56 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match last_modified55 {
                                                        Some(e) => {
                                                            *base
                                                                .add(64 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec57 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr57 = vec57.as_ptr().cast::<u8>();
                                                            let len57 = vec57.len();
                                                            ::core::mem::forget(vec57);
                                                            *base
                                                                .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len57;
                                                            *base
                                                                .add(64 + 13 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr57.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(64 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                None => {
                                                    *base
                                                        .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match meta50 {
                                                Some(e) => {
                                                    *base
                                                        .add(72 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec61 = e;
                                                    let len61 = vec61.len();
                                                    let layout61 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec61.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result61 = if layout61.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout61).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout61);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec61.into_iter().enumerate() {
                                                        let base = result61
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t58_0, t58_1) = e;
                                                            let vec59 = (t58_0.into_bytes()).into_boxed_slice();
                                                            let ptr59 = vec59.as_ptr().cast::<u8>();
                                                            let len59 = vec59.len();
                                                            ::core::mem::forget(vec59);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len59;
                                                            *base.add(0).cast::<*mut u8>() = ptr59.cast_mut();
                                                            let vec60 = (t58_1.into_bytes()).into_boxed_slice();
                                                            let ptr60 = vec60.as_ptr().cast::<u8>();
                                                            let len60 = vec60.len();
                                                            ::core::mem::forget(vec60);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len60;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr60.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(72 + 16 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len61;
                                                    *base
                                                        .add(72 + 15 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result61;
                                                }
                                                None => {
                                                    *base
                                                        .add(72 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        V87::EmbeddedResource(e) => {
                                            *base.add(8).cast::<u8>() = (4i32) as u8;
                                            let super::super::super::super::fastertools::mcp::types::EmbeddedResource {
                                                contents: contents62,
                                                annotations: annotations62,
                                                meta: meta62,
                                            } = e;
                                            use super::super::super::super::fastertools::mcp::types::ResourceContents as V79;
                                            match contents62 {
                                                V79::Text(e) => {
                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    let super::super::super::super::fastertools::mcp::types::TextResourceContents {
                                                        uri: uri63,
                                                        mime_type: mime_type63,
                                                        text: text63,
                                                        meta: meta63,
                                                    } = e;
                                                    let vec64 = (uri63.into_bytes()).into_boxed_slice();
                                                    let ptr64 = vec64.as_ptr().cast::<u8>();
                                                    let len64 = vec64.len();
                                                    ::core::mem::forget(vec64);
                                                    *base
                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len64;
                                                    *base
                                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr64.cast_mut();
                                                    match mime_type63 {
                                                        Some(e) => {
                                                            *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec65 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr65 = vec65.as_ptr().cast::<u8>();
                                                            let len65 = vec65.len();
                                                            ::core::mem::forget(vec65);
                                                            *base
                                                                .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len65;
                                                            *base
                                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr65.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    let vec66 = (text63.into_bytes()).into_boxed_slice();
                                                    let ptr66 = vec66.as_ptr().cast::<u8>();
                                                    let len66 = vec66.len();
                                                    ::core::mem::forget(vec66);
                                                    *base
                                                        .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len66;
                                                    *base
                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr66.cast_mut();
                                                    match meta63 {
                                                        Some(e) => {
                                                            *base
                                                                .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec70 = e;
                                                            let len70 = vec70.len();
                                                            let layout70 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec70.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result70 = if layout70.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout70).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout70);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec70.into_iter().enumerate() {
                                                                let base = result70
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t67_0, t67_1) = e;
                                                                    let vec68 = (t67_0.into_bytes()).into_boxed_slice();
                                                                    let ptr68 = vec68.as_ptr().cast::<u8>();
                                                                    let len68 = vec68.len();
                                                                    ::core::mem::forget(vec68);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len68;
                                                                    *base.add(0).cast::<*mut u8>() = ptr68.cast_mut();
                                                                    let vec69 = (t67_1.into_bytes()).into_boxed_slice();
                                                                    let ptr69 = vec69.as_ptr().cast::<u8>();
                                                                    let len69 = vec69.len();
                                                                    ::core::mem::forget(vec69);
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len69;
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr69.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len70;
                                                            *base
                                                                .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result70;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V79::Blob(e) => {
                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::fastertools::mcp::types::BlobResourceContents {
                                                        uri: uri71,
                                                        mime_type: mime_type71,
                                                        blob: blob71,
                                                        meta: meta71,
                                                    } = e;
                                                    let vec72 = (uri71.into_bytes()).into_boxed_slice();
                                                    let ptr72 = vec72.as_ptr().cast::<u8>();
                                                    let len72 = vec72.len();
                                                    ::core::mem::forget(vec72);
                                                    *base
                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len72;
                                                    *base
                                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr72.cast_mut();
                                                    match mime_type71 {
                                                        Some(e) => {
                                                            *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec73 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr73 = vec73.as_ptr().cast::<u8>();
                                                            let len73 = vec73.len();
                                                            ::core::mem::forget(vec73);
                                                            *base
                                                                .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len73;
                                                            *base
                                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr73.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    let vec74 = (blob71).into_boxed_slice();
                                                    let ptr74 = vec74.as_ptr().cast::<u8>();
                                                    let len74 = vec74.len();
                                                    ::core::mem::forget(vec74);
                                                    *base
                                                        .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len74;
                                                    *base
                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr74.cast_mut();
                                                    match meta71 {
                                                        Some(e) => {
                                                            *base
                                                                .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec78 = e;
                                                            let len78 = vec78.len();
                                                            let layout78 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec78.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result78 = if layout78.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout78).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout78);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec78.into_iter().enumerate() {
                                                                let base = result78
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t75_0, t75_1) = e;
                                                                    let vec76 = (t75_0.into_bytes()).into_boxed_slice();
                                                                    let ptr76 = vec76.as_ptr().cast::<u8>();
                                                                    let len76 = vec76.len();
                                                                    ::core::mem::forget(vec76);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len76;
                                                                    *base.add(0).cast::<*mut u8>() = ptr76.cast_mut();
                                                                    let vec77 = (t75_1.into_bytes()).into_boxed_slice();
                                                                    let ptr77 = vec77.as_ptr().cast::<u8>();
                                                                    let len77 = vec77.len();
                                                                    ::core::mem::forget(vec77);
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len77;
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr77.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len78;
                                                            *base
                                                                .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result78;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                            match annotations62 {
                                                Some(e) => {
                                                    *base
                                                        .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::fastertools::mcp::types::Annotations {
                                                        audience: audience80,
                                                        priority: priority80,
                                                        last_modified: last_modified80,
                                                    } = e;
                                                    match audience80 {
                                                        Some(e) => {
                                                            *base
                                                                .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec81 = e;
                                                            let len81 = vec81.len();
                                                            let layout81 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec81.len() * 1,
                                                                1,
                                                            );
                                                            let result81 = if layout81.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout81).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout81);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec81.into_iter().enumerate() {
                                                                let base = result81.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                                }
                                                            }
                                                            *base
                                                                .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len81;
                                                            *base
                                                                .add(32 + 11 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result81;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match priority80 {
                                                        Some(e) => {
                                                            *base
                                                                .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match last_modified80 {
                                                        Some(e) => {
                                                            *base
                                                                .add(56 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec82 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr82 = vec82.as_ptr().cast::<u8>();
                                                            let len82 = vec82.len();
                                                            ::core::mem::forget(vec82);
                                                            *base
                                                                .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len82;
                                                            *base
                                                                .add(56 + 13 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr82.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(56 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                None => {
                                                    *base
                                                        .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match meta62 {
                                                Some(e) => {
                                                    *base
                                                        .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec86 = e;
                                                    let len86 = vec86.len();
                                                    let layout86 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec86.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result86 = if layout86.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout86).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout86);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec86.into_iter().enumerate() {
                                                        let base = result86
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t83_0, t83_1) = e;
                                                            let vec84 = (t83_0.into_bytes()).into_boxed_slice();
                                                            let ptr84 = vec84.as_ptr().cast::<u8>();
                                                            let len84 = vec84.len();
                                                            ::core::mem::forget(vec84);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len84;
                                                            *base.add(0).cast::<*mut u8>() = ptr84.cast_mut();
                                                            let vec85 = (t83_1.into_bytes()).into_boxed_slice();
                                                            let ptr85 = vec85.as_ptr().cast::<u8>();
                                                            let len85 = vec85.len();
                                                            ::core::mem::forget(vec85);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len85;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr85.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(64 + 16 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len86;
                                                    *base
                                                        .add(64 + 15 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result86;
                                                }
                                                None => {
                                                    *base
                                                        .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                }
                            }
                            *ptr17
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len88;
                            *ptr17
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result88;
                            match meta18 {
                                Some(e) => {
                                    *ptr17
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec92 = e;
                                    let len92 = vec92.len();
                                    let layout92 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec92.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result92 = if layout92.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout92).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout92);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec92.into_iter().enumerate() {
                                        let base = result92
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t89_0, t89_1) = e;
                                            let vec90 = (t89_0.into_bytes()).into_boxed_slice();
                                            let ptr90 = vec90.as_ptr().cast::<u8>();
                                            let len90 = vec90.len();
                                            ::core::mem::forget(vec90);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len90;
                                            *base.add(0).cast::<*mut u8>() = ptr90.cast_mut();
                                            let vec91 = (t89_1.into_bytes()).into_boxed_slice();
                                            let ptr91 = vec91.as_ptr().cast::<u8>();
                                            let len91 = vec91.len();
                                            ::core::mem::forget(vec91);
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len91;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr91.cast_mut();
                                        }
                                    }
                                    *ptr17
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len92;
                                    *ptr17
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result92;
                                }
                                None => {
                                    *ptr17
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr17.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::fastertools::mcp::types::McpError {
                                code: code93,
                                message: message93,
                                data: data93,
                            } = e;
                            use super::super::super::super::fastertools::mcp::types::ErrorCode as V94;
                            match code93 {
                                V94::ParseError => {
                                    *ptr17
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                V94::InvalidRequest => {
                                    *ptr17
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                }
                                V94::MethodNotFound => {
                                    *ptr17
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                }
                                V94::InvalidParams => {
                                    *ptr17
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                }
                                V94::InternalError => {
                                    *ptr17
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                }
                                V94::ResourceNotFound => {
                                    *ptr17
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                }
                                V94::ToolNotFound => {
                                    *ptr17
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                }
                                V94::PromptNotFound => {
                                    *ptr17
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                }
                                V94::Unauthorized => {
                                    *ptr17
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                }
                                V94::RateLimited => {
                                    *ptr17
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                }
                                V94::Timeout => {
                                    *ptr17
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (10i32) as u8;
                                }
                                V94::Cancelled => {
                                    *ptr17
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (11i32) as u8;
                                }
                                V94::CustomCode(e) => {
                                    *ptr17
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (12i32) as u8;
                                    *ptr17
                                        .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                            }
                            let vec95 = (message93.into_bytes()).into_boxed_slice();
                            let ptr95 = vec95.as_ptr().cast::<u8>();
                            let len95 = vec95.len();
                            ::core::mem::forget(vec95);
                            *ptr17
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len95;
                            *ptr17
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr95.cast_mut();
                            match data93 {
                                Some(e) => {
                                    *ptr17
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec96 = (e.into_bytes()).into_boxed_slice();
                                    let ptr96 = vec96.as_ptr().cast::<u8>();
                                    let len96 = vec96.len();
                                    ::core::mem::forget(vec96);
                                    *ptr17
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len96;
                                    *ptr17
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr96.cast_mut();
                                }
                                None => {
                                    *ptr17
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    };
                    ptr17
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_get_prompt<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                            }
                            let l4 = *arg0
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l5 = *arg0
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base141 = l4;
                            let len141 = l5;
                            for i in 0..len141 {
                                let base = base141
                                    .add(i * (80 + 16 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l6 = i32::from(*base.add(8).cast::<u8>());
                                    match l6 {
                                        0 => {
                                            let l7 = *base.add(16).cast::<*mut u8>();
                                            let l8 = *base
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l7, l8, 1);
                                            let l9 = i32::from(
                                                *base
                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l9 {
                                                0 => {}
                                                _ => {
                                                    let l10 = i32::from(
                                                        *base
                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l10 {
                                                        0 => {}
                                                        _ => {
                                                            let l11 = *base
                                                                .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l12 = *base
                                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base13 = l11;
                                                            let len13 = l12;
                                                            _rt::cabi_dealloc(base13, len13 * 1, 1);
                                                        }
                                                    }
                                                    let l14 = i32::from(
                                                        *base
                                                            .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l14 {
                                                        0 => {}
                                                        _ => {
                                                            let l15 = *base
                                                                .add(48 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l16 = *base
                                                                .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l15, l16, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            let l17 = i32::from(
                                                *base
                                                    .add(56 + 6 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l17 {
                                                0 => {}
                                                _ => {
                                                    let l18 = *base
                                                        .add(56 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l19 = *base
                                                        .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base24 = l18;
                                                    let len24 = l19;
                                                    for i in 0..len24 {
                                                        let base = base24
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l20 = *base.add(0).cast::<*mut u8>();
                                                            let l21 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l20, l21, 1);
                                                            let l22 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l23 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l22, l23, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base24,
                                                        len24 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                            }
                                        }
                                        1 => {
                                            let l25 = *base.add(16).cast::<*mut u8>();
                                            let l26 = *base
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base27 = l25;
                                            let len27 = l26;
                                            _rt::cabi_dealloc(base27, len27 * 1, 1);
                                            let l28 = *base
                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l29 = *base
                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l28, l29, 1);
                                            let l30 = i32::from(
                                                *base
                                                    .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l30 {
                                                0 => {}
                                                _ => {
                                                    let l31 = i32::from(
                                                        *base
                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l31 {
                                                        0 => {}
                                                        _ => {
                                                            let l32 = *base
                                                                .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l33 = *base
                                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base34 = l32;
                                                            let len34 = l33;
                                                            _rt::cabi_dealloc(base34, len34 * 1, 1);
                                                        }
                                                    }
                                                    let l35 = i32::from(
                                                        *base
                                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l35 {
                                                        0 => {}
                                                        _ => {
                                                            let l36 = *base
                                                                .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l37 = *base
                                                                .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l36, l37, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            let l38 = i32::from(
                                                *base
                                                    .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l38 {
                                                0 => {}
                                                _ => {
                                                    let l39 = *base
                                                        .add(56 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l40 = *base
                                                        .add(56 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base45 = l39;
                                                    let len45 = l40;
                                                    for i in 0..len45 {
                                                        let base = base45
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l41 = *base.add(0).cast::<*mut u8>();
                                                            let l42 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l41, l42, 1);
                                                            let l43 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l44 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l43, l44, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base45,
                                                        len45 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                            }
                                        }
                                        2 => {
                                            let l46 = *base.add(16).cast::<*mut u8>();
                                            let l47 = *base
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base48 = l46;
                                            let len48 = l47;
                                            _rt::cabi_dealloc(base48, len48 * 1, 1);
                                            let l49 = *base
                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l50 = *base
                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l49, l50, 1);
                                            let l51 = i32::from(
                                                *base
                                                    .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l51 {
                                                0 => {}
                                                _ => {
                                                    let l52 = i32::from(
                                                        *base
                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l52 {
                                                        0 => {}
                                                        _ => {
                                                            let l53 = *base
                                                                .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l54 = *base
                                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base55 = l53;
                                                            let len55 = l54;
                                                            _rt::cabi_dealloc(base55, len55 * 1, 1);
                                                        }
                                                    }
                                                    let l56 = i32::from(
                                                        *base
                                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l56 {
                                                        0 => {}
                                                        _ => {
                                                            let l57 = *base
                                                                .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l58 = *base
                                                                .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l57, l58, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            let l59 = i32::from(
                                                *base
                                                    .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l59 {
                                                0 => {}
                                                _ => {
                                                    let l60 = *base
                                                        .add(56 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l61 = *base
                                                        .add(56 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base66 = l60;
                                                    let len66 = l61;
                                                    for i in 0..len66 {
                                                        let base = base66
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l62 = *base.add(0).cast::<*mut u8>();
                                                            let l63 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l62, l63, 1);
                                                            let l64 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l65 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l64, l65, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base66,
                                                        len66 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                            }
                                        }
                                        3 => {
                                            let l67 = *base.add(16).cast::<*mut u8>();
                                            let l68 = *base
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l67, l68, 1);
                                            let l69 = *base
                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l70 = *base
                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l69, l70, 1);
                                            let l71 = i32::from(
                                                *base
                                                    .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l71 {
                                                0 => {}
                                                _ => {
                                                    let l72 = *base
                                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l73 = *base
                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l72, l73, 1);
                                                }
                                            }
                                            let l74 = i32::from(
                                                *base
                                                    .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l74 {
                                                0 => {}
                                                _ => {
                                                    let l75 = *base
                                                        .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l76 = *base
                                                        .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l75, l76, 1);
                                                }
                                            }
                                            let l77 = i32::from(
                                                *base
                                                    .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l77 {
                                                0 => {}
                                                _ => {
                                                    let l78 = i32::from(
                                                        *base
                                                            .add(40 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l78 {
                                                        0 => {}
                                                        _ => {
                                                            let l79 = *base
                                                                .add(40 + 11 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l80 = *base
                                                                .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base81 = l79;
                                                            let len81 = l80;
                                                            _rt::cabi_dealloc(base81, len81 * 1, 1);
                                                        }
                                                    }
                                                    let l82 = i32::from(
                                                        *base
                                                            .add(64 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l82 {
                                                        0 => {}
                                                        _ => {
                                                            let l83 = *base
                                                                .add(64 + 13 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l84 = *base
                                                                .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l83, l84, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            let l85 = i32::from(
                                                *base
                                                    .add(72 + 14 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l85 {
                                                0 => {}
                                                _ => {
                                                    let l86 = *base
                                                        .add(72 + 15 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l87 = *base
                                                        .add(72 + 16 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base92 = l86;
                                                    let len92 = l87;
                                                    for i in 0..len92 {
                                                        let base = base92
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l88 = *base.add(0).cast::<*mut u8>();
                                                            let l89 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l88, l89, 1);
                                                            let l90 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l91 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l90, l91, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base92,
                                                        len92 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                            }
                                        }
                                        _ => {
                                            let l93 = i32::from(*base.add(16).cast::<u8>());
                                            match l93 {
                                                0 => {
                                                    let l94 = *base
                                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l95 = *base
                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l94, l95, 1);
                                                    let l96 = i32::from(
                                                        *base
                                                            .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l96 {
                                                        0 => {}
                                                        _ => {
                                                            let l97 = *base
                                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l98 = *base
                                                                .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l97, l98, 1);
                                                        }
                                                    }
                                                    let l99 = *base
                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l100 = *base
                                                        .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l99, l100, 1);
                                                    let l101 = i32::from(
                                                        *base
                                                            .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l101 {
                                                        0 => {}
                                                        _ => {
                                                            let l102 = *base
                                                                .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l103 = *base
                                                                .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base108 = l102;
                                                            let len108 = l103;
                                                            for i in 0..len108 {
                                                                let base = base108
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l104 = *base.add(0).cast::<*mut u8>();
                                                                    let l105 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l104, l105, 1);
                                                                    let l106 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l107 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l106, l107, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base108,
                                                                len108 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let l109 = *base
                                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l110 = *base
                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l109, l110, 1);
                                                    let l111 = i32::from(
                                                        *base
                                                            .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l111 {
                                                        0 => {}
                                                        _ => {
                                                            let l112 = *base
                                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l113 = *base
                                                                .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l112, l113, 1);
                                                        }
                                                    }
                                                    let l114 = *base
                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l115 = *base
                                                        .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base116 = l114;
                                                    let len116 = l115;
                                                    _rt::cabi_dealloc(base116, len116 * 1, 1);
                                                    let l117 = i32::from(
                                                        *base
                                                            .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l117 {
                                                        0 => {}
                                                        _ => {
                                                            let l118 = *base
                                                                .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l119 = *base
                                                                .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base124 = l118;
                                                            let len124 = l119;
                                                            for i in 0..len124 {
                                                                let base = base124
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l120 = *base.add(0).cast::<*mut u8>();
                                                                    let l121 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l120, l121, 1);
                                                                    let l122 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l123 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l122, l123, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base124,
                                                                len124 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                            let l125 = i32::from(
                                                *base
                                                    .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l125 {
                                                0 => {}
                                                _ => {
                                                    let l126 = i32::from(
                                                        *base
                                                            .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l126 {
                                                        0 => {}
                                                        _ => {
                                                            let l127 = *base
                                                                .add(32 + 11 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l128 = *base
                                                                .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base129 = l127;
                                                            let len129 = l128;
                                                            _rt::cabi_dealloc(base129, len129 * 1, 1);
                                                        }
                                                    }
                                                    let l130 = i32::from(
                                                        *base
                                                            .add(56 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l130 {
                                                        0 => {}
                                                        _ => {
                                                            let l131 = *base
                                                                .add(56 + 13 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l132 = *base
                                                                .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l131, l132, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            let l133 = i32::from(
                                                *base
                                                    .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l133 {
                                                0 => {}
                                                _ => {
                                                    let l134 = *base
                                                        .add(64 + 15 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l135 = *base
                                                        .add(64 + 16 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base140 = l134;
                                                    let len140 = l135;
                                                    for i in 0..len140 {
                                                        let base = base140
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l136 = *base.add(0).cast::<*mut u8>();
                                                            let l137 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l136, l137, 1);
                                                            let l138 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l139 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l138, l139, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base140,
                                                        len140 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base141,
                                len141 * (80 + 16 * ::core::mem::size_of::<*const u8>()),
                                8,
                            );
                            let l142 = i32::from(
                                *arg0
                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l142 {
                                0 => {}
                                _ => {
                                    let l143 = *arg0
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l144 = *arg0
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base149 = l143;
                                    let len149 = l144;
                                    for i in 0..len149 {
                                        let base = base149
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l145 = *base.add(0).cast::<*mut u8>();
                                            let l146 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l145, l146, 1);
                                            let l147 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l148 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l147, l148, 1);
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base149,
                                        len149 * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                            }
                        }
                        _ => {
                            let l150 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l151 = *arg0
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l150, l151, 1);
                            let l152 = i32::from(
                                *arg0
                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l152 {
                                0 => {}
                                _ => {
                                    let l153 = *arg0
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l154 = *arg0
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l153, l154, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    /// List available prompts
                    fn handle_list_prompts(
                        request: ListPromptsRequest,
                    ) -> Result<ListPromptsResponse, McpError>;
                    /// Get a specific prompt
                    fn handle_get_prompt(
                        request: GetPromptRequest,
                    ) -> Result<GetPromptResponse, McpError>;
                }
                #[doc(hidden)]
                macro_rules! __export_fastertools_mcp_prompt_handler_0_1_1_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "fastertools:mcp/prompt-handler@0.1.1#handle-list-prompts")]
                        unsafe extern "C" fn export_handle_list_prompts(arg0 : i32, arg1
                        : * mut u8, arg2 : usize, arg3 : i32, arg4 : * mut u8, arg5 :
                        usize, arg6 : i32, arg7 : * mut u8, arg8 : usize,) -> * mut u8 {
                        unsafe { $($path_to_types)*::
                        _export_handle_list_prompts_cabi::<$ty > (arg0, arg1, arg2, arg3,
                        arg4, arg5, arg6, arg7, arg8) } } #[unsafe (export_name =
                        "cabi_post_fastertools:mcp/prompt-handler@0.1.1#handle-list-prompts")]
                        unsafe extern "C" fn _post_return_handle_list_prompts(arg0 : *
                        mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_handle_list_prompts::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "fastertools:mcp/prompt-handler@0.1.1#handle-get-prompt")] unsafe
                        extern "C" fn export_handle_get_prompt(arg0 : * mut u8, arg1 :
                        usize, arg2 : i32, arg3 : * mut u8, arg4 : usize, arg5 : i32,
                        arg6 : * mut u8, arg7 : usize, arg8 : i32, arg9 : * mut u8, arg10
                        : usize,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_handle_get_prompt_cabi::<$ty > (arg0, arg1, arg2, arg3,
                        arg4, arg5, arg6, arg7, arg8, arg9, arg10) } } #[unsafe
                        (export_name =
                        "cabi_post_fastertools:mcp/prompt-handler@0.1.1#handle-get-prompt")]
                        unsafe extern "C" fn _post_return_handle_get_prompt(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_handle_get_prompt::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_fastertools_mcp_prompt_handler_0_1_1_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 9 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 9
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::vec::Vec;
    pub use alloc_crate::string::String;
    pub use alloc_crate::alloc;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_null_prompts_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::fastertools::mcp::core::__export_fastertools_mcp_core_0_1_1_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::fastertools::mcp::core);
        $($path_to_types_root)*::
        exports::fastertools::mcp::prompt_handler::__export_fastertools_mcp_prompt_handler_0_1_1_cabi!($ty
        with_types_in $($path_to_types_root)*::
        exports::fastertools::mcp::prompt_handler);
    };
}
#[doc(inline)]
pub(crate) use __export_null_prompts_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:fastertools:null-prompts@0.1.0:null-prompts:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 3442] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xef\x19\x01A\x02\x01\
A\x17\x01B.\x01m\x02\x04user\x09assistant\x04\0\x04role\x03\0\0\x01o\x02ss\x01p\x02\
\x04\0\x0bmeta-fields\x03\0\x03\x01p\x01\x01k\x05\x01ku\x01ks\x01r\x03\x08audien\
ce\x06\x08priority\x07\x0dlast-modified\x08\x04\0\x0bannotations\x03\0\x09\x01r\x02\
\x04names\x05title\x08\x04\0\x0dbase-metadata\x03\0\x0b\x01k\x0a\x01k\x04\x01r\x03\
\x04texts\x0bannotations\x0d\x04meta\x0e\x04\0\x0ctext-content\x03\0\x0f\x01p}\x01\
r\x04\x04data\x11\x09mime-types\x0bannotations\x0d\x04meta\x0e\x04\0\x0dimage-co\
ntent\x03\0\x12\x01r\x04\x04data\x11\x09mime-types\x0bannotations\x0d\x04meta\x0e\
\x04\0\x0daudio-content\x03\0\x14\x01kw\x01r\x07\x03uris\x04names\x0bdescription\
\x08\x09mime-type\x08\x04size\x16\x0bannotations\x0d\x04meta\x0e\x04\0\x0dresour\
ce-link\x03\0\x17\x01r\x04\x03uris\x09mime-type\x08\x04texts\x04meta\x0e\x04\0\x16\
text-resource-contents\x03\0\x19\x01r\x04\x03uris\x09mime-type\x08\x04blob\x11\x04\
meta\x0e\x04\0\x16blob-resource-contents\x03\0\x1b\x01q\x02\x04text\x01\x1a\0\x04\
blob\x01\x1c\0\x04\0\x11resource-contents\x03\0\x1d\x01r\x03\x08contents\x1e\x0b\
annotations\x0d\x04meta\x0e\x04\0\x11embedded-resource\x03\0\x1f\x01q\x05\x04tex\
t\x01\x10\0\x05image\x01\x13\0\x05audio\x01\x15\0\x0dresource-link\x01\x18\0\x11\
embedded-resource\x01\x20\0\x04\0\x0dcontent-block\x03\0!\x01s\x04\0\x0ajson-val\
ue\x03\0#\x01q\x0d\x0bparse-error\0\0\x0finvalid-request\0\0\x10method-not-found\
\0\0\x0einvalid-params\0\0\x0einternal-error\0\0\x12resource-not-found\0\0\x0eto\
ol-not-found\0\0\x10prompt-not-found\0\0\x0cunauthorized\0\0\x0crate-limited\0\0\
\x07timeout\0\0\x09cancelled\0\0\x0bcustom-code\x01z\0\x04\0\x0aerror-code\x03\0\
%\x01k$\x01r\x03\x04code&\x07messages\x04data'\x04\0\x09mcp-error\x03\0(\x01s\x04\
\0\x06cursor\x03\0*\x01s\x04\0\x0eprogress-token\x03\0,\x03\0\x1bfastertools:mcp\
/types@0.1.1\x05\0\x02\x03\0\0\x09mcp-error\x02\x03\0\0\x0bmeta-fields\x01B'\x02\
\x03\x02\x01\x01\x04\0\x09mcp-error\x03\0\0\x02\x03\x02\x01\x02\x04\0\x0bmeta-fi\
elds\x03\0\x02\x01s\x04\0\x10protocol-version\x03\0\x04\x01ks\x01r\x03\x04names\x07\
versions\x05title\x06\x04\0\x13implementation-info\x03\0\x07\x01k\x7f\x01r\x01\x0c\
list-changed\x09\x04\0\x10roots-capability\x03\0\x0a\x01k\x03\x01k\x0b\x01r\x04\x0c\
experimental\x0c\x05roots\x0d\x08sampling\x09\x0belicitation\x09\x04\0\x13client\
-capabilities\x03\0\x0e\x01r\x01\x0clist-changed\x09\x04\0\x12prompts-capability\
\x03\0\x10\x01r\x02\x09subscribe\x09\x0clist-changed\x09\x04\0\x14resources-capa\
bility\x03\0\x12\x01r\x01\x0clist-changed\x09\x04\0\x10tools-capability\x03\0\x14\
\x01k\x11\x01k\x13\x01k\x15\x01r\x06\x0cexperimental\x0c\x07logging\x09\x0bcompl\
etions\x09\x07prompts\x16\x09resources\x17\x05tools\x18\x04\0\x13server-capabili\
ties\x03\0\x19\x01r\x04\x10protocol-version\x05\x0ccapabilities\x0f\x0bclient-in\
fo\x08\x04meta\x0c\x04\0\x12initialize-request\x03\0\x1b\x01r\x05\x10protocol-ve\
rsion\x05\x0ccapabilities\x1a\x0bserver-info\x08\x0cinstructions\x06\x04meta\x0c\
\x04\0\x13initialize-response\x03\0\x1d\x01j\x01\x1e\x01\x01\x01@\x01\x07request\
\x1c\0\x1f\x04\0\x0ainitialize\x01\x20\x01j\0\x01\x01\x01@\0\0!\x04\0\x0binitial\
ized\x01\"\x04\0\x04ping\x01\"\x04\0\x08shutdown\x01\"\x03\0\x1dfastertools:mcp/\
session@0.1.1\x05\x03\x02\x03\0\0\x04role\x02\x03\0\0\x0dcontent-block\x02\x03\0\
\0\x0dbase-metadata\x02\x03\0\0\x06cursor\x02\x03\0\0\x0eprogress-token\x01B.\x02\
\x03\x02\x01\x04\x04\0\x04role\x03\0\0\x02\x03\x02\x01\x05\x04\0\x0dcontent-bloc\
k\x03\0\x02\x02\x03\x02\x01\x01\x04\0\x09mcp-error\x03\0\x04\x02\x03\x02\x01\x06\
\x04\0\x0dbase-metadata\x03\0\x06\x02\x03\x02\x01\x02\x04\0\x0bmeta-fields\x03\0\
\x08\x02\x03\x02\x01\x07\x04\0\x06cursor\x03\0\x0a\x02\x03\x02\x01\x08\x04\0\x0e\
progress-token\x03\0\x0c\x01ks\x01k\x7f\x01r\x03\x04base\x07\x0bdescription\x0e\x08\
required\x0f\x04\0\x0fprompt-argument\x03\0\x10\x01p\x11\x01k\x12\x01k\x09\x01r\x04\
\x04base\x07\x0bdescription\x0e\x09arguments\x13\x04meta\x14\x04\0\x06prompt\x03\
\0\x15\x01r\x02\x04role\x01\x07content\x03\x04\0\x0eprompt-message\x03\0\x17\x01\
k\x0b\x01k\x0d\x01r\x03\x06cursor\x19\x0eprogress-token\x1a\x04meta\x14\x04\0\x14\
list-prompts-request\x03\0\x1b\x01p\x16\x01r\x03\x07prompts\x1d\x0bnext-cursor\x19\
\x04meta\x14\x04\0\x15list-prompts-response\x03\0\x1e\x01o\x02ss\x01p\x20\x01k!\x01\
r\x04\x04names\x09arguments\"\x0eprogress-token\x1a\x04meta\x14\x04\0\x12get-pro\
mpt-request\x03\0#\x01p\x18\x01r\x03\x0bdescription\x0e\x08messages%\x04meta\x14\
\x04\0\x13get-prompt-response\x03\0&\x01j\x01\x1f\x01\x05\x01@\x01\x07request\x1c\
\0(\x04\0\x0clist-prompts\x01)\x01j\x01'\x01\x05\x01@\x01\x07request$\0*\x04\0\x0a\
get-prompt\x01+\x03\0\x1dfastertools:mcp/prompts@0.1.1\x05\x09\x02\x03\0\x01\x12\
initialize-request\x02\x03\0\x01\x13initialize-response\x01B\x0e\x02\x03\x02\x01\
\x01\x04\0\x09mcp-error\x03\0\0\x02\x03\x02\x01\x0a\x04\0\x12initialize-request\x03\
\0\x02\x02\x03\x02\x01\x0b\x04\0\x13initialize-response\x03\0\x04\x01j\x01\x05\x01\
\x01\x01@\x01\x07request\x03\0\x06\x04\0\x11handle-initialize\x01\x07\x01j\0\x01\
\x01\x01@\0\0\x08\x04\0\x12handle-initialized\x01\x09\x04\0\x0bhandle-ping\x01\x09\
\x04\0\x0fhandle-shutdown\x01\x09\x04\0\x1afastertools:mcp/core@0.1.1\x05\x0c\x02\
\x03\0\x02\x14list-prompts-request\x02\x03\0\x02\x15list-prompts-response\x02\x03\
\0\x02\x12get-prompt-request\x02\x03\0\x02\x13get-prompt-response\x01B\x10\x02\x03\
\x02\x01\x01\x04\0\x09mcp-error\x03\0\0\x02\x03\x02\x01\x0d\x04\0\x14list-prompt\
s-request\x03\0\x02\x02\x03\x02\x01\x0e\x04\0\x15list-prompts-response\x03\0\x04\
\x02\x03\x02\x01\x0f\x04\0\x12get-prompt-request\x03\0\x06\x02\x03\x02\x01\x10\x04\
\0\x13get-prompt-response\x03\0\x08\x01j\x01\x05\x01\x01\x01@\x01\x07request\x03\
\0\x0a\x04\0\x13handle-list-prompts\x01\x0b\x01j\x01\x09\x01\x01\x01@\x01\x07req\
uest\x07\0\x0c\x04\0\x11handle-get-prompt\x01\x0d\x04\0$fastertools:mcp/prompt-h\
andler@0.1.1\x05\x11\x04\0+fastertools:null-prompts/null-prompts@0.1.0\x04\0\x0b\
\x12\x01\0\x0cnull-prompts\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwi\
t-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
