// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package handler represents the exported interface "wasmcp:mcp/handler@0.1.0".
package handler

import (
	"go.bytecodealliance.org/cm"
)

// Tool represents the record "wasmcp:mcp/handler@0.1.0#tool".
//
//	record tool {
//		name: string,
//		description: string,
//		input-schema: string,
//	}
type Tool struct {
	_           cm.HostLayout `json:"-"`
	Name        string        `json:"name"`
	Description string        `json:"description"`
	InputSchema string        `json:"input-schema"`
}

// ResourceInfo represents the record "wasmcp:mcp/handler@0.1.0#resource-info".
//
//	record resource-info {
//		uri: string,
//		name: string,
//		description: option<string>,
//		mime-type: option<string>,
//	}
type ResourceInfo struct {
	_           cm.HostLayout     `json:"-"`
	URI         string            `json:"uri"`
	Name        string            `json:"name"`
	Description cm.Option[string] `json:"description"`
	MIMEType    cm.Option[string] `json:"mime-type"`
}

// ResourceContents represents the record "wasmcp:mcp/handler@0.1.0#resource-contents".
//
//	record resource-contents {
//		uri: string,
//		mime-type: option<string>,
//		text: option<string>,
//		blob: option<list<u8>>,
//	}
type ResourceContents struct {
	_        cm.HostLayout             `json:"-"`
	URI      string                    `json:"uri"`
	MIMEType cm.Option[string]         `json:"mime-type"`
	Text     cm.Option[string]         `json:"text"`
	Blob     cm.Option[cm.List[uint8]] `json:"blob"`
}

// PromptArgument represents the record "wasmcp:mcp/handler@0.1.0#prompt-argument".
//
//	record prompt-argument {
//		name: string,
//		description: option<string>,
//		required: bool,
//	}
type PromptArgument struct {
	_           cm.HostLayout     `json:"-"`
	Name        string            `json:"name"`
	Description cm.Option[string] `json:"description"`
	Required    bool              `json:"required"`
}

// Prompt represents the record "wasmcp:mcp/handler@0.1.0#prompt".
//
//	record prompt {
//		name: string,
//		description: option<string>,
//		arguments: list<prompt-argument>,
//	}
type Prompt struct {
	_           cm.HostLayout           `json:"-"`
	Name        string                  `json:"name"`
	Description cm.Option[string]       `json:"description"`
	Arguments   cm.List[PromptArgument] `json:"arguments"`
}

// PromptMessage represents the record "wasmcp:mcp/handler@0.1.0#prompt-message".
//
//	record prompt-message {
//		role: string,
//		content: string,
//	}
type PromptMessage struct {
	_       cm.HostLayout `json:"-"`
	Role    string        `json:"role"`
	Content string        `json:"content"`
}

// Error represents the record "wasmcp:mcp/handler@0.1.0#error".
//
//	record error {
//		code: s32,
//		message: string,
//		data: option<string>,
//	}
type Error struct {
	_       cm.HostLayout     `json:"-"`
	Code    int32             `json:"code"`
	Message string            `json:"message"`
	Data    cm.Option[string] `json:"data"`
}

// ToolResult represents the variant "wasmcp:mcp/handler@0.1.0#tool-result".
//
//	variant tool-result {
//		text(string),
//		error(error),
//	}
type ToolResult cm.Variant[uint8, ErrorShape, Error]

// ToolResultText returns a [ToolResult] of case "text".
func ToolResultText(data string) ToolResult {
	return cm.New[ToolResult](0, data)
}

// Text returns a non-nil *[string] if [ToolResult] represents the variant case "text".
func (self *ToolResult) Text() *string {
	return cm.Case[string](self, 0)
}

// ToolResultError returns a [ToolResult] of case "error".
func ToolResultError(data Error) ToolResult {
	return cm.New[ToolResult](1, data)
}

// Error returns a non-nil *[Error] if [ToolResult] represents the variant case "error".
func (self *ToolResult) Error() *Error {
	return cm.Case[Error](self, 1)
}

var _ToolResultStrings = [2]string{
	"text",
	"error",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v ToolResult) String() string {
	return _ToolResultStrings[v.Tag()]
}

// ResourceResult represents the variant "wasmcp:mcp/handler@0.1.0#resource-result".
//
//	variant resource-result {
//		contents(resource-contents),
//		error(error),
//	}
type ResourceResult cm.Variant[uint8, ResourceContentsShape, ResourceContents]

// ResourceResultContents returns a [ResourceResult] of case "contents".
func ResourceResultContents(data ResourceContents) ResourceResult {
	return cm.New[ResourceResult](0, data)
}

// Contents returns a non-nil *[ResourceContents] if [ResourceResult] represents the variant case "contents".
func (self *ResourceResult) Contents() *ResourceContents {
	return cm.Case[ResourceContents](self, 0)
}

// ResourceResultError returns a [ResourceResult] of case "error".
func ResourceResultError(data Error) ResourceResult {
	return cm.New[ResourceResult](1, data)
}

// Error returns a non-nil *[Error] if [ResourceResult] represents the variant case "error".
func (self *ResourceResult) Error() *Error {
	return cm.Case[Error](self, 1)
}

var _ResourceResultStrings = [2]string{
	"contents",
	"error",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v ResourceResult) String() string {
	return _ResourceResultStrings[v.Tag()]
}

// PromptResult represents the variant "wasmcp:mcp/handler@0.1.0#prompt-result".
//
//	variant prompt-result {
//		messages(list<prompt-message>),
//		error(error),
//	}
type PromptResult cm.Variant[uint8, ErrorShape, Error]

// PromptResultMessages returns a [PromptResult] of case "messages".
func PromptResultMessages(data cm.List[PromptMessage]) PromptResult {
	return cm.New[PromptResult](0, data)
}

// Messages returns a non-nil *[cm.List[PromptMessage]] if [PromptResult] represents the variant case "messages".
func (self *PromptResult) Messages() *cm.List[PromptMessage] {
	return cm.Case[cm.List[PromptMessage]](self, 0)
}

// PromptResultError returns a [PromptResult] of case "error".
func PromptResultError(data Error) PromptResult {
	return cm.New[PromptResult](1, data)
}

// Error returns a non-nil *[Error] if [PromptResult] represents the variant case "error".
func (self *PromptResult) Error() *Error {
	return cm.Case[Error](self, 1)
}

var _PromptResultStrings = [2]string{
	"messages",
	"error",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v PromptResult) String() string {
	return _PromptResultStrings[v.Tag()]
}
