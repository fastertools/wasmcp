// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
//   * additional derives ["Clone"]
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod fastertools {
    pub mod mcp {
        /// Core type definitions for the Model Context Protocol
        /// These types are used across all MCP interfaces
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Role in a conversation
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum Role {
                User,
                Assistant,
            }
            impl ::core::fmt::Debug for Role {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Role::User => f.debug_tuple("Role::User").finish(),
                        Role::Assistant => f.debug_tuple("Role::Assistant").finish(),
                    }
                }
            }
            impl Role {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> Role {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => Role::User,
                        1 => Role::Assistant,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// JSON value as a string
            /// This is a JSON-encoded value that should be parsed/validated by implementations
            pub type JsonValue = _rt::String;
            /// Metadata fields for extensibility
            /// Key-value pairs where values are JSON-encoded strings
            pub type MetaFields = _rt::Vec<(_rt::String, _rt::String)>;
            /// Annotations provide hints to clients about how to handle data
            #[derive(Clone)]
            pub struct Annotations {
                /// Who this data is intended for
                pub audience: Option<_rt::Vec<Role>>,
                /// Priority from 0.0 (least) to 1.0 (most important)
                /// Implementations SHOULD validate this is within [0.0, 1.0] range
                pub priority: Option<f64>,
                /// ISO 8601 timestamp of last modification
                /// Format: YYYY-MM-DDTHH:mm:ss[.sss]Z or Â±HH:MM offset
                pub last_modified: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Annotations {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Annotations")
                        .field("audience", &self.audience)
                        .field("priority", &self.priority)
                        .field("last-modified", &self.last_modified)
                        .finish()
                }
            }
            /// Base metadata pattern used throughout the protocol
            #[derive(Clone)]
            pub struct BaseMetadata {
                /// Programmatic identifier
                pub name: _rt::String,
                /// Human-readable display name
                pub title: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for BaseMetadata {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BaseMetadata")
                        .field("name", &self.name)
                        .field("title", &self.title)
                        .finish()
                }
            }
            /// Text content with optional annotations
            #[derive(Clone)]
            pub struct TextContent {
                pub text: _rt::String,
                pub annotations: Option<Annotations>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for TextContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextContent")
                        .field("text", &self.text)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Image content as binary data
            #[derive(Clone)]
            pub struct ImageContent {
                /// Base64-encoded image data
                pub data: _rt::Vec<u8>,
                /// MIME type (e.g., "image/png", "image/jpeg")
                pub mime_type: _rt::String,
                pub annotations: Option<Annotations>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ImageContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ImageContent")
                        .field("data", &self.data)
                        .field("mime-type", &self.mime_type)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Audio content as binary data
            #[derive(Clone)]
            pub struct AudioContent {
                /// Base64-encoded audio data
                pub data: _rt::Vec<u8>,
                /// MIME type (e.g., "audio/wav", "audio/mp3")
                pub mime_type: _rt::String,
                pub annotations: Option<Annotations>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for AudioContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AudioContent")
                        .field("data", &self.data)
                        .field("mime-type", &self.mime_type)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Reference to a resource that the server can read
            /// Resource links included in prompts or tool results may not appear in resources/list
            #[derive(Clone)]
            pub struct ResourceLink {
                /// URI of the resource
                pub uri: _rt::String,
                /// Programmatic identifier for the resource
                pub name: _rt::String,
                /// Human-readable display title (preferred for UI display)
                pub title: Option<_rt::String>,
                /// Description of what this resource represents
                pub description: Option<_rt::String>,
                /// MIME type of the resource, if known
                pub mime_type: Option<_rt::String>,
                /// Size in bytes (before encoding), if known
                pub size: Option<u64>,
                /// Client hints for handling
                pub annotations: Option<Annotations>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ResourceLink {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourceLink")
                        .field("uri", &self.uri)
                        .field("name", &self.name)
                        .field("title", &self.title)
                        .field("description", &self.description)
                        .field("mime-type", &self.mime_type)
                        .field("size", &self.size)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct TextResourceContents {
                pub uri: _rt::String,
                pub mime_type: Option<_rt::String>,
                pub text: _rt::String,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for TextResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextResourceContents")
                        .field("uri", &self.uri)
                        .field("mime-type", &self.mime_type)
                        .field("text", &self.text)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct BlobResourceContents {
                pub uri: _rt::String,
                pub mime_type: Option<_rt::String>,
                /// Binary data
                pub blob: _rt::Vec<u8>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for BlobResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BlobResourceContents")
                        .field("uri", &self.uri)
                        .field("mime-type", &self.mime_type)
                        .field("blob", &self.blob)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Resource contents can be either text or binary
            #[derive(Clone)]
            pub enum ResourceContents {
                Text(TextResourceContents),
                Blob(BlobResourceContents),
            }
            impl ::core::fmt::Debug for ResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ResourceContents::Text(e) => {
                            f.debug_tuple("ResourceContents::Text").field(e).finish()
                        }
                        ResourceContents::Blob(e) => {
                            f.debug_tuple("ResourceContents::Blob").field(e).finish()
                        }
                    }
                }
            }
            /// Embedded resource content
            /// The contents of a resource, embedded into a prompt or tool call result
            #[derive(Clone)]
            pub struct EmbeddedResource {
                /// The actual resource contents (text or binary)
                pub contents: ResourceContents,
                /// Client hints for handling
                pub annotations: Option<Annotations>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for EmbeddedResource {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EmbeddedResource")
                        .field("contents", &self.contents)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Content block types that can be included in messages
            #[derive(Clone)]
            pub enum ContentBlock {
                Text(TextContent),
                Image(ImageContent),
                Audio(AudioContent),
                ResourceLink(ResourceLink),
                EmbeddedResource(EmbeddedResource),
            }
            impl ::core::fmt::Debug for ContentBlock {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ContentBlock::Text(e) => {
                            f.debug_tuple("ContentBlock::Text").field(e).finish()
                        }
                        ContentBlock::Image(e) => {
                            f.debug_tuple("ContentBlock::Image").field(e).finish()
                        }
                        ContentBlock::Audio(e) => {
                            f.debug_tuple("ContentBlock::Audio").field(e).finish()
                        }
                        ContentBlock::ResourceLink(e) => {
                            f.debug_tuple("ContentBlock::ResourceLink").field(e).finish()
                        }
                        ContentBlock::EmbeddedResource(e) => {
                            f.debug_tuple("ContentBlock::EmbeddedResource")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            /// JSON Schema representation
            /// Kept as a string since JSON Schema is complex
            /// and typically validated by specialized libraries
            pub type JsonSchema = _rt::String;
            /// Standard JSON-RPC and MCP error codes
            #[derive(Clone, Copy)]
            pub enum ErrorCode {
                /// JSON-RPC standard errors
                ParseError,
                /// -32700
                InvalidRequest,
                /// -32600
                MethodNotFound,
                /// -32601
                InvalidParams,
                /// -32602
                InternalError,
                /// -32603
                /// MCP-specific errors
                ResourceNotFound,
                ToolNotFound,
                PromptNotFound,
                Unauthorized,
                RateLimited,
                Timeout,
                Cancelled,
                /// Custom error with specific code
                CustomCode(i32),
            }
            impl ::core::fmt::Debug for ErrorCode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ErrorCode::ParseError => {
                            f.debug_tuple("ErrorCode::ParseError").finish()
                        }
                        ErrorCode::InvalidRequest => {
                            f.debug_tuple("ErrorCode::InvalidRequest").finish()
                        }
                        ErrorCode::MethodNotFound => {
                            f.debug_tuple("ErrorCode::MethodNotFound").finish()
                        }
                        ErrorCode::InvalidParams => {
                            f.debug_tuple("ErrorCode::InvalidParams").finish()
                        }
                        ErrorCode::InternalError => {
                            f.debug_tuple("ErrorCode::InternalError").finish()
                        }
                        ErrorCode::ResourceNotFound => {
                            f.debug_tuple("ErrorCode::ResourceNotFound").finish()
                        }
                        ErrorCode::ToolNotFound => {
                            f.debug_tuple("ErrorCode::ToolNotFound").finish()
                        }
                        ErrorCode::PromptNotFound => {
                            f.debug_tuple("ErrorCode::PromptNotFound").finish()
                        }
                        ErrorCode::Unauthorized => {
                            f.debug_tuple("ErrorCode::Unauthorized").finish()
                        }
                        ErrorCode::RateLimited => {
                            f.debug_tuple("ErrorCode::RateLimited").finish()
                        }
                        ErrorCode::Timeout => {
                            f.debug_tuple("ErrorCode::Timeout").finish()
                        }
                        ErrorCode::Cancelled => {
                            f.debug_tuple("ErrorCode::Cancelled").finish()
                        }
                        ErrorCode::CustomCode(e) => {
                            f.debug_tuple("ErrorCode::CustomCode").field(e).finish()
                        }
                    }
                }
            }
            /// Standard error structure
            #[derive(Clone)]
            pub struct McpError {
                pub code: ErrorCode,
                pub message: _rt::String,
                /// Additional error context (JSON-encoded)
                pub data: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for McpError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("McpError")
                        .field("code", &self.code)
                        .field("message", &self.message)
                        .field("data", &self.data)
                        .finish()
                }
            }
            impl ::core::fmt::Display for McpError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for McpError {}
            /// Pagination cursor for list operations
            pub type Cursor = _rt::String;
            /// Progress token for tracking long-running operations
            pub type ProgressToken = _rt::String;
            /// JSON-RPC request ID
            /// Can be either a string or number in JSON-RPC
            #[derive(Clone)]
            pub enum RequestId {
                Str(_rt::String),
                Num(i64),
            }
            impl ::core::fmt::Debug for RequestId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        RequestId::Str(e) => {
                            f.debug_tuple("RequestId::Str").field(e).finish()
                        }
                        RequestId::Num(e) => {
                            f.debug_tuple("RequestId::Num").field(e).finish()
                        }
                    }
                }
            }
            /// Message role for LLM interactions
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum MessageRole {
                User,
                Assistant,
                System,
            }
            impl ::core::fmt::Debug for MessageRole {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        MessageRole::User => f.debug_tuple("MessageRole::User").finish(),
                        MessageRole::Assistant => {
                            f.debug_tuple("MessageRole::Assistant").finish()
                        }
                        MessageRole::System => {
                            f.debug_tuple("MessageRole::System").finish()
                        }
                    }
                }
            }
            impl MessageRole {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> MessageRole {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => MessageRole::User,
                        1 => MessageRole::Assistant,
                        2 => MessageRole::System,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Hint for model selection
            #[derive(Clone)]
            pub struct ModelHint {
                /// Name pattern to match (e.g., "claude", "gpt-4")
                pub name: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ModelHint {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ModelHint").field("name", &self.name).finish()
                }
            }
            /// Model selection preferences for LLM sampling
            #[derive(Clone)]
            pub struct ModelPreferences {
                /// Hints for model selection
                pub hints: Option<_rt::Vec<ModelHint>>,
                /// Priority for cost optimization (0.0-1.0)
                pub cost_priority: Option<f64>,
                /// Priority for speed (0.0-1.0)
                pub speed_priority: Option<f64>,
                /// Priority for intelligence/capability (0.0-1.0)
                pub intelligence_priority: Option<f64>,
            }
            impl ::core::fmt::Debug for ModelPreferences {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ModelPreferences")
                        .field("hints", &self.hints)
                        .field("cost-priority", &self.cost_priority)
                        .field("speed-priority", &self.speed_priority)
                        .field("intelligence-priority", &self.intelligence_priority)
                        .finish()
                }
            }
            /// Resource template with URI template support (RFC 6570)
            #[derive(Clone)]
            pub struct ResourceTemplate {
                /// URI template that can be expanded with variables
                pub uri_template: _rt::String,
                /// Identifier for the template
                pub name: _rt::String,
                /// Human-readable description
                pub description: Option<_rt::String>,
                /// Expected MIME type of resources
                pub mime_type: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ResourceTemplate {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourceTemplate")
                        .field("uri-template", &self.uri_template)
                        .field("name", &self.name)
                        .field("description", &self.description)
                        .field("mime-type", &self.mime_type)
                        .finish()
                }
            }
        }
        /// Tool discovery and execution for MCP
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod tools {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type ContentBlock = super::super::super::fastertools::mcp::types::ContentBlock;
            pub type JsonValue = super::super::super::fastertools::mcp::types::JsonValue;
            pub type JsonSchema = super::super::super::fastertools::mcp::types::JsonSchema;
            pub type BaseMetadata = super::super::super::fastertools::mcp::types::BaseMetadata;
            pub type MetaFields = super::super::super::fastertools::mcp::types::MetaFields;
            pub type Cursor = super::super::super::fastertools::mcp::types::Cursor;
            pub type ProgressToken = super::super::super::fastertools::mcp::types::ProgressToken;
            /// Behavioral hints about tool operations
            #[derive(Clone)]
            pub struct ToolAnnotations {
                /// Human-readable title for display
                pub title: Option<_rt::String>,
                /// Tool does not modify environment
                pub read_only_hint: Option<bool>,
                /// Tool may perform destructive updates (meaningful when not read-only)
                pub destructive_hint: Option<bool>,
                /// Repeated calls with same args have no additional effect
                pub idempotent_hint: Option<bool>,
                /// Tool interacts with external entities
                pub open_world_hint: Option<bool>,
            }
            impl ::core::fmt::Debug for ToolAnnotations {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolAnnotations")
                        .field("title", &self.title)
                        .field("read-only-hint", &self.read_only_hint)
                        .field("destructive-hint", &self.destructive_hint)
                        .field("idempotent-hint", &self.idempotent_hint)
                        .field("open-world-hint", &self.open_world_hint)
                        .finish()
                }
            }
            /// Tool definition with metadata and schema
            #[derive(Clone)]
            pub struct Tool {
                /// Base metadata (name and optional title)
                pub base: BaseMetadata,
                /// Human-readable description of what the tool does
                pub description: Option<_rt::String>,
                /// JSON Schema for input parameters
                pub input_schema: JsonSchema,
                /// Optional schema for structured output
                pub output_schema: Option<JsonSchema>,
                /// Behavioral hints for clients
                pub annotations: Option<ToolAnnotations>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for Tool {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Tool")
                        .field("base", &self.base)
                        .field("description", &self.description)
                        .field("input-schema", &self.input_schema)
                        .field("output-schema", &self.output_schema)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Result from executing a tool
            #[derive(Clone)]
            pub struct ToolResult {
                /// Unstructured content blocks (text, images, etc.)
                pub content: _rt::Vec<ContentBlock>,
                /// Optional structured JSON output
                pub structured_content: Option<JsonValue>,
                /// Whether the tool execution resulted in an error
                /// If true, content should contain error details
                pub is_error: Option<bool>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ToolResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolResult")
                        .field("content", &self.content)
                        .field("structured-content", &self.structured_content)
                        .field("is-error", &self.is_error)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Request to list available tools
            #[derive(Clone)]
            pub struct ListToolsRequest {
                /// Pagination cursor from previous response
                pub cursor: Option<Cursor>,
                /// Optional progress tracking token
                pub progress_token: Option<ProgressToken>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ListToolsRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListToolsRequest")
                        .field("cursor", &self.cursor)
                        .field("progress-token", &self.progress_token)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Response with list of available tools
            #[derive(Clone)]
            pub struct ListToolsResponse {
                /// Available tools
                pub tools: _rt::Vec<Tool>,
                /// Cursor for next page if more tools exist
                pub next_cursor: Option<Cursor>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ListToolsResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListToolsResponse")
                        .field("tools", &self.tools)
                        .field("next-cursor", &self.next_cursor)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Request to execute a tool
            #[derive(Clone)]
            pub struct CallToolRequest {
                /// Name of the tool to execute
                pub name: _rt::String,
                /// Arguments as JSON object
                pub arguments: Option<JsonValue>,
                /// Optional progress tracking token
                pub progress_token: Option<ProgressToken>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for CallToolRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CallToolRequest")
                        .field("name", &self.name)
                        .field("arguments", &self.arguments)
                        .field("progress-token", &self.progress_token)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod fastertools {
        pub mod mcp {
            /// Tool capabilities - implement this to provide tools
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod tools_capabilities {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type McpError = super::super::super::super::fastertools::mcp::types::McpError;
                pub type ListToolsRequest = super::super::super::super::fastertools::mcp::tools::ListToolsRequest;
                pub type ListToolsResponse = super::super::super::super::fastertools::mcp::tools::ListToolsResponse;
                pub type CallToolRequest = super::super::super::super::fastertools::mcp::tools::CallToolRequest;
                pub type ToolResult = super::super::super::super::fastertools::mcp::tools::ToolResult;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_list_tools_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i32,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: i32,
                    arg7: *mut u8,
                    arg8: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result9 = T::handle_list_tools(super::super::super::super::fastertools::mcp::tools::ListToolsRequest {
                        cursor: match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    let bytes0 = _rt::Vec::from_raw_parts(
                                        arg1.cast(),
                                        len0,
                                        len0,
                                    );
                                    _rt::string_lift(bytes0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        progress_token: match arg3 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len1 = arg5;
                                    let bytes1 = _rt::Vec::from_raw_parts(
                                        arg4.cast(),
                                        len1,
                                        len1,
                                    );
                                    _rt::string_lift(bytes1)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        meta: match arg6 {
                            0 => None,
                            1 => {
                                let e = {
                                    let base8 = arg7;
                                    let len8 = arg8;
                                    let mut result8 = _rt::Vec::with_capacity(len8);
                                    for i in 0..len8 {
                                        let base = base8
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        let e8 = {
                                            let l2 = *base.add(0).cast::<*mut u8>();
                                            let l3 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len4 = l3;
                                            let bytes4 = _rt::Vec::from_raw_parts(
                                                l2.cast(),
                                                len4,
                                                len4,
                                            );
                                            let l5 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l6 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len7 = l6;
                                            let bytes7 = _rt::Vec::from_raw_parts(
                                                l5.cast(),
                                                len7,
                                                len7,
                                            );
                                            (_rt::string_lift(bytes4), _rt::string_lift(bytes7))
                                        };
                                        result8.push(e8);
                                    }
                                    _rt::cabi_dealloc(
                                        base8,
                                        len8 * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    result8
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    });
                    let ptr10 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result9 {
                        Ok(e) => {
                            *ptr10.add(0).cast::<u8>() = (0i32) as u8;
                            let super::super::super::super::fastertools::mcp::tools::ListToolsResponse {
                                tools: tools11,
                                next_cursor: next_cursor11,
                                meta: meta11,
                            } = e;
                            let vec25 = tools11;
                            let len25 = vec25.len();
                            let layout25 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec25.len()
                                    * (8 + 20 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result25 = if layout25.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout25).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout25);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec25.into_iter().enumerate() {
                                let base = result25
                                    .add(i * (8 + 20 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let super::super::super::super::fastertools::mcp::tools::Tool {
                                        base: base12,
                                        description: description12,
                                        input_schema: input_schema12,
                                        output_schema: output_schema12,
                                        annotations: annotations12,
                                        meta: meta12,
                                    } = e;
                                    let super::super::super::super::fastertools::mcp::types::BaseMetadata {
                                        name: name13,
                                        title: title13,
                                    } = base12;
                                    let vec14 = (name13.into_bytes()).into_boxed_slice();
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    ::core::mem::forget(vec14);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *base.add(0).cast::<*mut u8>() = ptr14.cast_mut();
                                    match title13 {
                                        Some(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec15 = (e.into_bytes()).into_boxed_slice();
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();
                                            ::core::mem::forget(vec15);
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len15;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr15.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match description12 {
                                        Some(e) => {
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec16 = (e.into_bytes()).into_boxed_slice();
                                            let ptr16 = vec16.as_ptr().cast::<u8>();
                                            let len16 = vec16.len();
                                            ::core::mem::forget(vec16);
                                            *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len16;
                                            *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr16.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    let vec17 = (input_schema12.into_bytes())
                                        .into_boxed_slice();
                                    let ptr17 = vec17.as_ptr().cast::<u8>();
                                    let len17 = vec17.len();
                                    ::core::mem::forget(vec17);
                                    *base
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len17;
                                    *base
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr17.cast_mut();
                                    match output_schema12 {
                                        Some(e) => {
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec18 = (e.into_bytes()).into_boxed_slice();
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();
                                            ::core::mem::forget(vec18);
                                            *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len18;
                                            *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr18.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match annotations12 {
                                        Some(e) => {
                                            *base
                                                .add(13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::super::fastertools::mcp::tools::ToolAnnotations {
                                                title: title19,
                                                read_only_hint: read_only_hint19,
                                                destructive_hint: destructive_hint19,
                                                idempotent_hint: idempotent_hint19,
                                                open_world_hint: open_world_hint19,
                                            } = e;
                                            match title19 {
                                                Some(e) => {
                                                    *base
                                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec20 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr20 = vec20.as_ptr().cast::<u8>();
                                                    let len20 = vec20.len();
                                                    ::core::mem::forget(vec20);
                                                    *base
                                                        .add(16 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len20;
                                                    *base
                                                        .add(15 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr20.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match read_only_hint19 {
                                                Some(e) => {
                                                    *base
                                                        .add(17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(1 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                                None => {
                                                    *base
                                                        .add(17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match destructive_hint19 {
                                                Some(e) => {
                                                    *base
                                                        .add(2 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(3 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                                None => {
                                                    *base
                                                        .add(2 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match idempotent_hint19 {
                                                Some(e) => {
                                                    *base
                                                        .add(4 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(5 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                                None => {
                                                    *base
                                                        .add(4 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match open_world_hint19 {
                                                Some(e) => {
                                                    *base
                                                        .add(6 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(7 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                                None => {
                                                    *base
                                                        .add(6 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        None => {
                                            *base
                                                .add(13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match meta12 {
                                        Some(e) => {
                                            *base
                                                .add(8 + 17 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec24 = e;
                                            let len24 = vec24.len();
                                            let layout24 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec24.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result24 = if layout24.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout24);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec24.into_iter().enumerate() {
                                                let base = result24
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t21_0, t21_1) = e;
                                                    let vec22 = (t21_0.into_bytes()).into_boxed_slice();
                                                    let ptr22 = vec22.as_ptr().cast::<u8>();
                                                    let len22 = vec22.len();
                                                    ::core::mem::forget(vec22);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len22;
                                                    *base.add(0).cast::<*mut u8>() = ptr22.cast_mut();
                                                    let vec23 = (t21_1.into_bytes()).into_boxed_slice();
                                                    let ptr23 = vec23.as_ptr().cast::<u8>();
                                                    let len23 = vec23.len();
                                                    ::core::mem::forget(vec23);
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len23;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr23.cast_mut();
                                                }
                                            }
                                            *base
                                                .add(8 + 19 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len24;
                                            *base
                                                .add(8 + 18 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result24;
                                        }
                                        None => {
                                            *base
                                                .add(8 + 17 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                            *ptr10
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len25;
                            *ptr10
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result25;
                            match next_cursor11 {
                                Some(e) => {
                                    *ptr10
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec26 = (e.into_bytes()).into_boxed_slice();
                                    let ptr26 = vec26.as_ptr().cast::<u8>();
                                    let len26 = vec26.len();
                                    ::core::mem::forget(vec26);
                                    *ptr10
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len26;
                                    *ptr10
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr26.cast_mut();
                                }
                                None => {
                                    *ptr10
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match meta11 {
                                Some(e) => {
                                    *ptr10
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec30 = e;
                                    let len30 = vec30.len();
                                    let layout30 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec30.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result30 = if layout30.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout30).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout30);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec30.into_iter().enumerate() {
                                        let base = result30
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t27_0, t27_1) = e;
                                            let vec28 = (t27_0.into_bytes()).into_boxed_slice();
                                            let ptr28 = vec28.as_ptr().cast::<u8>();
                                            let len28 = vec28.len();
                                            ::core::mem::forget(vec28);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len28;
                                            *base.add(0).cast::<*mut u8>() = ptr28.cast_mut();
                                            let vec29 = (t27_1.into_bytes()).into_boxed_slice();
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            ::core::mem::forget(vec29);
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len29;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr29.cast_mut();
                                        }
                                    }
                                    *ptr10
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len30;
                                    *ptr10
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result30;
                                }
                                None => {
                                    *ptr10
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr10.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::fastertools::mcp::types::McpError {
                                code: code31,
                                message: message31,
                                data: data31,
                            } = e;
                            use super::super::super::super::fastertools::mcp::types::ErrorCode as V32;
                            match code31 {
                                V32::ParseError => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                V32::InvalidRequest => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                }
                                V32::MethodNotFound => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                }
                                V32::InvalidParams => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                }
                                V32::InternalError => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                }
                                V32::ResourceNotFound => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                }
                                V32::ToolNotFound => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                }
                                V32::PromptNotFound => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                }
                                V32::Unauthorized => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                }
                                V32::RateLimited => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                }
                                V32::Timeout => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (10i32) as u8;
                                }
                                V32::Cancelled => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (11i32) as u8;
                                }
                                V32::CustomCode(e) => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (12i32) as u8;
                                    *ptr10
                                        .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                            }
                            let vec33 = (message31.into_bytes()).into_boxed_slice();
                            let ptr33 = vec33.as_ptr().cast::<u8>();
                            let len33 = vec33.len();
                            ::core::mem::forget(vec33);
                            *ptr10
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len33;
                            *ptr10
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr33.cast_mut();
                            match data31 {
                                Some(e) => {
                                    *ptr10
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec34 = (e.into_bytes()).into_boxed_slice();
                                    let ptr34 = vec34.as_ptr().cast::<u8>();
                                    let len34 = vec34.len();
                                    ::core::mem::forget(vec34);
                                    *ptr10
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len34;
                                    *ptr10
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr34.cast_mut();
                                }
                                None => {
                                    *ptr10
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    };
                    ptr10
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_list_tools<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base28 = l1;
                            let len28 = l2;
                            for i in 0..len28 {
                                let base = base28
                                    .add(i * (8 + 20 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                    let l5 = i32::from(
                                        *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l5 {
                                        0 => {}
                                        _ => {
                                            let l6 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l7 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l6, l7, 1);
                                        }
                                    }
                                    let l8 = i32::from(
                                        *base
                                            .add(5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l8 {
                                        0 => {}
                                        _ => {
                                            let l9 = *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l10 = *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l9, l10, 1);
                                        }
                                    }
                                    let l11 = *base
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l12 = *base
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l11, l12, 1);
                                    let l13 = i32::from(
                                        *base
                                            .add(10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l13 {
                                        0 => {}
                                        _ => {
                                            let l14 = *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l15 = *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l14, l15, 1);
                                        }
                                    }
                                    let l16 = i32::from(
                                        *base
                                            .add(13 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l16 {
                                        0 => {}
                                        _ => {
                                            let l17 = i32::from(
                                                *base
                                                    .add(14 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l17 {
                                                0 => {}
                                                _ => {
                                                    let l18 = *base
                                                        .add(15 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l19 = *base
                                                        .add(16 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l18, l19, 1);
                                                }
                                            }
                                        }
                                    }
                                    let l20 = i32::from(
                                        *base
                                            .add(8 + 17 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l20 {
                                        0 => {}
                                        _ => {
                                            let l21 = *base
                                                .add(8 + 18 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l22 = *base
                                                .add(8 + 19 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base27 = l21;
                                            let len27 = l22;
                                            for i in 0..len27 {
                                                let base = base27
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l23 = *base.add(0).cast::<*mut u8>();
                                                    let l24 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l23, l24, 1);
                                                    let l25 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l26 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l25, l26, 1);
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base27,
                                                len27 * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base28,
                                len28 * (8 + 20 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let l29 = i32::from(
                                *arg0
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l29 {
                                0 => {}
                                _ => {
                                    let l30 = *arg0
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l31 = *arg0
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l30, l31, 1);
                                }
                            }
                            let l32 = i32::from(
                                *arg0
                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l32 {
                                0 => {}
                                _ => {
                                    let l33 = *arg0
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l34 = *arg0
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base39 = l33;
                                    let len39 = l34;
                                    for i in 0..len39 {
                                        let base = base39
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l35 = *base.add(0).cast::<*mut u8>();
                                            let l36 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l35, l36, 1);
                                            let l37 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l38 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l37, l38, 1);
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base39,
                                        len39 * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                            }
                        }
                        _ => {
                            let l40 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l41 = *arg0
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l40, l41, 1);
                            let l42 = i32::from(
                                *arg0
                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l42 {
                                0 => {}
                                _ => {
                                    let l43 = *arg0
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l44 = *arg0
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l43, l44, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_call_tool_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: i32,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: i32,
                    arg6: *mut u8,
                    arg7: usize,
                    arg8: i32,
                    arg9: *mut u8,
                    arg10: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result10 = T::handle_call_tool(super::super::super::super::fastertools::mcp::tools::CallToolRequest {
                        name: _rt::string_lift(bytes0),
                        arguments: match arg2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len1 = arg4;
                                    let bytes1 = _rt::Vec::from_raw_parts(
                                        arg3.cast(),
                                        len1,
                                        len1,
                                    );
                                    _rt::string_lift(bytes1)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        progress_token: match arg5 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len2 = arg7;
                                    let bytes2 = _rt::Vec::from_raw_parts(
                                        arg6.cast(),
                                        len2,
                                        len2,
                                    );
                                    _rt::string_lift(bytes2)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        meta: match arg8 {
                            0 => None,
                            1 => {
                                let e = {
                                    let base9 = arg9;
                                    let len9 = arg10;
                                    let mut result9 = _rt::Vec::with_capacity(len9);
                                    for i in 0..len9 {
                                        let base = base9
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        let e9 = {
                                            let l3 = *base.add(0).cast::<*mut u8>();
                                            let l4 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len5 = l4;
                                            let bytes5 = _rt::Vec::from_raw_parts(
                                                l3.cast(),
                                                len5,
                                                len5,
                                            );
                                            let l6 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l7 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len8 = l7;
                                            let bytes8 = _rt::Vec::from_raw_parts(
                                                l6.cast(),
                                                len8,
                                                len8,
                                            );
                                            (_rt::string_lift(bytes5), _rt::string_lift(bytes8))
                                        };
                                        result9.push(e9);
                                    }
                                    _rt::cabi_dealloc(
                                        base9,
                                        len9 * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    result9
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    });
                    let ptr11 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result10 {
                        Ok(e) => {
                            *ptr11.add(0).cast::<u8>() = (0i32) as u8;
                            let super::super::super::super::fastertools::mcp::tools::ToolResult {
                                content: content12,
                                structured_content: structured_content12,
                                is_error: is_error12,
                                meta: meta12,
                            } = e;
                            let vec81 = content12;
                            let len81 = vec81.len();
                            let layout81 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec81.len()
                                    * (80 + 18 * ::core::mem::size_of::<*const u8>()),
                                8,
                            );
                            let result81 = if layout81.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout81).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout81);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec81.into_iter().enumerate() {
                                let base = result81
                                    .add(i * (80 + 18 * ::core::mem::size_of::<*const u8>()));
                                {
                                    use super::super::super::super::fastertools::mcp::types::ContentBlock as V80;
                                    match e {
                                        V80::Text(e) => {
                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                            let super::super::super::super::fastertools::mcp::types::TextContent {
                                                text: text13,
                                                annotations: annotations13,
                                                meta: meta13,
                                            } = e;
                                            let vec14 = (text13.into_bytes()).into_boxed_slice();
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            ::core::mem::forget(vec14);
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len14;
                                            *base.add(8).cast::<*mut u8>() = ptr14.cast_mut();
                                            match annotations13 {
                                                Some(e) => {
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::fastertools::mcp::types::Annotations {
                                                        audience: audience15,
                                                        priority: priority15,
                                                        last_modified: last_modified15,
                                                    } = e;
                                                    match audience15 {
                                                        Some(e) => {
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec16 = e;
                                                            let len16 = vec16.len();
                                                            let layout16 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec16.len() * 1,
                                                                1,
                                                            );
                                                            let result16 = if layout16.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout16).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout16);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec16.into_iter().enumerate() {
                                                                let base = result16.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                                }
                                                            }
                                                            *base
                                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len16;
                                                            *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result16;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match priority15 {
                                                        Some(e) => {
                                                            *base
                                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match last_modified15 {
                                                        Some(e) => {
                                                            *base
                                                                .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec17 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                                            let len17 = vec17.len();
                                                            ::core::mem::forget(vec17);
                                                            *base
                                                                .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len17;
                                                            *base
                                                                .add(40 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr17.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                None => {
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match meta13 {
                                                Some(e) => {
                                                    *base
                                                        .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec21 = e;
                                                    let len21 = vec21.len();
                                                    let layout21 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec21.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result21 = if layout21.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout21).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout21);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec21.into_iter().enumerate() {
                                                        let base = result21
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t18_0, t18_1) = e;
                                                            let vec19 = (t18_0.into_bytes()).into_boxed_slice();
                                                            let ptr19 = vec19.as_ptr().cast::<u8>();
                                                            let len19 = vec19.len();
                                                            ::core::mem::forget(vec19);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len19;
                                                            *base.add(0).cast::<*mut u8>() = ptr19.cast_mut();
                                                            let vec20 = (t18_1.into_bytes()).into_boxed_slice();
                                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                                            let len20 = vec20.len();
                                                            ::core::mem::forget(vec20);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len20;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr20.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len21;
                                                    *base
                                                        .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result21;
                                                }
                                                None => {
                                                    *base
                                                        .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        V80::Image(e) => {
                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                            let super::super::super::super::fastertools::mcp::types::ImageContent {
                                                data: data22,
                                                mime_type: mime_type22,
                                                annotations: annotations22,
                                                meta: meta22,
                                            } = e;
                                            let vec23 = (data22).into_boxed_slice();
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            ::core::mem::forget(vec23);
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len23;
                                            *base.add(8).cast::<*mut u8>() = ptr23.cast_mut();
                                            let vec24 = (mime_type22.into_bytes()).into_boxed_slice();
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();
                                            ::core::mem::forget(vec24);
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len24;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr24.cast_mut();
                                            match annotations22 {
                                                Some(e) => {
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::fastertools::mcp::types::Annotations {
                                                        audience: audience25,
                                                        priority: priority25,
                                                        last_modified: last_modified25,
                                                    } = e;
                                                    match audience25 {
                                                        Some(e) => {
                                                            *base
                                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec26 = e;
                                                            let len26 = vec26.len();
                                                            let layout26 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec26.len() * 1,
                                                                1,
                                                            );
                                                            let result26 = if layout26.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout26).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout26);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec26.into_iter().enumerate() {
                                                                let base = result26.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                                }
                                                            }
                                                            *base
                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len26;
                                                            *base
                                                                .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result26;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match priority25 {
                                                        Some(e) => {
                                                            *base
                                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match last_modified25 {
                                                        Some(e) => {
                                                            *base
                                                                .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec27 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                                            let len27 = vec27.len();
                                                            ::core::mem::forget(vec27);
                                                            *base
                                                                .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len27;
                                                            *base
                                                                .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr27.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                None => {
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match meta22 {
                                                Some(e) => {
                                                    *base
                                                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec31 = e;
                                                    let len31 = vec31.len();
                                                    let layout31 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec31.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result31 = if layout31.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout31).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout31);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec31.into_iter().enumerate() {
                                                        let base = result31
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t28_0, t28_1) = e;
                                                            let vec29 = (t28_0.into_bytes()).into_boxed_slice();
                                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                                            let len29 = vec29.len();
                                                            ::core::mem::forget(vec29);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len29;
                                                            *base.add(0).cast::<*mut u8>() = ptr29.cast_mut();
                                                            let vec30 = (t28_1.into_bytes()).into_boxed_slice();
                                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                                            let len30 = vec30.len();
                                                            ::core::mem::forget(vec30);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len30;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr30.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len31;
                                                    *base
                                                        .add(48 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result31;
                                                }
                                                None => {
                                                    *base
                                                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        V80::Audio(e) => {
                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                            let super::super::super::super::fastertools::mcp::types::AudioContent {
                                                data: data32,
                                                mime_type: mime_type32,
                                                annotations: annotations32,
                                                meta: meta32,
                                            } = e;
                                            let vec33 = (data32).into_boxed_slice();
                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                            let len33 = vec33.len();
                                            ::core::mem::forget(vec33);
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len33;
                                            *base.add(8).cast::<*mut u8>() = ptr33.cast_mut();
                                            let vec34 = (mime_type32.into_bytes()).into_boxed_slice();
                                            let ptr34 = vec34.as_ptr().cast::<u8>();
                                            let len34 = vec34.len();
                                            ::core::mem::forget(vec34);
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len34;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr34.cast_mut();
                                            match annotations32 {
                                                Some(e) => {
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::fastertools::mcp::types::Annotations {
                                                        audience: audience35,
                                                        priority: priority35,
                                                        last_modified: last_modified35,
                                                    } = e;
                                                    match audience35 {
                                                        Some(e) => {
                                                            *base
                                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec36 = e;
                                                            let len36 = vec36.len();
                                                            let layout36 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec36.len() * 1,
                                                                1,
                                                            );
                                                            let result36 = if layout36.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout36).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout36);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec36.into_iter().enumerate() {
                                                                let base = result36.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                                }
                                                            }
                                                            *base
                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len36;
                                                            *base
                                                                .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result36;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match priority35 {
                                                        Some(e) => {
                                                            *base
                                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match last_modified35 {
                                                        Some(e) => {
                                                            *base
                                                                .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec37 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr37 = vec37.as_ptr().cast::<u8>();
                                                            let len37 = vec37.len();
                                                            ::core::mem::forget(vec37);
                                                            *base
                                                                .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len37;
                                                            *base
                                                                .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr37.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                None => {
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match meta32 {
                                                Some(e) => {
                                                    *base
                                                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec41 = e;
                                                    let len41 = vec41.len();
                                                    let layout41 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec41.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result41 = if layout41.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout41).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout41);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec41.into_iter().enumerate() {
                                                        let base = result41
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t38_0, t38_1) = e;
                                                            let vec39 = (t38_0.into_bytes()).into_boxed_slice();
                                                            let ptr39 = vec39.as_ptr().cast::<u8>();
                                                            let len39 = vec39.len();
                                                            ::core::mem::forget(vec39);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len39;
                                                            *base.add(0).cast::<*mut u8>() = ptr39.cast_mut();
                                                            let vec40 = (t38_1.into_bytes()).into_boxed_slice();
                                                            let ptr40 = vec40.as_ptr().cast::<u8>();
                                                            let len40 = vec40.len();
                                                            ::core::mem::forget(vec40);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len40;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr40.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len41;
                                                    *base
                                                        .add(48 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result41;
                                                }
                                                None => {
                                                    *base
                                                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        V80::ResourceLink(e) => {
                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                            let super::super::super::super::fastertools::mcp::types::ResourceLink {
                                                uri: uri42,
                                                name: name42,
                                                title: title42,
                                                description: description42,
                                                mime_type: mime_type42,
                                                size: size42,
                                                annotations: annotations42,
                                                meta: meta42,
                                            } = e;
                                            let vec43 = (uri42.into_bytes()).into_boxed_slice();
                                            let ptr43 = vec43.as_ptr().cast::<u8>();
                                            let len43 = vec43.len();
                                            ::core::mem::forget(vec43);
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len43;
                                            *base.add(8).cast::<*mut u8>() = ptr43.cast_mut();
                                            let vec44 = (name42.into_bytes()).into_boxed_slice();
                                            let ptr44 = vec44.as_ptr().cast::<u8>();
                                            let len44 = vec44.len();
                                            ::core::mem::forget(vec44);
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len44;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr44.cast_mut();
                                            match title42 {
                                                Some(e) => {
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec45 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr45 = vec45.as_ptr().cast::<u8>();
                                                    let len45 = vec45.len();
                                                    ::core::mem::forget(vec45);
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len45;
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr45.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match description42 {
                                                Some(e) => {
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec46 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr46 = vec46.as_ptr().cast::<u8>();
                                                    let len46 = vec46.len();
                                                    ::core::mem::forget(vec46);
                                                    *base
                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len46;
                                                    *base
                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr46.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match mime_type42 {
                                                Some(e) => {
                                                    *base
                                                        .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec47 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr47 = vec47.as_ptr().cast::<u8>();
                                                    let len47 = vec47.len();
                                                    ::core::mem::forget(vec47);
                                                    *base
                                                        .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len47;
                                                    *base
                                                        .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr47.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match size42 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i64>() = _rt::as_i64(e);
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match annotations42 {
                                                Some(e) => {
                                                    *base
                                                        .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::fastertools::mcp::types::Annotations {
                                                        audience: audience48,
                                                        priority: priority48,
                                                        last_modified: last_modified48,
                                                    } = e;
                                                    match audience48 {
                                                        Some(e) => {
                                                            *base
                                                                .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec49 = e;
                                                            let len49 = vec49.len();
                                                            let layout49 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec49.len() * 1,
                                                                1,
                                                            );
                                                            let result49 = if layout49.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout49).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout49);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec49.into_iter().enumerate() {
                                                                let base = result49.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                                }
                                                            }
                                                            *base
                                                                .add(40 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len49;
                                                            *base
                                                                .add(40 + 13 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result49;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match priority48 {
                                                        Some(e) => {
                                                            *base
                                                                .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match last_modified48 {
                                                        Some(e) => {
                                                            *base
                                                                .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec50 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr50 = vec50.as_ptr().cast::<u8>();
                                                            let len50 = vec50.len();
                                                            ::core::mem::forget(vec50);
                                                            *base
                                                                .add(64 + 16 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len50;
                                                            *base
                                                                .add(64 + 15 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr50.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                None => {
                                                    *base
                                                        .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match meta42 {
                                                Some(e) => {
                                                    *base
                                                        .add(72 + 16 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec54 = e;
                                                    let len54 = vec54.len();
                                                    let layout54 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec54.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result54 = if layout54.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout54).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout54);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec54.into_iter().enumerate() {
                                                        let base = result54
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t51_0, t51_1) = e;
                                                            let vec52 = (t51_0.into_bytes()).into_boxed_slice();
                                                            let ptr52 = vec52.as_ptr().cast::<u8>();
                                                            let len52 = vec52.len();
                                                            ::core::mem::forget(vec52);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len52;
                                                            *base.add(0).cast::<*mut u8>() = ptr52.cast_mut();
                                                            let vec53 = (t51_1.into_bytes()).into_boxed_slice();
                                                            let ptr53 = vec53.as_ptr().cast::<u8>();
                                                            let len53 = vec53.len();
                                                            ::core::mem::forget(vec53);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len53;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr53.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(72 + 18 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len54;
                                                    *base
                                                        .add(72 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result54;
                                                }
                                                None => {
                                                    *base
                                                        .add(72 + 16 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        V80::EmbeddedResource(e) => {
                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                            let super::super::super::super::fastertools::mcp::types::EmbeddedResource {
                                                contents: contents55,
                                                annotations: annotations55,
                                                meta: meta55,
                                            } = e;
                                            use super::super::super::super::fastertools::mcp::types::ResourceContents as V72;
                                            match contents55 {
                                                V72::Text(e) => {
                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    let super::super::super::super::fastertools::mcp::types::TextResourceContents {
                                                        uri: uri56,
                                                        mime_type: mime_type56,
                                                        text: text56,
                                                        meta: meta56,
                                                    } = e;
                                                    let vec57 = (uri56.into_bytes()).into_boxed_slice();
                                                    let ptr57 = vec57.as_ptr().cast::<u8>();
                                                    let len57 = vec57.len();
                                                    ::core::mem::forget(vec57);
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len57;
                                                    *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr57.cast_mut();
                                                    match mime_type56 {
                                                        Some(e) => {
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec58 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr58 = vec58.as_ptr().cast::<u8>();
                                                            let len58 = vec58.len();
                                                            ::core::mem::forget(vec58);
                                                            *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len58;
                                                            *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr58.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    let vec59 = (text56.into_bytes()).into_boxed_slice();
                                                    let ptr59 = vec59.as_ptr().cast::<u8>();
                                                    let len59 = vec59.len();
                                                    ::core::mem::forget(vec59);
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len59;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr59.cast_mut();
                                                    match meta56 {
                                                        Some(e) => {
                                                            *base
                                                                .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec63 = e;
                                                            let len63 = vec63.len();
                                                            let layout63 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec63.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result63 = if layout63.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout63).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout63);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec63.into_iter().enumerate() {
                                                                let base = result63
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t60_0, t60_1) = e;
                                                                    let vec61 = (t60_0.into_bytes()).into_boxed_slice();
                                                                    let ptr61 = vec61.as_ptr().cast::<u8>();
                                                                    let len61 = vec61.len();
                                                                    ::core::mem::forget(vec61);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len61;
                                                                    *base.add(0).cast::<*mut u8>() = ptr61.cast_mut();
                                                                    let vec62 = (t60_1.into_bytes()).into_boxed_slice();
                                                                    let ptr62 = vec62.as_ptr().cast::<u8>();
                                                                    let len62 = vec62.len();
                                                                    ::core::mem::forget(vec62);
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len62;
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr62.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len63;
                                                            *base
                                                                .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result63;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V72::Blob(e) => {
                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::fastertools::mcp::types::BlobResourceContents {
                                                        uri: uri64,
                                                        mime_type: mime_type64,
                                                        blob: blob64,
                                                        meta: meta64,
                                                    } = e;
                                                    let vec65 = (uri64.into_bytes()).into_boxed_slice();
                                                    let ptr65 = vec65.as_ptr().cast::<u8>();
                                                    let len65 = vec65.len();
                                                    ::core::mem::forget(vec65);
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len65;
                                                    *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr65.cast_mut();
                                                    match mime_type64 {
                                                        Some(e) => {
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec66 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr66 = vec66.as_ptr().cast::<u8>();
                                                            let len66 = vec66.len();
                                                            ::core::mem::forget(vec66);
                                                            *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len66;
                                                            *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr66.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    let vec67 = (blob64).into_boxed_slice();
                                                    let ptr67 = vec67.as_ptr().cast::<u8>();
                                                    let len67 = vec67.len();
                                                    ::core::mem::forget(vec67);
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len67;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr67.cast_mut();
                                                    match meta64 {
                                                        Some(e) => {
                                                            *base
                                                                .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec71 = e;
                                                            let len71 = vec71.len();
                                                            let layout71 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec71.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result71 = if layout71.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout71).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout71);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec71.into_iter().enumerate() {
                                                                let base = result71
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t68_0, t68_1) = e;
                                                                    let vec69 = (t68_0.into_bytes()).into_boxed_slice();
                                                                    let ptr69 = vec69.as_ptr().cast::<u8>();
                                                                    let len69 = vec69.len();
                                                                    ::core::mem::forget(vec69);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len69;
                                                                    *base.add(0).cast::<*mut u8>() = ptr69.cast_mut();
                                                                    let vec70 = (t68_1.into_bytes()).into_boxed_slice();
                                                                    let ptr70 = vec70.as_ptr().cast::<u8>();
                                                                    let len70 = vec70.len();
                                                                    ::core::mem::forget(vec70);
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len70;
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr70.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len71;
                                                            *base
                                                                .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result71;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                            match annotations55 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::fastertools::mcp::types::Annotations {
                                                        audience: audience73,
                                                        priority: priority73,
                                                        last_modified: last_modified73,
                                                    } = e;
                                                    match audience73 {
                                                        Some(e) => {
                                                            *base
                                                                .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec74 = e;
                                                            let len74 = vec74.len();
                                                            let layout74 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec74.len() * 1,
                                                                1,
                                                            );
                                                            let result74 = if layout74.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout74).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout74);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec74.into_iter().enumerate() {
                                                                let base = result74.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                                }
                                                            }
                                                            *base
                                                                .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len74;
                                                            *base
                                                                .add(24 + 11 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result74;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match priority73 {
                                                        Some(e) => {
                                                            *base
                                                                .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match last_modified73 {
                                                        Some(e) => {
                                                            *base
                                                                .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec75 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr75 = vec75.as_ptr().cast::<u8>();
                                                            let len75 = vec75.len();
                                                            ::core::mem::forget(vec75);
                                                            *base
                                                                .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len75;
                                                            *base
                                                                .add(48 + 13 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr75.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match meta55 {
                                                Some(e) => {
                                                    *base
                                                        .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec79 = e;
                                                    let len79 = vec79.len();
                                                    let layout79 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec79.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result79 = if layout79.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout79).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout79);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec79.into_iter().enumerate() {
                                                        let base = result79
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t76_0, t76_1) = e;
                                                            let vec77 = (t76_0.into_bytes()).into_boxed_slice();
                                                            let ptr77 = vec77.as_ptr().cast::<u8>();
                                                            let len77 = vec77.len();
                                                            ::core::mem::forget(vec77);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len77;
                                                            *base.add(0).cast::<*mut u8>() = ptr77.cast_mut();
                                                            let vec78 = (t76_1.into_bytes()).into_boxed_slice();
                                                            let ptr78 = vec78.as_ptr().cast::<u8>();
                                                            let len78 = vec78.len();
                                                            ::core::mem::forget(vec78);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len78;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr78.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(56 + 16 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len79;
                                                    *base
                                                        .add(56 + 15 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result79;
                                                }
                                                None => {
                                                    *base
                                                        .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                }
                            }
                            *ptr11
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len81;
                            *ptr11
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result81;
                            match structured_content12 {
                                Some(e) => {
                                    *ptr11
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec82 = (e.into_bytes()).into_boxed_slice();
                                    let ptr82 = vec82.as_ptr().cast::<u8>();
                                    let len82 = vec82.len();
                                    ::core::mem::forget(vec82);
                                    *ptr11
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len82;
                                    *ptr11
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr82.cast_mut();
                                }
                                None => {
                                    *ptr11
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match is_error12 {
                                Some(e) => {
                                    *ptr11
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr11
                                        .add(1 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                None => {
                                    *ptr11
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match meta12 {
                                Some(e) => {
                                    *ptr11
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec86 = e;
                                    let len86 = vec86.len();
                                    let layout86 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec86.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result86 = if layout86.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout86).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout86);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec86.into_iter().enumerate() {
                                        let base = result86
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t83_0, t83_1) = e;
                                            let vec84 = (t83_0.into_bytes()).into_boxed_slice();
                                            let ptr84 = vec84.as_ptr().cast::<u8>();
                                            let len84 = vec84.len();
                                            ::core::mem::forget(vec84);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len84;
                                            *base.add(0).cast::<*mut u8>() = ptr84.cast_mut();
                                            let vec85 = (t83_1.into_bytes()).into_boxed_slice();
                                            let ptr85 = vec85.as_ptr().cast::<u8>();
                                            let len85 = vec85.len();
                                            ::core::mem::forget(vec85);
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len85;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr85.cast_mut();
                                        }
                                    }
                                    *ptr11
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len86;
                                    *ptr11
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result86;
                                }
                                None => {
                                    *ptr11
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr11.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::fastertools::mcp::types::McpError {
                                code: code87,
                                message: message87,
                                data: data87,
                            } = e;
                            use super::super::super::super::fastertools::mcp::types::ErrorCode as V88;
                            match code87 {
                                V88::ParseError => {
                                    *ptr11
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                V88::InvalidRequest => {
                                    *ptr11
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                }
                                V88::MethodNotFound => {
                                    *ptr11
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                }
                                V88::InvalidParams => {
                                    *ptr11
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                }
                                V88::InternalError => {
                                    *ptr11
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                }
                                V88::ResourceNotFound => {
                                    *ptr11
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                }
                                V88::ToolNotFound => {
                                    *ptr11
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                }
                                V88::PromptNotFound => {
                                    *ptr11
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                }
                                V88::Unauthorized => {
                                    *ptr11
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                }
                                V88::RateLimited => {
                                    *ptr11
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                }
                                V88::Timeout => {
                                    *ptr11
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (10i32) as u8;
                                }
                                V88::Cancelled => {
                                    *ptr11
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (11i32) as u8;
                                }
                                V88::CustomCode(e) => {
                                    *ptr11
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (12i32) as u8;
                                    *ptr11
                                        .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                            }
                            let vec89 = (message87.into_bytes()).into_boxed_slice();
                            let ptr89 = vec89.as_ptr().cast::<u8>();
                            let len89 = vec89.len();
                            ::core::mem::forget(vec89);
                            *ptr11
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len89;
                            *ptr11
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr89.cast_mut();
                            match data87 {
                                Some(e) => {
                                    *ptr11
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec90 = (e.into_bytes()).into_boxed_slice();
                                    let ptr90 = vec90.as_ptr().cast::<u8>();
                                    let len90 = vec90.len();
                                    ::core::mem::forget(vec90);
                                    *ptr11
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len90;
                                    *ptr11
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr90.cast_mut();
                                }
                                None => {
                                    *ptr11
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    };
                    ptr11
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_call_tool<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base141 = l1;
                            let len141 = l2;
                            for i in 0..len141 {
                                let base = base141
                                    .add(i * (80 + 18 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = i32::from(*base.add(0).cast::<u8>());
                                    match l3 {
                                        0 => {
                                            let l4 = *base.add(8).cast::<*mut u8>();
                                            let l5 = *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l4, l5, 1);
                                            let l6 = i32::from(
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l6 {
                                                0 => {}
                                                _ => {
                                                    let l7 = i32::from(
                                                        *base
                                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l7 {
                                                        0 => {}
                                                        _ => {
                                                            let l8 = *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l9 = *base
                                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base10 = l8;
                                                            let len10 = l9;
                                                            _rt::cabi_dealloc(base10, len10 * 1, 1);
                                                        }
                                                    }
                                                    let l11 = i32::from(
                                                        *base
                                                            .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l11 {
                                                        0 => {}
                                                        _ => {
                                                            let l12 = *base
                                                                .add(40 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l13 = *base
                                                                .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l12, l13, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            let l14 = i32::from(
                                                *base
                                                    .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l14 {
                                                0 => {}
                                                _ => {
                                                    let l15 = *base
                                                        .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l16 = *base
                                                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base21 = l15;
                                                    let len21 = l16;
                                                    for i in 0..len21 {
                                                        let base = base21
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l17 = *base.add(0).cast::<*mut u8>();
                                                            let l18 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l17, l18, 1);
                                                            let l19 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l20 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l19, l20, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base21,
                                                        len21 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                            }
                                        }
                                        1 => {
                                            let l22 = *base.add(8).cast::<*mut u8>();
                                            let l23 = *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base24 = l22;
                                            let len24 = l23;
                                            _rt::cabi_dealloc(base24, len24 * 1, 1);
                                            let l25 = *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l26 = *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l25, l26, 1);
                                            let l27 = i32::from(
                                                *base
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l27 {
                                                0 => {}
                                                _ => {
                                                    let l28 = i32::from(
                                                        *base
                                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l28 {
                                                        0 => {}
                                                        _ => {
                                                            let l29 = *base
                                                                .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l30 = *base
                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base31 = l29;
                                                            let len31 = l30;
                                                            _rt::cabi_dealloc(base31, len31 * 1, 1);
                                                        }
                                                    }
                                                    let l32 = i32::from(
                                                        *base
                                                            .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l32 {
                                                        0 => {}
                                                        _ => {
                                                            let l33 = *base
                                                                .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l34 = *base
                                                                .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l33, l34, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            let l35 = i32::from(
                                                *base
                                                    .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l35 {
                                                0 => {}
                                                _ => {
                                                    let l36 = *base
                                                        .add(48 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l37 = *base
                                                        .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base42 = l36;
                                                    let len42 = l37;
                                                    for i in 0..len42 {
                                                        let base = base42
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l38 = *base.add(0).cast::<*mut u8>();
                                                            let l39 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l38, l39, 1);
                                                            let l40 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l41 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l40, l41, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base42,
                                                        len42 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                            }
                                        }
                                        2 => {
                                            let l43 = *base.add(8).cast::<*mut u8>();
                                            let l44 = *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base45 = l43;
                                            let len45 = l44;
                                            _rt::cabi_dealloc(base45, len45 * 1, 1);
                                            let l46 = *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l47 = *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l46, l47, 1);
                                            let l48 = i32::from(
                                                *base
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l48 {
                                                0 => {}
                                                _ => {
                                                    let l49 = i32::from(
                                                        *base
                                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l49 {
                                                        0 => {}
                                                        _ => {
                                                            let l50 = *base
                                                                .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l51 = *base
                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base52 = l50;
                                                            let len52 = l51;
                                                            _rt::cabi_dealloc(base52, len52 * 1, 1);
                                                        }
                                                    }
                                                    let l53 = i32::from(
                                                        *base
                                                            .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l53 {
                                                        0 => {}
                                                        _ => {
                                                            let l54 = *base
                                                                .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l55 = *base
                                                                .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l54, l55, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            let l56 = i32::from(
                                                *base
                                                    .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l56 {
                                                0 => {}
                                                _ => {
                                                    let l57 = *base
                                                        .add(48 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l58 = *base
                                                        .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base63 = l57;
                                                    let len63 = l58;
                                                    for i in 0..len63 {
                                                        let base = base63
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l59 = *base.add(0).cast::<*mut u8>();
                                                            let l60 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l59, l60, 1);
                                                            let l61 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l62 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l61, l62, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base63,
                                                        len63 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                            }
                                        }
                                        3 => {
                                            let l64 = *base.add(8).cast::<*mut u8>();
                                            let l65 = *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l64, l65, 1);
                                            let l66 = *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l67 = *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l66, l67, 1);
                                            let l68 = i32::from(
                                                *base
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l68 {
                                                0 => {}
                                                _ => {
                                                    let l69 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l70 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l69, l70, 1);
                                                }
                                            }
                                            let l71 = i32::from(
                                                *base
                                                    .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l71 {
                                                0 => {}
                                                _ => {
                                                    let l72 = *base
                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l73 = *base
                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l72, l73, 1);
                                                }
                                            }
                                            let l74 = i32::from(
                                                *base
                                                    .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l74 {
                                                0 => {}
                                                _ => {
                                                    let l75 = *base
                                                        .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l76 = *base
                                                        .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l75, l76, 1);
                                                }
                                            }
                                            let l77 = i32::from(
                                                *base
                                                    .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l77 {
                                                0 => {}
                                                _ => {
                                                    let l78 = i32::from(
                                                        *base
                                                            .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l78 {
                                                        0 => {}
                                                        _ => {
                                                            let l79 = *base
                                                                .add(40 + 13 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l80 = *base
                                                                .add(40 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base81 = l79;
                                                            let len81 = l80;
                                                            _rt::cabi_dealloc(base81, len81 * 1, 1);
                                                        }
                                                    }
                                                    let l82 = i32::from(
                                                        *base
                                                            .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l82 {
                                                        0 => {}
                                                        _ => {
                                                            let l83 = *base
                                                                .add(64 + 15 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l84 = *base
                                                                .add(64 + 16 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l83, l84, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            let l85 = i32::from(
                                                *base
                                                    .add(72 + 16 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l85 {
                                                0 => {}
                                                _ => {
                                                    let l86 = *base
                                                        .add(72 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l87 = *base
                                                        .add(72 + 18 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base92 = l86;
                                                    let len92 = l87;
                                                    for i in 0..len92 {
                                                        let base = base92
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l88 = *base.add(0).cast::<*mut u8>();
                                                            let l89 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l88, l89, 1);
                                                            let l90 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l91 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l90, l91, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base92,
                                                        len92 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                            }
                                        }
                                        _ => {
                                            let l93 = i32::from(*base.add(8).cast::<u8>());
                                            match l93 {
                                                0 => {
                                                    let l94 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l95 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l94, l95, 1);
                                                    let l96 = i32::from(
                                                        *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l96 {
                                                        0 => {}
                                                        _ => {
                                                            let l97 = *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l98 = *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l97, l98, 1);
                                                        }
                                                    }
                                                    let l99 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l100 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l99, l100, 1);
                                                    let l101 = i32::from(
                                                        *base
                                                            .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l101 {
                                                        0 => {}
                                                        _ => {
                                                            let l102 = *base
                                                                .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l103 = *base
                                                                .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base108 = l102;
                                                            let len108 = l103;
                                                            for i in 0..len108 {
                                                                let base = base108
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l104 = *base.add(0).cast::<*mut u8>();
                                                                    let l105 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l104, l105, 1);
                                                                    let l106 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l107 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l106, l107, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base108,
                                                                len108 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let l109 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l110 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l109, l110, 1);
                                                    let l111 = i32::from(
                                                        *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l111 {
                                                        0 => {}
                                                        _ => {
                                                            let l112 = *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l113 = *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l112, l113, 1);
                                                        }
                                                    }
                                                    let l114 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l115 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base116 = l114;
                                                    let len116 = l115;
                                                    _rt::cabi_dealloc(base116, len116 * 1, 1);
                                                    let l117 = i32::from(
                                                        *base
                                                            .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l117 {
                                                        0 => {}
                                                        _ => {
                                                            let l118 = *base
                                                                .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l119 = *base
                                                                .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base124 = l118;
                                                            let len124 = l119;
                                                            for i in 0..len124 {
                                                                let base = base124
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l120 = *base.add(0).cast::<*mut u8>();
                                                                    let l121 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l120, l121, 1);
                                                                    let l122 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l123 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l122, l123, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base124,
                                                                len124 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                            let l125 = i32::from(
                                                *base
                                                    .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l125 {
                                                0 => {}
                                                _ => {
                                                    let l126 = i32::from(
                                                        *base
                                                            .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l126 {
                                                        0 => {}
                                                        _ => {
                                                            let l127 = *base
                                                                .add(24 + 11 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l128 = *base
                                                                .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base129 = l127;
                                                            let len129 = l128;
                                                            _rt::cabi_dealloc(base129, len129 * 1, 1);
                                                        }
                                                    }
                                                    let l130 = i32::from(
                                                        *base
                                                            .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l130 {
                                                        0 => {}
                                                        _ => {
                                                            let l131 = *base
                                                                .add(48 + 13 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l132 = *base
                                                                .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l131, l132, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            let l133 = i32::from(
                                                *base
                                                    .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l133 {
                                                0 => {}
                                                _ => {
                                                    let l134 = *base
                                                        .add(56 + 15 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l135 = *base
                                                        .add(56 + 16 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base140 = l134;
                                                    let len140 = l135;
                                                    for i in 0..len140 {
                                                        let base = base140
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l136 = *base.add(0).cast::<*mut u8>();
                                                            let l137 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l136, l137, 1);
                                                            let l138 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l139 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l138, l139, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base140,
                                                        len140 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base141,
                                len141 * (80 + 18 * ::core::mem::size_of::<*const u8>()),
                                8,
                            );
                            let l142 = i32::from(
                                *arg0
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l142 {
                                0 => {}
                                _ => {
                                    let l143 = *arg0
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l144 = *arg0
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l143, l144, 1);
                                }
                            }
                            let l145 = i32::from(
                                *arg0
                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l145 {
                                0 => {}
                                _ => {
                                    let l146 = *arg0
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l147 = *arg0
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base152 = l146;
                                    let len152 = l147;
                                    for i in 0..len152 {
                                        let base = base152
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l148 = *base.add(0).cast::<*mut u8>();
                                            let l149 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l148, l149, 1);
                                            let l150 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l151 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l150, l151, 1);
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base152,
                                        len152 * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                            }
                        }
                        _ => {
                            let l153 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l154 = *arg0
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l153, l154, 1);
                            let l155 = i32::from(
                                *arg0
                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l155 {
                                0 => {}
                                _ => {
                                    let l156 = *arg0
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l157 = *arg0
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l156, l157, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    /// List available tools
                    fn handle_list_tools(
                        request: ListToolsRequest,
                    ) -> Result<ListToolsResponse, McpError>;
                    /// Execute a tool
                    fn handle_call_tool(
                        request: CallToolRequest,
                    ) -> Result<ToolResult, McpError>;
                }
                #[doc(hidden)]
                macro_rules! __export_fastertools_mcp_tools_capabilities_0_1_12_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "fastertools:mcp/tools-capabilities@0.1.12#handle-list-tools")]
                        unsafe extern "C" fn export_handle_list_tools(arg0 : i32, arg1 :
                        * mut u8, arg2 : usize, arg3 : i32, arg4 : * mut u8, arg5 :
                        usize, arg6 : i32, arg7 : * mut u8, arg8 : usize,) -> * mut u8 {
                        unsafe { $($path_to_types)*::
                        _export_handle_list_tools_cabi::<$ty > (arg0, arg1, arg2, arg3,
                        arg4, arg5, arg6, arg7, arg8) } } #[unsafe (export_name =
                        "cabi_post_fastertools:mcp/tools-capabilities@0.1.12#handle-list-tools")]
                        unsafe extern "C" fn _post_return_handle_list_tools(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_handle_list_tools::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "fastertools:mcp/tools-capabilities@0.1.12#handle-call-tool")]
                        unsafe extern "C" fn export_handle_call_tool(arg0 : * mut u8,
                        arg1 : usize, arg2 : i32, arg3 : * mut u8, arg4 : usize, arg5 :
                        i32, arg6 : * mut u8, arg7 : usize, arg8 : i32, arg9 : * mut u8,
                        arg10 : usize,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_handle_call_tool_cabi::<$ty > (arg0, arg1, arg2, arg3,
                        arg4, arg5, arg6, arg7, arg8, arg9, arg10) } } #[unsafe
                        (export_name =
                        "cabi_post_fastertools:mcp/tools-capabilities@0.1.12#handle-call-tool")]
                        unsafe extern "C" fn _post_return_handle_call_tool(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_handle_call_tool::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_fastertools_mcp_tools_capabilities_0_1_12_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 10 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 10
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub use alloc_crate::alloc;
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_tools_provider_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::fastertools::mcp::tools_capabilities::__export_fastertools_mcp_tools_capabilities_0_1_12_cabi!($ty
        with_types_in $($path_to_types_root)*::
        exports::fastertools::mcp::tools_capabilities);
    };
}
#[doc(inline)]
pub(crate) use __export_tools_provider_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:fastertools:mcp@0.1.12:tools-provider:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 2675] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xee\x13\x01A\x02\x01\
A\x12\x01B;\x01m\x02\x04user\x09assistant\x04\0\x04role\x03\0\0\x01s\x04\0\x0ajs\
on-value\x03\0\x02\x01o\x02ss\x01p\x04\x04\0\x0bmeta-fields\x03\0\x05\x01p\x01\x01\
k\x07\x01ku\x01ks\x01r\x03\x08audience\x08\x08priority\x09\x0dlast-modified\x0a\x04\
\0\x0bannotations\x03\0\x0b\x01r\x02\x04names\x05title\x0a\x04\0\x0dbase-metadat\
a\x03\0\x0d\x01k\x0c\x01k\x06\x01r\x03\x04texts\x0bannotations\x0f\x04meta\x10\x04\
\0\x0ctext-content\x03\0\x11\x01p}\x01r\x04\x04data\x13\x09mime-types\x0bannotat\
ions\x0f\x04meta\x10\x04\0\x0dimage-content\x03\0\x14\x01r\x04\x04data\x13\x09mi\
me-types\x0bannotations\x0f\x04meta\x10\x04\0\x0daudio-content\x03\0\x16\x01kw\x01\
r\x08\x03uris\x04names\x05title\x0a\x0bdescription\x0a\x09mime-type\x0a\x04size\x18\
\x0bannotations\x0f\x04meta\x10\x04\0\x0dresource-link\x03\0\x19\x01r\x04\x03uri\
s\x09mime-type\x0a\x04texts\x04meta\x10\x04\0\x16text-resource-contents\x03\0\x1b\
\x01r\x04\x03uris\x09mime-type\x0a\x04blob\x13\x04meta\x10\x04\0\x16blob-resourc\
e-contents\x03\0\x1d\x01q\x02\x04text\x01\x1c\0\x04blob\x01\x1e\0\x04\0\x11resou\
rce-contents\x03\0\x1f\x01r\x03\x08contents\x20\x0bannotations\x0f\x04meta\x10\x04\
\0\x11embedded-resource\x03\0!\x01q\x05\x04text\x01\x12\0\x05image\x01\x15\0\x05\
audio\x01\x17\0\x0dresource-link\x01\x1a\0\x11embedded-resource\x01\"\0\x04\0\x0d\
content-block\x03\0#\x01s\x04\0\x0bjson-schema\x03\0%\x01q\x0d\x0bparse-error\0\0\
\x0finvalid-request\0\0\x10method-not-found\0\0\x0einvalid-params\0\0\x0einterna\
l-error\0\0\x12resource-not-found\0\0\x0etool-not-found\0\0\x10prompt-not-found\0\
\0\x0cunauthorized\0\0\x0crate-limited\0\0\x07timeout\0\0\x09cancelled\0\0\x0bcu\
stom-code\x01z\0\x04\0\x0aerror-code\x03\0'\x01r\x03\x04code(\x07messages\x04dat\
a\x0a\x04\0\x09mcp-error\x03\0)\x01s\x04\0\x06cursor\x03\0+\x01s\x04\0\x0eprogre\
ss-token\x03\0-\x01q\x02\x03str\x01s\0\x03num\x01x\0\x04\0\x0arequest-id\x03\0/\x01\
m\x03\x04user\x09assistant\x06system\x04\0\x0cmessage-role\x03\01\x01r\x01\x04na\
me\x0a\x04\0\x0amodel-hint\x03\03\x01p4\x01k5\x01r\x04\x05hints6\x0dcost-priorit\
y\x09\x0espeed-priority\x09\x15intelligence-priority\x09\x04\0\x11model-preferen\
ces\x03\07\x01r\x04\x0curi-templates\x04names\x0bdescription\x0a\x09mime-type\x0a\
\x04\0\x11resource-template\x03\09\x03\0\x1cfastertools:mcp/types@0.1.12\x05\0\x02\
\x03\0\0\x0dcontent-block\x02\x03\0\0\x0ajson-value\x02\x03\0\0\x0bjson-schema\x02\
\x03\0\0\x09mcp-error\x02\x03\0\0\x0dbase-metadata\x02\x03\0\0\x0bmeta-fields\x02\
\x03\0\0\x06cursor\x02\x03\0\0\x0eprogress-token\x01B&\x02\x03\x02\x01\x01\x04\0\
\x0dcontent-block\x03\0\0\x02\x03\x02\x01\x02\x04\0\x0ajson-value\x03\0\x02\x02\x03\
\x02\x01\x03\x04\0\x0bjson-schema\x03\0\x04\x02\x03\x02\x01\x04\x04\0\x09mcp-err\
or\x03\0\x06\x02\x03\x02\x01\x05\x04\0\x0dbase-metadata\x03\0\x08\x02\x03\x02\x01\
\x06\x04\0\x0bmeta-fields\x03\0\x0a\x02\x03\x02\x01\x07\x04\0\x06cursor\x03\0\x0c\
\x02\x03\x02\x01\x08\x04\0\x0eprogress-token\x03\0\x0e\x01ks\x01k\x7f\x01r\x05\x05\
title\x10\x0eread-only-hint\x11\x10destructive-hint\x11\x0fidempotent-hint\x11\x0f\
open-world-hint\x11\x04\0\x10tool-annotations\x03\0\x12\x01k\x05\x01k\x13\x01k\x0b\
\x01r\x06\x04base\x09\x0bdescription\x10\x0cinput-schema\x05\x0doutput-schema\x14\
\x0bannotations\x15\x04meta\x16\x04\0\x04tool\x03\0\x17\x01p\x01\x01k\x03\x01r\x04\
\x07content\x19\x12structured-content\x1a\x08is-error\x11\x04meta\x16\x04\0\x0bt\
ool-result\x03\0\x1b\x01k\x0d\x01k\x0f\x01r\x03\x06cursor\x1d\x0eprogress-token\x1e\
\x04meta\x16\x04\0\x12list-tools-request\x03\0\x1f\x01p\x18\x01r\x03\x05tools!\x0b\
next-cursor\x1d\x04meta\x16\x04\0\x13list-tools-response\x03\0\"\x01r\x04\x04nam\
es\x09arguments\x1a\x0eprogress-token\x1e\x04meta\x16\x04\0\x11call-tool-request\
\x03\0$\x03\0\x1cfastertools:mcp/tools@0.1.12\x05\x09\x02\x03\0\x01\x12list-tool\
s-request\x02\x03\0\x01\x13list-tools-response\x02\x03\0\x01\x11call-tool-reques\
t\x02\x03\0\x01\x0btool-result\x01B\x10\x02\x03\x02\x01\x04\x04\0\x09mcp-error\x03\
\0\0\x02\x03\x02\x01\x0a\x04\0\x12list-tools-request\x03\0\x02\x02\x03\x02\x01\x0b\
\x04\0\x13list-tools-response\x03\0\x04\x02\x03\x02\x01\x0c\x04\0\x11call-tool-r\
equest\x03\0\x06\x02\x03\x02\x01\x0d\x04\0\x0btool-result\x03\0\x08\x01j\x01\x05\
\x01\x01\x01@\x01\x07request\x03\0\x0a\x04\0\x11handle-list-tools\x01\x0b\x01j\x01\
\x09\x01\x01\x01@\x01\x07request\x07\0\x0c\x04\0\x10handle-call-tool\x01\x0d\x04\
\0)fastertools:mcp/tools-capabilities@0.1.12\x05\x0e\x04\0%fastertools:mcp/tools\
-provider@0.1.12\x04\0\x0b\x14\x01\0\x0etools-provider\x03\0\0\0G\x09producers\x01\
\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
