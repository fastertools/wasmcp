// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod wasmcp {
        pub mod mcp {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod handler {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[derive(Clone)]
                pub struct Tool {
                    pub name: _rt::String,
                    pub description: _rt::String,
                    pub input_schema: _rt::String,
                }
                impl ::core::fmt::Debug for Tool {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Tool")
                            .field("name", &self.name)
                            .field("description", &self.description)
                            .field("input-schema", &self.input_schema)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct ResourceInfo {
                    pub uri: _rt::String,
                    pub name: _rt::String,
                    pub description: Option<_rt::String>,
                    pub mime_type: Option<_rt::String>,
                }
                impl ::core::fmt::Debug for ResourceInfo {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("ResourceInfo")
                            .field("uri", &self.uri)
                            .field("name", &self.name)
                            .field("description", &self.description)
                            .field("mime-type", &self.mime_type)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct ResourceContents {
                    pub uri: _rt::String,
                    pub mime_type: Option<_rt::String>,
                    pub text: Option<_rt::String>,
                    pub blob: Option<_rt::Vec<u8>>,
                }
                impl ::core::fmt::Debug for ResourceContents {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("ResourceContents")
                            .field("uri", &self.uri)
                            .field("mime-type", &self.mime_type)
                            .field("text", &self.text)
                            .field("blob", &self.blob)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct PromptArgument {
                    pub name: _rt::String,
                    pub description: Option<_rt::String>,
                    pub required: bool,
                }
                impl ::core::fmt::Debug for PromptArgument {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("PromptArgument")
                            .field("name", &self.name)
                            .field("description", &self.description)
                            .field("required", &self.required)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct Prompt {
                    pub name: _rt::String,
                    pub description: Option<_rt::String>,
                    pub arguments: _rt::Vec<PromptArgument>,
                }
                impl ::core::fmt::Debug for Prompt {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Prompt")
                            .field("name", &self.name)
                            .field("description", &self.description)
                            .field("arguments", &self.arguments)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct PromptMessage {
                    pub role: _rt::String,
                    pub content: _rt::String,
                }
                impl ::core::fmt::Debug for PromptMessage {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("PromptMessage")
                            .field("role", &self.role)
                            .field("content", &self.content)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct Error {
                    pub code: i32,
                    pub message: _rt::String,
                    pub data: Option<_rt::String>,
                }
                impl ::core::fmt::Debug for Error {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Error")
                            .field("code", &self.code)
                            .field("message", &self.message)
                            .field("data", &self.data)
                            .finish()
                    }
                }
                impl ::core::fmt::Display for Error {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        write!(f, "{:?}", self)
                    }
                }
                impl std::error::Error for Error {}
                #[derive(Clone)]
                pub enum ToolResult {
                    Text(_rt::String),
                    Error(Error),
                }
                impl ::core::fmt::Debug for ToolResult {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            ToolResult::Text(e) => {
                                f.debug_tuple("ToolResult::Text").field(e).finish()
                            }
                            ToolResult::Error(e) => {
                                f.debug_tuple("ToolResult::Error").field(e).finish()
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_list_tools_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::list_tools();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec6 = result0;
                    let len6 = vec6.len();
                    let layout6 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec6.len() * (6 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result6 = if layout6.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout6);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec6.into_iter().enumerate() {
                        let base = result6
                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                        {
                            let Tool {
                                name: name2,
                                description: description2,
                                input_schema: input_schema2,
                            } = e;
                            let vec3 = (name2.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                            let vec4 = (description2.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                            let vec5 = (input_schema2.into_bytes()).into_boxed_slice();
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            ::core::mem::forget(vec5);
                            *base
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len5;
                            *base
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr5.cast_mut();
                        }
                    }
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len6;
                    *ptr1.add(0).cast::<*mut u8>() = result6;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_list_tools<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base8 = l0;
                    let len8 = l1;
                    for i in 0..len8 {
                        let base = base8
                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                        {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                            let l4 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l5 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l4, l5, 1);
                            let l6 = *base
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l7 = *base
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l6, l7, 1);
                        }
                    }
                    _rt::cabi_dealloc(
                        base8,
                        len8 * (6 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_call_tool_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let result2 = T::call_tool(
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result2 {
                        ToolResult::Text(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            let vec4 = (e.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr3
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                        }
                        ToolResult::Error(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            let Error { code: code5, message: message5, data: data5 } = e;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<i32>() = _rt::as_i32(code5);
                            let vec6 = (message5.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr3
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr3
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr6.cast_mut();
                            match data5 {
                                Some(e) => {
                                    *ptr3
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec7 = (e.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr3
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *ptr3
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                None => {
                                    *ptr3
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    }
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_call_tool<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l4 = *arg0
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                            let l5 = i32::from(
                                *arg0
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l5 {
                                0 => {}
                                _ => {
                                    let l6 = *arg0
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_list_resources_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::list_resources();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec7 = result0;
                    let len7 = vec7.len();
                    let layout7 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec7.len() * (10 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result7 = if layout7.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout7);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec7.into_iter().enumerate() {
                        let base = result7
                            .add(i * (10 * ::core::mem::size_of::<*const u8>()));
                        {
                            let ResourceInfo {
                                uri: uri2,
                                name: name2,
                                description: description2,
                                mime_type: mime_type2,
                            } = e;
                            let vec3 = (uri2.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                            let vec4 = (name2.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                            match description2 {
                                Some(e) => {
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match mime_type2 {
                                Some(e) => {
                                    *base
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec6 = (e.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *base
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *base
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                None => {
                                    *base
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    }
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len7;
                    *ptr1.add(0).cast::<*mut u8>() = result7;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_list_resources<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base12 = l0;
                    let len12 = l1;
                    for i in 0..len12 {
                        let base = base12
                            .add(i * (10 * ::core::mem::size_of::<*const u8>()));
                        {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                            let l4 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l5 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l4, l5, 1);
                            let l6 = i32::from(
                                *base
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l6 {
                                0 => {}
                                _ => {
                                    let l7 = *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l8 = *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l7, l8, 1);
                                }
                            }
                            let l9 = i32::from(
                                *base
                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l9 {
                                0 => {}
                                _ => {
                                    let l10 = *base
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l11 = *base
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                            }
                        }
                    }
                    _rt::cabi_dealloc(
                        base12,
                        len12 * (10 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_read_resource_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::read_resource(_rt::string_lift(bytes0));
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            let ResourceContents {
                                uri: uri3,
                                mime_type: mime_type3,
                                text: text3,
                                blob: blob3,
                            } = e;
                            let vec4 = (uri3.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr2
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *ptr2
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                            match mime_type3 {
                                Some(e) => {
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr2
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr2
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match text3 {
                                Some(e) => {
                                    *ptr2
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec6 = (e.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr2
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *ptr2
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                None => {
                                    *ptr2
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match blob3 {
                                Some(e) => {
                                    *ptr2
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec7 = (e).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr2
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *ptr2
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                None => {
                                    *ptr2
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let Error { code: code8, message: message8, data: data8 } = e;
                            *ptr2
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<i32>() = _rt::as_i32(code8);
                            let vec9 = (message8.into_bytes()).into_boxed_slice();
                            let ptr9 = vec9.as_ptr().cast::<u8>();
                            let len9 = vec9.len();
                            ::core::mem::forget(vec9);
                            *ptr2
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len9;
                            *ptr2
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr9.cast_mut();
                            match data8 {
                                Some(e) => {
                                    *ptr2
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec10 = (e.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr2
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *ptr2
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                None => {
                                    *ptr2
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_read_resource<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = i32::from(
                                *arg0
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l3 {
                                0 => {}
                                _ => {
                                    let l4 = *arg0
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                            let l6 = i32::from(
                                *arg0
                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l6 {
                                0 => {}
                                _ => {
                                    let l7 = *arg0
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l8 = *arg0
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l7, l8, 1);
                                }
                            }
                            let l9 = i32::from(
                                *arg0
                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l9 {
                                0 => {}
                                _ => {
                                    let l10 = *arg0
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l11 = *arg0
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base12 = l10;
                                    let len12 = l11;
                                    _rt::cabi_dealloc(base12, len12 * 1, 1);
                                }
                            }
                        }
                        _ => {
                            let l13 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l14 = *arg0
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l13, l14, 1);
                            let l15 = i32::from(
                                *arg0
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l15 {
                                0 => {}
                                _ => {
                                    let l16 = *arg0
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l17 = *arg0
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_list_prompts_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::list_prompts();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec9 = result0;
                    let len9 = vec9.len();
                    let layout9 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec9.len() * (7 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result9 = if layout9.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout9).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout9);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec9.into_iter().enumerate() {
                        let base = result9
                            .add(i * (7 * ::core::mem::size_of::<*const u8>()));
                        {
                            let Prompt {
                                name: name2,
                                description: description2,
                                arguments: arguments2,
                            } = e;
                            let vec3 = (name2.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                            match description2 {
                                Some(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr4.cast_mut();
                                }
                                None => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let vec8 = arguments2;
                            let len8 = vec8.len();
                            let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec8.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result8 = if layout8.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout8);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec8.into_iter().enumerate() {
                                let base = result8
                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let PromptArgument {
                                        name: name5,
                                        description: description5,
                                        required: required5,
                                    } = e;
                                    let vec6 = (name5.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                                    match description5 {
                                        Some(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec7 = (e.into_bytes()).into_boxed_slice();
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            ::core::mem::forget(vec7);
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len7;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr7.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match required5 {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                            }
                            *base
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len8;
                            *base
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result8;
                        }
                    }
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len9;
                    *ptr1.add(0).cast::<*mut u8>() = result9;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_list_prompts<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base15 = l0;
                    let len15 = l1;
                    for i in 0..len15 {
                        let base = base15
                            .add(i * (7 * ::core::mem::size_of::<*const u8>()));
                        {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                            let l4 = i32::from(
                                *base
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l4 {
                                0 => {}
                                _ => {
                                    let l5 = *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l6 = *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l5, l6, 1);
                                }
                            }
                            let l7 = *base
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l8 = *base
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base14 = l7;
                            let len14 = l8;
                            for i in 0..len14 {
                                let base = base14
                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l9 = *base.add(0).cast::<*mut u8>();
                                    let l10 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l9, l10, 1);
                                    let l11 = i32::from(
                                        *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l11 {
                                        0 => {}
                                        _ => {
                                            let l12 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l13 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l12, l13, 1);
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base14,
                                len14 * (6 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                    }
                    _rt::cabi_dealloc(
                        base15,
                        len15 * (7 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_prompt_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let result2 = T::get_prompt(
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result2 {
                        Ok(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            let vec7 = e;
                            let len7 = vec7.len();
                            let layout7 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec7.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result7 = if layout7.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout7);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec7.into_iter().enumerate() {
                                let base = result7
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let PromptMessage { role: role4, content: content4 } = e;
                                    let vec5 = (role4.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *base.add(0).cast::<*mut u8>() = ptr5.cast_mut();
                                    let vec6 = (content4.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                            }
                            *ptr3
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len7;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result7;
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            let Error { code: code8, message: message8, data: data8 } = e;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<i32>() = _rt::as_i32(code8);
                            let vec9 = (message8.into_bytes()).into_boxed_slice();
                            let ptr9 = vec9.as_ptr().cast::<u8>();
                            let len9 = vec9.len();
                            ::core::mem::forget(vec9);
                            *ptr3
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len9;
                            *ptr3
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr9.cast_mut();
                            match data8 {
                                Some(e) => {
                                    *ptr3
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec10 = (e.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr3
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *ptr3
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                None => {
                                    *ptr3
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_prompt<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base7 = l1;
                            let len7 = l2;
                            for i in 0..len7 {
                                let base = base7
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                    let l5 = *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l6 = *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l5, l6, 1);
                                }
                            }
                            _rt::cabi_dealloc(
                                base7,
                                len7 * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                        _ => {
                            let l8 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l9 = *arg0
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l8, l9, 1);
                            let l10 = i32::from(
                                *arg0
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l10 {
                                0 => {}
                                _ => {
                                    let l11 = *arg0
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l12 = *arg0
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l11, l12, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    fn list_tools() -> _rt::Vec<Tool>;
                    fn call_tool(
                        name: _rt::String,
                        arguments: _rt::String,
                    ) -> ToolResult;
                    fn list_resources() -> _rt::Vec<ResourceInfo>;
                    fn read_resource(
                        uri: _rt::String,
                    ) -> Result<ResourceContents, Error>;
                    fn list_prompts() -> _rt::Vec<Prompt>;
                    fn get_prompt(
                        name: _rt::String,
                        arguments: _rt::String,
                    ) -> Result<_rt::Vec<PromptMessage>, Error>;
                }
                #[doc(hidden)]
                macro_rules! __export_wasmcp_mcp_handler_0_1_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "wasmcp:mcp/handler@0.1.0#list-tools")] unsafe extern "C" fn
                        export_list_tools() -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_list_tools_cabi::<$ty > () } } #[unsafe (export_name =
                        "cabi_post_wasmcp:mcp/handler@0.1.0#list-tools")] unsafe extern
                        "C" fn _post_return_list_tools(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_list_tools::<$ty > (arg0) } }
                        #[unsafe (export_name = "wasmcp:mcp/handler@0.1.0#call-tool")]
                        unsafe extern "C" fn export_call_tool(arg0 : * mut u8, arg1 :
                        usize, arg2 : * mut u8, arg3 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_call_tool_cabi::<$ty > (arg0, arg1,
                        arg2, arg3) } } #[unsafe (export_name =
                        "cabi_post_wasmcp:mcp/handler@0.1.0#call-tool")] unsafe extern
                        "C" fn _post_return_call_tool(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_call_tool::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "wasmcp:mcp/handler@0.1.0#list-resources")] unsafe extern "C" fn
                        export_list_resources() -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_list_resources_cabi::<$ty > () } }
                        #[unsafe (export_name =
                        "cabi_post_wasmcp:mcp/handler@0.1.0#list-resources")] unsafe
                        extern "C" fn _post_return_list_resources(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: __post_return_list_resources::<$ty
                        > (arg0) } } #[unsafe (export_name =
                        "wasmcp:mcp/handler@0.1.0#read-resource")] unsafe extern "C" fn
                        export_read_resource(arg0 : * mut u8, arg1 : usize,) -> * mut u8
                        { unsafe { $($path_to_types)*:: _export_read_resource_cabi::<$ty
                        > (arg0, arg1) } } #[unsafe (export_name =
                        "cabi_post_wasmcp:mcp/handler@0.1.0#read-resource")] unsafe
                        extern "C" fn _post_return_read_resource(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: __post_return_read_resource::<$ty >
                        (arg0) } } #[unsafe (export_name =
                        "wasmcp:mcp/handler@0.1.0#list-prompts")] unsafe extern "C" fn
                        export_list_prompts() -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_list_prompts_cabi::<$ty > () } } #[unsafe (export_name =
                        "cabi_post_wasmcp:mcp/handler@0.1.0#list-prompts")] unsafe extern
                        "C" fn _post_return_list_prompts(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_list_prompts::<$ty > (arg0) }
                        } #[unsafe (export_name = "wasmcp:mcp/handler@0.1.0#get-prompt")]
                        unsafe extern "C" fn export_get_prompt(arg0 : * mut u8, arg1 :
                        usize, arg2 : * mut u8, arg3 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_get_prompt_cabi::<$ty > (arg0, arg1,
                        arg2, arg3) } } #[unsafe (export_name =
                        "cabi_post_wasmcp:mcp/handler@0.1.0#get-prompt")] unsafe extern
                        "C" fn _post_return_get_prompt(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_get_prompt::<$ty > (arg0) } }
                        };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_wasmcp_mcp_handler_0_1_0_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 12 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 12
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::alloc;
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_mcp_handler_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::wasmcp::mcp::handler::__export_wasmcp_mcp_handler_0_1_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::wasmcp::mcp::handler);
    };
}
#[doc(inline)]
pub(crate) use __export_mcp_handler_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:wasmcp:mcp@0.1.0:mcp-handler:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 769] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xff\x04\x01A\x02\x01\
A\x02\x01B&\x01r\x03\x04names\x0bdescriptions\x0cinput-schemas\x04\0\x04tool\x03\
\0\0\x01ks\x01r\x04\x03uris\x04names\x0bdescription\x02\x09mime-type\x02\x04\0\x0d\
resource-info\x03\0\x03\x01p}\x01k\x05\x01r\x04\x03uris\x09mime-type\x02\x04text\
\x02\x04blob\x06\x04\0\x11resource-contents\x03\0\x07\x01r\x03\x04names\x0bdescr\
iption\x02\x08required\x7f\x04\0\x0fprompt-argument\x03\0\x09\x01p\x0a\x01r\x03\x04\
names\x0bdescription\x02\x09arguments\x0b\x04\0\x06prompt\x03\0\x0c\x01r\x02\x04\
roles\x07contents\x04\0\x0eprompt-message\x03\0\x0e\x01r\x03\x04codez\x07message\
s\x04data\x02\x04\0\x05error\x03\0\x10\x01q\x02\x04text\x01s\0\x05error\x01\x11\0\
\x04\0\x0btool-result\x03\0\x12\x01p\x01\x01@\0\0\x14\x04\0\x0alist-tools\x01\x15\
\x01@\x02\x04names\x09argumentss\0\x13\x04\0\x09call-tool\x01\x16\x01p\x04\x01@\0\
\0\x17\x04\0\x0elist-resources\x01\x18\x01j\x01\x08\x01\x11\x01@\x01\x03uris\0\x19\
\x04\0\x0dread-resource\x01\x1a\x01p\x0d\x01@\0\0\x1b\x04\0\x0clist-prompts\x01\x1c\
\x01p\x0f\x01j\x01\x1d\x01\x11\x01@\x02\x04names\x09argumentss\0\x1e\x04\0\x0age\
t-prompt\x01\x1f\x04\0\x18wasmcp:mcp/handler@0.1.0\x05\0\x04\0\x1cwasmcp:mcp/mcp\
-handler@0.1.0\x04\0\x0b\x11\x01\0\x0bmcp-handler\x03\0\0\0G\x09producers\x01\x0c\
processed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
